{
  "info": {
    "_postman_id": "607737b4-1215-4218-82db-93b2ec2aa49d",
    "name": "Mage Cloud",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "oAuth2",
      "item": [
        {
          "name": "Token: client_credentials",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c1e0e280-a6cd-499c-b353-2e9bb4695a0a",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code === 200) {",
                  "    var jsonData = pm.response.json();",
                  "    pm.environment.set(\"guest-access-token\", jsonData.access_token);",
                  "}",
                  "",
                  "pm.test('Successfull call', function(){",
                  "    pm.response.to.be.success;",
                  "});",
                  "",
                  "pm.test(\"Response follows the correct json oAuth2 specifications\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.response.to.have.jsonBody('token_type','Bearer');",
                  "    pm.response.to.have.jsonBody('expires_in', 3600);",
                  "    pm.response.to.have.jsonBody('access_token');",
                  "    pm.response.to.have.jsonBody('scope', null);",
                  "    pm.response.to.not.have.jsonBody('refresh_token');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "PHP_AUTH_USER",
                "value": "{{client_id}}"
              },
              {
                "key": "PHP_AUTH_PW",
                "value": "{{client_secret}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"grant_type\": \"client_credentials\",\n  \"client_id\": \"{{client_id}}\",\n  \"client_secret\":\"{{client_secret}}\"\n}"
            },
            "url": {
              "raw": "{{domain}}{{endpoint_auth_token}}",
              "host": [
                "{{domain}}{{endpoint_auth_token}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Token: password",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "655aca92-7b3a-43c5-98cf-f8b614d02964",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code === 200) {",
                  "    var jsonData = pm.response.json();",
                  "    pm.environment.set(\"refresh-token\", jsonData.refresh_token);",
                  "    pm.environment.set(\"customer-access-token\", jsonData.access_token);",
                  "}",
                  "",
                  "pm.test('Successfull call', function(){",
                  "    pm.response.to.be.success;",
                  "});",
                  "",
                  "pm.test(\"Response follows the correct json oAuth2 specifications\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.response.to.have.jsonBody('token_type','Bearer');",
                  "    pm.response.to.have.jsonBody('expires_in', 3600);",
                  "    pm.response.to.have.jsonBody('refresh_token');",
                  "    pm.response.to.have.jsonBody('access_token');",
                  "    pm.response.to.have.jsonBody('scope', null);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "PHP_AUTH_USER",
                "value": "{{client_id}}"
              },
              {
                "key": "PHP_AUTH_PW",
                "value": "{{client_secret}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"grant_type\": \"password\",\n  \"username\": \"{{username1}}\",\n  \"password\": \"{{password}}\",\n  \"client_id\": \"{{client_id}}\",\n  \"client_secret\":\"{{client_secret}}\"\n}"
            },
            "url": {
              "raw": "{{domain}}{{endpoint_auth_token}}",
              "host": [
                "{{domain}}{{endpoint_auth_token}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Token: password (user2)",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "53376f26-24e1-4e9d-ad88-41b72df911fc",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code === 200) {",
                  "    var jsonData = pm.response.json();",
                  "    pm.environment.set(\"customer-access-token-2\", jsonData.access_token);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "PHP_AUTH_USER",
                "value": "{{client_id}}"
              },
              {
                "key": "PHP_AUTH_PW",
                "value": "{{client_secret}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"grant_type\": \"password\",\n  \"username\": \"{{username2}}\",\n  \"password\": \"{{password}}\",\n  \"client_id\": \"{{client_id}}\",\n  \"client_secret\":\"{{client_secret}}\"\n}"
            },
            "url": {
              "raw": "{{domain}}{{endpoint_auth_token}}",
              "host": [
                "{{domain}}{{endpoint_auth_token}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Token: authorization_code",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e455c6e7-0555-4b6e-a1e9-e4df1e547257",
                "type": "text/javascript",
                "exec": [
                  "if (false) { //skip for now as there is no good way to test",
                  "    if (responseCode.code === 200) {",
                  "        var jsonData = pm.response.json();",
                  "        pm.environment.set(\"guest-access-token\", jsonData.access_token);",
                  "    }",
                  "    ",
                  "    pm.test('Successfull call', function(){",
                  "        pm.response.to.be.success;",
                  "    });",
                  "    ",
                  "    pm.test(\"Response follows the correct json oAuth2 specifications\", function () {",
                  "        var jsonData = pm.response.json();",
                  "        pm.response.to.have.jsonBody('token_type','Bearer');",
                  "        pm.response.to.have.jsonBody('expires_in', 3600);",
                  "        pm.response.to.have.jsonBody('access_token');",
                  "        pm.response.to.have.jsonBody('scope', null);",
                  "    });",
                  "}",
                  ""
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "3092705d-cd39-4811-b8df-1c6636d785a4",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "PHP_AUTH_USER",
                "value": "{{client_id}}"
              },
              {
                "key": "PHP_AUTH_PW",
                "value": "{{client_secret}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"grant_type\": \"authorization_code\",\n  \"code\": \"1b8e9872e7fb093a71482ea13902f28b2ad1c4e5\"\n}"
            },
            "url": {
              "raw": "{{domain}}{{endpoint_auth_token}}",
              "host": [
                "{{domain}}{{endpoint_auth_token}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Token: refresh_token",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c3019287-a9f7-445b-af8b-bd18971c4751",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code === 200) {",
                  "    var jsonData = pm.response.json();",
                  "    pm.environment.set(\"customer-access-token\", jsonData.access_token);",
                  "}",
                  "",
                  "pm.test('Successfull call', function(){",
                  "    pm.response.to.be.success;",
                  "});",
                  "",
                  "pm.test(\"Response follows the correct json oAuth2 specifications\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.response.to.have.jsonBody('token_type','Bearer');",
                  "    pm.response.to.have.jsonBody('expires_in', 3600);",
                  "    pm.response.to.have.jsonBody('access_token');",
                  "    pm.response.to.have.jsonBody('scope', null);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "PHP_AUTH_USER",
                "value": "{{client_id}}"
              },
              {
                "key": "PHP_AUTH_PW",
                "value": "{{client_secret}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"grant_type\": \"refresh_token\",\n  \"refresh_token\": \"{{refresh-token}}\",\n  \"client_id\": \"{{client_id}}\",\n  \"client_secret\":\"{{client_secret}}\"\n}"
            },
            "url": {
              "raw": "{{domain}}{{endpoint_auth_token}}",
              "host": [
                "{{domain}}{{endpoint_auth_token}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Token: refresh_token re-use",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d078640e-9115-4b6e-8c25-7a6122a8c838",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = pm.response.json();",
                  "",
                  "pm.test('New access token differs from the old', function() { ",
                  "    pm.expect(pm.environment.get(\"customer-access-token\")).to.not.equal(jsonData.access_token);",
                  "});",
                  "",
                  "pm.test(\"Response follows the correct json oAuth2 specifications\", function () {",
                  "    pm.response.to.have.jsonBody('token_type','Bearer');",
                  "    pm.response.to.have.jsonBody('expires_in', 3600);",
                  "    pm.response.to.have.jsonBody('access_token');",
                  "    pm.response.to.have.jsonBody('scope', null);",
                  "});",
                  "",
                  "if (jsonData.hasOwnProperty('access_token')) {",
                  "  pm.environment.set(\"customer-access-token\", jsonData.access_token);  ",
                  "}",
                  "",
                  "pm.environment.unset(\"refresh-token\");"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "PHP_AUTH_USER",
                "value": "{{client_id}}"
              },
              {
                "key": "PHP_AUTH_PW",
                "value": "{{client_secret}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"grant_type\": \"refresh_token\",\n  \"refresh_token\": \"{{refresh-token}}\",\n  \"client_id\": \"{{client_id}}\",\n  \"client_secret\":\"{{client_secret}}\"\n}"
            },
            "url": {
              "raw": "{{domain}}{{endpoint_auth_token}}",
              "host": [
                "{{domain}}{{endpoint_auth_token}}"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "/v2/carts | /v2/carts/:id",
      "item": [
        {
          "name": "Customer",
          "item": [
            {
              "name": "Create customer cart",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "var jsonData = pm.response.json();",
                      "if (responseCode.code === 200 && jsonData.hasOwnProperty('cartId')) {",
                      "    pm.environment.set(\"cartId\", jsonData.cartId);",
                      "    tests[\"Cart ID is returned\"] = isNumeric(jsonData.cartId) === true;",
                      "} else {",
                      "    tests[\"Cart ID is not returned\"] = false;",
                      "}",
                      "",
                      "pm.test('Successfull call', function(){",
                      "    pm.response.to.be.success;",
                      "});",
                      "",
                      "function isNumeric(n) {",
                      "  return !isNaN(parseFloat(n)) && isFinite(n);",
                      "}"
                    ]
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{customer-access-token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{}"
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_carts}}",
                  "host": [
                    "{{domain}}{{endpoint_carts}}"
                  ]
                },
                "description": "Creates a customer cart"
              },
              "response": []
            },
            {
              "name": "Get Cart via ME endpoint",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Successfully loaded cart via ME endpoint\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{customer-access-token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{}"
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_carts}}/me",
                  "host": [
                    "{{domain}}{{endpoint_carts}}"
                  ],
                  "path": [
                    "me"
                  ]
                },
                "description": "Creates a customer cart"
              },
              "response": []
            },
            {
              "name": "Get cart via {cartId}",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{customer-access-token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{}"
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_carts}}/{{cartId}}",
                  "host": [
                    "{{domain}}{{endpoint_carts}}"
                  ],
                  "path": [
                    "{{cartId}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Use bad cartID",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Bogus quote cannot be found\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{customer-access-token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{}"
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_carts}}/000",
                  "host": [
                    "{{domain}}{{endpoint_carts}}"
                  ],
                  "path": [
                    "000"
                  ]
                }
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "name": "Guest",
          "item": [
            {
              "name": "ME endpoint as guest",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "tests[\"loading ME endpoint as guest fails\"] = responseCode.code === 400;"
                    ]
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{guest-access-token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{}"
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_carts}}/me",
                  "host": [
                    "{{domain}}{{endpoint_carts}}"
                  ],
                  "path": [
                    "me"
                  ]
                },
                "description": "calls a ME endpoint"
              },
              "response": []
            },
            {
              "name": "Customer Quote as guest",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 403\", function () {",
                      "    pm.response.to.have.status(403);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{guest-access-token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{}"
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_carts}}/{{cartId}}",
                  "host": [
                    "{{domain}}{{endpoint_carts}}"
                  ],
                  "path": [
                    "{{cartId}}"
                  ]
                },
                "description": "calls a customer cart as guest"
              },
              "response": []
            },
            {
              "name": "Create guest cart",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "var jsonData = pm.response.json();",
                      "if (responseCode.code === 200 && jsonData.hasOwnProperty('cartId')) {",
                      "    pm.environment.set(\"cartId\", jsonData.cartId);",
                      "    tests[\"Cart ID is returned\"] = isNumeric(jsonData.cartId) === true;",
                      "} else {",
                      "    tests[\"Cart ID is not returned\"] = false;",
                      "}",
                      "",
                      "pm.test('Successfull call', function(){",
                      "    pm.response.to.be.success;",
                      "});",
                      "",
                      "function isNumeric(n) {",
                      "  return !isNaN(parseFloat(n)) && isFinite(n);",
                      "}"
                    ]
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{guest-access-token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{}"
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_carts}}",
                  "host": [
                    "{{domain}}{{endpoint_carts}}"
                  ]
                },
                "description": "Creates a guest cart and assigns the local cartId variable from the one returned"
              },
              "response": []
            },
            {
              "name": "Guest Quote as guest",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "tests[\"Loading guest quote as guest\"] = responseCode.code === 200;"
                    ]
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{guest-access-token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{}"
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_carts}}/{{cartId}}",
                  "host": [
                    "{{domain}}{{endpoint_carts}}"
                  ],
                  "path": [
                    "{{cartId}}"
                  ]
                }
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        }
      ]
    },
    {
      "name": "/v2/carts/:id/items",
      "item": [
        {
          "name": "Product",
          "item": [
            {
              "name": "Customer - Add",
              "item": [
                {
                  "name": "/carts: customer",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "type": "text/javascript",
                        "exec": [
                          "var jsonData = pm.response.json();",
                          "if (responseCode.code === 200 && jsonData.hasOwnProperty('cartId')) {",
                          "    pm.environment.set(\"cartId\", jsonData.cartId);",
                          "    tests[\"Cart ID is returned\"] = isNumeric(jsonData.cartId) === true;",
                          "} else {",
                          "    tests[\"Cart ID is not returned\"] = false;",
                          "}",
                          "",
                          "pm.test('Successfull call', function(){",
                          "    pm.response.to.be.success;",
                          "});",
                          "",
                          "function isNumeric(n) {",
                          "  return !isNaN(parseFloat(n)) && isFinite(n);",
                          "}"
                        ]
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{customer-access-token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{}"
                    },
                    "url": {
                      "raw": "{{domain}}{{endpoint_carts}}",
                      "host": [
                        "{{domain}}{{endpoint_carts}}"
                      ]
                    },
                    "description": "Creates a customer cart"
                  },
                  "response": []
                },
                {
                  "name": "Bundle + Configurable",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "type": "text/javascript",
                        "exec": [
                          "pm.test('Successfull call', function(){",
                          "    pm.response.to.be.success;",
                          "});"
                        ]
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{customer-access-token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "[\n  {\n    \"product\": {\n      \"product_id\": \"447\",\n      \"qty\": 2,\n      \"bundle_option\": {\n        \"23\": \"88\",\n        \"24\": \"91\"\n      },\n      \"bundle_option_qty\": {\n        \"23\": \"3\",\n        \"24\": \"4\"\n      }\n    }\n  },\n  {\n    \"product\": {\n       \"product_id\": \"422\",\n    \t\"qty\": 1,\n    \t\"super_attribute\": {\n           \"92\": \"17\",\n           \"180\": \"76\"\n        }\n    }\n  }\n]"
                    },
                    "url": {
                      "raw": "{{domain}}{{endpoint_carts_id_items}}",
                      "host": [
                        "{{domain}}{{endpoint_carts_id_items}}"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Add Configurable: Skirt",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "type": "text/javascript",
                        "exec": [
                          "pm.test('Successfull call', function(){",
                          "    pm.response.to.be.success;",
                          "});"
                        ]
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{customer-access-token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "[\n  {\n\t    \"product\": {\n\t\t    \"product_id\": \"422\",\n\t\t    \"qty\": 1,\n\t\t    \"super_attribute\": {\n\t\t\t      \"92\": \"17\",\n\t\t\t      \"180\": \"76\"\n\t\t\t    }\n\t\t}\n  }\n]"
                    },
                    "url": {
                      "raw": "{{domain}}{{endpoint_carts_id_items}}",
                      "host": [
                        "{{domain}}{{endpoint_carts_id_items}}"
                      ]
                    },
                    "description": "ID: 422\nType: Configurable\nName: Essex Pencil Skirt\nSKU: wsd000c\nCategory: Dresses & Skirts\nPrice: $185.00\n\nSub-Products:\nID: 297 | 298 | 299 | 300 | 301\nName: Essex Pencil Skirt\nSKU: wsd000 | wsd001 | wsd002 | wsd003 | wsd004\nColor (ID: 92): Charcoal (ID: 17)\nSize (ID: 180): 2 (ID: 76) | 4 (ID: 75) | 6 (ID: 74) | 8 (ID: 73) | 10 (ID: 72)"
                  },
                  "response": []
                },
                {
                  "name": "Add Configurable: Skirt via SKU",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "type": "text/javascript",
                        "exec": [
                          "pm.test('Successfull call', function(){",
                          "    pm.response.to.be.success;",
                          "});"
                        ]
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{customer-access-token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "[\n  {\n\t    \"product\": {\n\t\t    \"sku\": \"wsd000c\",\n\t\t    \"qty\": 1,\n\t\t    \"super_attribute\": {\n\t\t\t      \"92\": \"17\",\n\t\t\t      \"180\": \"76\"\n\t\t\t    }\n\t\t}\n  }\n]"
                    },
                    "url": {
                      "raw": "{{domain}}{{endpoint_carts_id_items}}",
                      "host": [
                        "{{domain}}{{endpoint_carts_id_items}}"
                      ]
                    },
                    "description": "ID: 422\nType: Configurable\nName: Essex Pencil Skirt\nSKU: wsd000c\nCategory: Dresses & Skirts\nPrice: $185.00\n\nSub-Products:\nID: 297 | 298 | 299 | 300 | 301\nName: Essex Pencil Skirt\nSKU: wsd000 | wsd001 | wsd002 | wsd003 | wsd004\nColor (ID: 92): Charcoal (ID: 17)\nSize (ID: 180): 2 (ID: 76) | 4 (ID: 75) | 6 (ID: 74) | 8 (ID: 73) | 10 (ID: 72)"
                  },
                  "response": []
                },
                {
                  "name": "Bundled",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "type": "text/javascript",
                        "exec": [
                          "pm.test('Successfull call', function(){",
                          "    pm.response.to.be.success;",
                          "});"
                        ]
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{customer-access-token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "[\n  {\n    \"product\": {\n\t    \"product_id\": \"447\",\n\t    \"qty\": 2,\n\t    \"bundle_option\": {\n\t      \"23\": \"88\",\n\t      \"24\": \"91\"\n\t    },\n\t    \"bundle_option_qty\": {\n\t      \"23\": \"3\",\n\t      \"24\": \"4\"\n\t    }\n\t}\n  }\n]"
                    },
                    "url": {
                      "raw": "{{domain}}{{endpoint_carts_id_items}}",
                      "host": [
                        "{{domain}}{{endpoint_carts_id_items}}"
                      ]
                    },
                    "description": "ID: 447\nType: Bundle\nName: Pillow and Throw Set\nSKU (dynamic): hdb010\nURL: pillow-and-throw-set\nCategory: Home & Decor -> Bed & Bath\nPrice: N/A\n\nBundle Items:\nTitle: Accent Pillow\nID: 24\nName: Titian Raw Silk Pillow | Shay Printed Pillow\nSKU: hdb005 | hdb006\nID: 381 | 382\nSelection ID: 91 | 92\nPrice: 125.00 | 210.00\n\nTitle: Decorative Throw\nID: 23\nName: Carnegie Alpaca Throw | Row Throw | Gramercy Throw\nSKU: hdb007 | hdb008 | hdb009\nID: 383 | 384 | 385\nPrice: 275.00 | 240.00 | 275.00\nSelection ID: 88 | 89 | 115"
                  },
                  "response": []
                },
                {
                  "name": "Downloadable",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "type": "text/javascript",
                        "exec": [
                          "pm.test('Successfull call', function(){",
                          "    pm.response.to.be.success;",
                          "});"
                        ]
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{customer-access-token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "[\n  {\n    \"product\": {\n\t    \"product_id\": \"563\",\n\t    \"qty\": 1,\n\t    \"links\": [\n\t      \"18\"\n\t    ]\n\t }\n  }\n]"
                    },
                    "url": {
                      "raw": "{{domain}}{{endpoint_carts_id_items}}",
                      "host": [
                        "{{domain}}{{endpoint_carts_id_items}}"
                      ]
                    },
                    "description": "ID: 563\nName: Fire [Kalima remix] by Unannounced Guest\nSKU: hbm010\nCategory: Music & Books\nURL: fire-kalima-remix-by-unannounced-guest\nPrice: 2.00\nQty: 1000"
                  },
                  "response": []
                },
                {
                  "name": "Grouped",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "type": "text/javascript",
                        "exec": [
                          "pm.test('Successfull call', function(){",
                          "    pm.response.to.be.success;",
                          "});"
                        ]
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{customer-access-token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "[\n  {\n    \"product\": {\n\t    \"product_id\": \"439\",\n\t    \"qty\": 1,\n\t    \"super_group\": {\n\t      \"541\" : 2\n\t    }\n\t  }\n  }\n]"
                    },
                    "url": {
                      "raw": "{{domain}}{{endpoint_carts_id_items}}",
                      "host": [
                        "{{domain}}{{endpoint_carts_id_items}}"
                      ]
                    },
                    "description": "ID: 439\nName: Luggage Set\nType: Grouped\nSKU: abl008\nURL: luggage-set\nCategory: Bags & Luggage\n\nSub-Product:\nID: 541 | 377 | 376\nName: Classic Hardshell Suitcase 19\" | Classic Hardshell Suitcase 29\" | Classic Hardshell Suitcase 21\"\nSKU: abl009 | abl007 | abl006\nPrice: 600.00 | 750.00 | 650.00\nQty: 7 | 13 | 15"
                  },
                  "response": []
                },
                {
                  "name": "Simple",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "type": "text/javascript",
                        "exec": [
                          "pm.test('Successfull call', function(){",
                          "    pm.response.to.be.success;",
                          "});"
                        ]
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{customer-access-token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "[\n  {\n    \"product\": {\n\t    \"product_id\": \"554\",\n\t    \"qty\": 1\n\t  }\n  }\n]"
                    },
                    "url": {
                      "raw": "{{domain}}{{endpoint_carts_id_items}}",
                      "host": [
                        "{{domain}}{{endpoint_carts_id_items}}"
                      ]
                    },
                    "description": "ID: 554\nType: Simple\nName: Swiss Movement Sports Watch\nSKU: acj005\nURL: swiss-movement-sports-watch\nCategory: Jewelry\nPrice: $500.00\nQty: 3"
                  },
                  "response": []
                },
                {
                  "name": "GiftCard Combined",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "80c8e513-1bca-429b-a1fb-9b129d4f7efe",
                        "type": "text/javascript",
                        "exec": [
                          "if (pm.variables.get(\"mage_type\") === 'EE') {",
                          "    pm.test('Successfull call', function(){",
                          "        pm.response.to.be.success;",
                          "    });",
                          "} else {",
                          "    pm.test(\"Giftcards don't exist in the Community edition\", function () {",
                          "        pm.response.to.have.status(404);",
                          "    });",
                          "}"
                        ]
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{customer-access-token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "[\n  {\n    \"product\": {\n\t    \"sku\": \"gif001\",\n\t    \"qty\": 1,\n\t    \"custom_giftcard_amount\": \"75\",\n\t    \"giftcard_sender_name\": \"Some sender name\",\n\t    \"giftcard_sender_email\": \"test@shopgate.com\",\n\t    \"giftcard_recipient_name\": \"Some recipient name\",\n\t    \"giftcard_recipient_email\": \"test2@shopgate.com\",\n\t    \"giftcard_message\": \"Message to recipient\"\n\t  }\n  }\n]"
                    },
                    "url": {
                      "raw": "{{domain}}{{endpoint_carts_id_items}}",
                      "host": [
                        "{{domain}}{{endpoint_carts_id_items}}"
                      ]
                    },
                    "description": "Combined type Gift card with custom price"
                  },
                  "response": []
                },
                {
                  "name": "GiftCard Virtual CP",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "fa327b11-c19c-48fb-b431-b26cdbe5f546",
                        "type": "text/javascript",
                        "exec": [
                          "if (pm.variables.get(\"mage_type\") === 'EE') {",
                          "    pm.test('Successfull call', function(){",
                          "        pm.response.to.be.success;",
                          "    });",
                          "} else {",
                          "    pm.test(\"Giftcards don't exist in the Community edition\", function () {",
                          "        pm.response.to.have.status(404);",
                          "    });",
                          "}"
                        ]
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{customer-access-token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "[\n  {\n    \"product\": {\n\t    \"sku\": \"gif003\",\n\t    \"qty\": 1,\n\t    \"custom_giftcard_amount\": \"50\",\n\t    \"giftcard_sender_name\": \"Some sender name\",\n\t    \"giftcard_sender_email\": \"test@shopgate.com\",\n\t    \"giftcard_recipient_name\": \"Some recipient name\",\n\t    \"giftcard_recipient_email\": \"test2@shopgate.com\",\n\t    \"giftcard_message\": \"Message to recipient\"\n\t  }\n  }\n]"
                    },
                    "url": {
                      "raw": "{{domain}}{{endpoint_carts_id_items}}",
                      "host": [
                        "{{domain}}{{endpoint_carts_id_items}}"
                      ]
                    },
                    "description": "Virtual card with custom price set"
                  },
                  "response": []
                },
                {
                  "name": "GiftCard Virtual Set",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e40fb867-1ea6-49a3-8742-cbd3f98c0247",
                        "type": "text/javascript",
                        "exec": [
                          "if (pm.variables.get(\"mage_type\") === 'EE') {",
                          "    pm.test('Successfull call', function(){",
                          "        pm.response.to.be.success;",
                          "    });",
                          "} else {",
                          "    pm.test(\"Giftcards don't exist in the Community edition\", function () {",
                          "        pm.response.to.have.status(404);",
                          "    });",
                          "}"
                        ]
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{customer-access-token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "[\n  {\n    \"product\": {\n\t    \"sku\": \"gif002\",\n\t    \"qty\": 1,\n\t    \"giftcard_sender_name\": \"Some sender name\",\n\t    \"giftcard_sender_email\": \"test@shopgate.com\",\n\t    \"giftcard_recipient_name\": \"Some recipient name\",\n\t    \"giftcard_recipient_email\": \"test2@shopgate.com\",\n\t    \"giftcard_message\": \"Message to recipient\"\n\t  }\n  }\n]"
                    },
                    "url": {
                      "raw": "{{domain}}{{endpoint_carts_id_items}}",
                      "host": [
                        "{{domain}}{{endpoint_carts_id_items}}"
                      ]
                    },
                    "description": "Virtual card with custom price set"
                  },
                  "response": []
                }
              ],
              "_postman_isSubFolder": true
            },
            {
              "name": "Customer - Update",
              "item": [
                {
                  "name": "/carts: customer",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "type": "text/javascript",
                        "exec": [
                          "var jsonData = pm.response.json();",
                          "if (responseCode.code === 200 && jsonData.hasOwnProperty('cartId')) {",
                          "    pm.environment.set(\"cartId\", jsonData.cartId);",
                          "    tests[\"Cart ID is returned\"] = isNumeric(jsonData.cartId) === true;",
                          "} else {",
                          "    tests[\"Cart ID is not returned\"] = false;",
                          "}",
                          "",
                          "pm.test('Successfull call', function(){",
                          "    pm.response.to.be.success;",
                          "});",
                          "",
                          "function isNumeric(n) {",
                          "  return !isNaN(parseFloat(n)) && isFinite(n);",
                          "}"
                        ]
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{customer-access-token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{}"
                    },
                    "url": {
                      "raw": "{{domain}}{{endpoint_carts}}",
                      "host": [
                        "{{domain}}{{endpoint_carts}}"
                      ]
                    },
                    "description": "Creates a customer cart"
                  },
                  "response": []
                },
                {
                  "name": "Simple",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "type": "text/javascript",
                        "exec": [
                          "pm.test('Successfull call', function(){",
                          "    pm.response.to.be.success;",
                          "});"
                        ]
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{customer-access-token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "[\n  {\n    \"product\": {\n\t    \"product_id\": \"554\",\n\t    \"qty\": 1\n\t  }\n  }\n]"
                    },
                    "url": {
                      "raw": "{{domain}}{{endpoint_carts_id_items}}",
                      "host": [
                        "{{domain}}{{endpoint_carts_id_items}}"
                      ]
                    },
                    "description": "ID: 554\nType: Simple\nName: Swiss Movement Sports Watch\nSKU: acj005\nURL: swiss-movement-sports-watch\nCategory: Jewelry\nPrice: $500.00\nQty: 3"
                  },
                  "response": []
                },
                {
                  "name": "Get cart contents",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "type": "text/javascript",
                        "exec": [
                          "var jsonData = pm.response.json();",
                          "if (responseCode.code === 200 && jsonData.items.length > 0) {",
                          "    pm.environment.set(\"cart_item_id\", jsonData.items[0].item_id);",
                          "} else {",
                          "    tests[\"Not 200 code or no cart items returned\"] = false;",
                          "}",
                          "",
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"Initial quantity is 1 after adding simple product\", function () {",
                          "    pm.expect(jsonData.items[0].qty).to.eql(1);",
                          "});"
                        ]
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{customer-access-token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "GET",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{}"
                    },
                    "url": {
                      "raw": "{{domain}}{{endpoint_carts}}/{{cartId}}",
                      "host": [
                        "{{domain}}{{endpoint_carts}}"
                      ],
                      "path": [
                        "{{cartId}}"
                      ]
                    },
                    "description": "Creates a customer cart"
                  },
                  "response": []
                },
                {
                  "name": "Update simple",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "type": "text/javascript",
                        "exec": [
                          "pm.test('Successfull call', function(){",
                          "    pm.response.to.be.success;",
                          "});"
                        ]
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{customer-access-token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "[\n  {\n  \t\"cartItemId\": \"{{cart_item_id}}\",\n    \"product\": {\n\t    \"product_id\": \"554\",\n\t    \"qty\": 3\n\t  }\n  }\n]"
                    },
                    "url": {
                      "raw": "{{domain}}{{endpoint_carts_id_items}}",
                      "host": [
                        "{{domain}}{{endpoint_carts_id_items}}"
                      ]
                    },
                    "description": "ID: 554\nType: Simple\nName: Swiss Movement Sports Watch\nSKU: acj005\nURL: swiss-movement-sports-watch\nCategory: Jewelry\nPrice: $500.00\nQty: 3"
                  },
                  "response": []
                },
                {
                  "name": "Get cart contents",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "type": "text/javascript",
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"Qty is now updated to 3 for the previously inserted simple product\", function () {",
                          "    var jsonData = pm.response.json();",
                          "    pm.expect(jsonData.items[0].qty).to.eql(3);",
                          "});"
                        ]
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{customer-access-token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "GET",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{}"
                    },
                    "url": {
                      "raw": "{{domain}}{{endpoint_carts}}/{{cartId}}",
                      "host": [
                        "{{domain}}{{endpoint_carts}}"
                      ],
                      "path": [
                        "{{cartId}}"
                      ]
                    },
                    "description": "Creates a customer cart"
                  },
                  "response": []
                }
              ],
              "_postman_isSubFolder": true
            },
            {
              "name": "Customer - Delete",
              "item": [
                {
                  "name": "All item removal",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "type": "text/javascript",
                        "exec": [
                          "pm.test('Successfull call', function(){",
                          "    pm.response.to.be.success;",
                          "});"
                        ]
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{customer-access-token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "DELETE",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": ""
                    },
                    "url": {
                      "raw": "{{domain}}{{endpoint_carts_id_items}}",
                      "host": [
                        "{{domain}}{{endpoint_carts_id_items}}"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Check cart for no items",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "type": "text/javascript",
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"No items in cart\", function () {",
                          "    var jsonData = pm.response.json();",
                          "    pm.expect(jsonData.items).to.be.empty;",
                          "});"
                        ]
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{customer-access-token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "GET",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{}"
                    },
                    "url": {
                      "raw": "{{domain}}{{endpoint_carts}}/{{cartId}}",
                      "host": [
                        "{{domain}}{{endpoint_carts}}"
                      ],
                      "path": [
                        "{{cartId}}"
                      ]
                    },
                    "description": "Creates a customer cart"
                  },
                  "response": []
                }
              ],
              "_postman_isSubFolder": true
            },
            {
              "name": "Customer - Errors",
              "item": [
                {
                  "name": "Bad product ID",
                  "item": [
                    {
                      "name": "/carts: customer",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "type": "text/javascript",
                            "exec": [
                              "var jsonData = pm.response.json();",
                              "if (responseCode.code === 200 && jsonData.hasOwnProperty('cartId')) {",
                              "    pm.environment.set(\"cartId\", jsonData.cartId);",
                              "    tests[\"Cart ID is returned\"] = isNumeric(jsonData.cartId) === true;",
                              "} else {",
                              "    tests[\"Cart ID is not returned\"] = false;",
                              "}",
                              "",
                              "pm.test('Successfull call', function(){",
                              "    pm.response.to.be.success;",
                              "});",
                              "",
                              "function isNumeric(n) {",
                              "  return !isNaN(parseFloat(n)) && isFinite(n);",
                              "}"
                            ]
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{customer-access-token}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "POST",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{}"
                        },
                        "url": {
                          "raw": "{{domain}}{{endpoint_carts}}",
                          "host": [
                            "{{domain}}{{endpoint_carts}}"
                          ]
                        },
                        "description": "Creates a customer cart"
                      },
                      "response": []
                    },
                    {
                      "name": "Cfg + non-existing",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "type": "text/javascript",
                            "exec": [
                              "pm.test(\"Product does not exist\", function () {",
                              "    pm.response.to.have.status(404);",
                              "});"
                            ]
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{customer-access-token}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "POST",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "[\n  {\n    \"product\": {\n       \"product_id\": \"422\",\n    \t\"qty\": 1,\n    \t\"super_attribute\": {\n           \"92\": \"17\",\n           \"180\": \"76\"\n        }\n    }\n  },\n  {\n    \"product\": {\n\t    \"product_id\": \"9999\",\n\t    \"qty\": 1,\n\t    \"links\": [\n\t      \"18\"\n\t    ]\n\t }\n  }\n]"
                        },
                        "url": {
                          "raw": "{{domain}}{{endpoint_carts_id_items}}",
                          "host": [
                            "{{domain}}{{endpoint_carts_id_items}}"
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Cart should be empty",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "type": "text/javascript",
                            "exec": [
                              "var jsonData = pm.response.json();",
                              "",
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test(\"No products were added\", function () {",
                              "    pm.expect(jsonData.items.length).to.eql(0);",
                              "});"
                            ]
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{customer-access-token}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "GET",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{}"
                        },
                        "url": {
                          "raw": "{{domain}}{{endpoint_carts}}/{{cartId}}",
                          "host": [
                            "{{domain}}{{endpoint_carts}}"
                          ],
                          "path": [
                            "{{cartId}}"
                          ]
                        },
                        "description": "Creates a customer cart"
                      },
                      "response": []
                    }
                  ],
                  "_postman_isSubFolder": true
                },
                {
                  "name": "Out of stock",
                  "item": [
                    {
                      "name": "/carts: customer",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "type": "text/javascript",
                            "exec": [
                              "var jsonData = pm.response.json();",
                              "if (responseCode.code === 200 && jsonData.cartId) {",
                              "    pm.environment.set(\"cartId\", jsonData.cartId);",
                              "    tests[\"Cart ID is returned\"] = isNumeric(jsonData.cartId) === true;",
                              "} else {",
                              "    tests[\"Cart ID is not returned\"] = false;",
                              "}",
                              "",
                              "pm.test('Successfull call', function(){",
                              "    pm.response.to.be.success;",
                              "});",
                              "",
                              "function isNumeric(n) {",
                              "  return !isNaN(parseFloat(n)) && isFinite(n);",
                              "}"
                            ]
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{customer-access-token}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "POST",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{}"
                        },
                        "url": {
                          "raw": "{{domain}}{{endpoint_carts}}",
                          "host": [
                            "{{domain}}{{endpoint_carts}}"
                          ]
                        },
                        "description": "Creates a customer cart"
                      },
                      "response": []
                    },
                    {
                      "name": "Add simple, qty 999",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "type": "text/javascript",
                            "exec": [
                              "pm.test('Successfull call', function(){",
                              "    pm.response.to.be.success;",
                              "});"
                            ]
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{customer-access-token}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "POST",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "[\n  {\n    \"product\": {\n\t    \"product_id\": \"554\",\n\t    \"qty\": 999\n\t  }\n  }\n]"
                        },
                        "url": {
                          "raw": "{{domain}}{{endpoint_carts_id_items}}",
                          "host": [
                            "{{domain}}{{endpoint_carts_id_items}}"
                          ]
                        },
                        "description": "ID: 554\nType: Simple\nName: Swiss Movement Sports Watch\nSKU: acj005\nURL: swiss-movement-sports-watch\nCategory: Jewelry\nPrice: $500.00\nQty: 3"
                      },
                      "response": []
                    },
                    {
                      "name": "Check cart errors",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "type": "text/javascript",
                            "exec": [
                              "var jsonData = pm.response.json();",
                              "",
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test(\"Qty is indeed 999\", function () {",
                              "    pm.expect(jsonData.items[0].qty).to.eql(999);",
                              "});",
                              "",
                              "pm.test(\"Cart has errors\", function () {",
                              "    pm.expect(jsonData.has_error).to.eql(true);",
                              "});",
                              "",
                              "pm.test(\"Item has errors & error array\", function () {",
                              "    pm.expect(jsonData.items[0].has_error).to.eql(true);",
                              "    pm.expect(jsonData.items[0].errors).to.not.be.empty;",
                              "});"
                            ]
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{customer-access-token}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "GET",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{}"
                        },
                        "url": {
                          "raw": "{{domain}}{{endpoint_carts}}/{{cartId}}",
                          "host": [
                            "{{domain}}{{endpoint_carts}}"
                          ],
                          "path": [
                            "{{cartId}}"
                          ]
                        },
                        "description": "Creates a customer cart"
                      },
                      "response": []
                    }
                  ],
                  "_postman_isSubFolder": true
                },
                {
                  "name": "Minimum order amount",
                  "item": [
                    {
                      "name": "/carts: customer",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "type": "text/javascript",
                            "exec": [
                              "var jsonData = pm.response.json();",
                              "if (responseCode.code === 200 && jsonData.cartId) {",
                              "    pm.environment.set(\"cartId\", jsonData.cartId);",
                              "    tests[\"Cart ID is returned\"] = isNumeric(jsonData.cartId) === true;",
                              "} else {",
                              "    tests[\"Cart ID is not returned\"] = false;",
                              "}",
                              "",
                              "pm.test('Successfull call', function(){",
                              "    pm.response.to.be.success;",
                              "});",
                              "",
                              "function isNumeric(n) {",
                              "  return !isNaN(parseFloat(n)) && isFinite(n);",
                              "}"
                            ]
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{customer-access-token}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "POST",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{}"
                        },
                        "url": {
                          "raw": "{{domain}}{{endpoint_carts}}",
                          "host": [
                            "{{domain}}{{endpoint_carts}}"
                          ]
                        },
                        "description": "Creates a customer cart"
                      },
                      "response": []
                    },
                    {
                      "name": "Add simple, qty 1",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "type": "text/javascript",
                            "exec": [
                              "pm.test('Successfull call', function(){",
                              "    pm.response.to.be.success;",
                              "});"
                            ]
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{customer-access-token}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "POST",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "[\n  {\n    \"product\": {\n\t    \"product_id\": \"395\",\n\t    \"qty\": 1\n\t  }\n  }\n]"
                        },
                        "url": {
                          "raw": "{{domain}}{{endpoint_carts_id_items}}",
                          "host": [
                            "{{domain}}{{endpoint_carts_id_items}}"
                          ]
                        },
                        "description": "ID: 559\nType: Downloadeable\nName: If You Were by Keshco\nSKU: hbm006\nURL: if-you-were-by-keshco\nCategory: Books & Music\nPrice: $2.00\nQty: 1"
                      },
                      "response": []
                    },
                    {
                      "name": "Check cart errors",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "8e283f85-23bb-447b-b1ba-904f6e460266",
                            "type": "text/javascript",
                            "exec": [
                              "var jsonData = pm.response.json();",
                              "",
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test(\"Qty is indeed 1\", function () {",
                              "    pm.expect(jsonData.items[0].qty).to.eql(1);",
                              "});",
                              "",
                              "pm.test(\"Cart has errors\", function () {",
                              "    if (pm.variables.get(\"minimum_order_active\") === '1') {",
                              "        pm.expect(jsonData.has_error).to.eql(true);",
                              "        pm.expect(jsonData.errors).to.not.be.empty;",
                              "    } else {",
                              "        pm.expect(jsonData.has_error).to.not.exist;",
                              "        pm.expect(jsonData.errors).to.not.exist;",
                              "    }",
                              "});"
                            ]
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{customer-access-token}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "GET",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{}"
                        },
                        "url": {
                          "raw": "{{domain}}{{endpoint_carts}}/{{cartId}}",
                          "host": [
                            "{{domain}}{{endpoint_carts}}"
                          ],
                          "path": [
                            "{{cartId}}"
                          ]
                        },
                        "description": "Creates a customer cart"
                      },
                      "response": []
                    }
                  ],
                  "_postman_isSubFolder": true
                }
              ],
              "_postman_isSubFolder": true
            },
            {
              "name": "Guest - Add",
              "item": [
                {
                  "name": "Nominal product",
                  "item": [
                    {
                      "name": "/carts: Guest Cart",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "type": "text/javascript",
                            "exec": [
                              "var jsonData = pm.response.json();",
                              "if (responseCode.code === 200 && jsonData.hasOwnProperty('cartId')) {",
                              "    pm.environment.set(\"cartId\", jsonData.cartId);",
                              "    tests[\"Cart ID is returned\"] = isNumeric(jsonData.cartId) === true;",
                              "} else {",
                              "    tests[\"Cart ID is not returned\"] = false;",
                              "}",
                              "",
                              "pm.test('Successfull call', function(){",
                              "    pm.response.to.be.success;",
                              "});",
                              "",
                              "function isNumeric(n) {",
                              "  return !isNaN(parseFloat(n)) && isFinite(n);",
                              "}"
                            ]
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{guest-access-token}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "POST",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{}"
                        },
                        "url": {
                          "raw": "{{domain}}{{endpoint_carts}}",
                          "host": [
                            "{{domain}}{{endpoint_carts}}"
                          ]
                        },
                        "description": "Creates a guest cart and assigns the local cartId variable from the one returned"
                      },
                      "response": []
                    },
                    {
                      "name": "Nominal",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "type": "text/javascript",
                            "exec": [
                              "pm.test('Successfull call', function(){",
                              "    pm.response.to.be.success;",
                              "});"
                            ]
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{guest-access-token}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "POST",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "[\n  {\n    \"product\": {\n\t    \"sku\": \"mem000\",\n\t    \"qty\": 1,\n\t    \"options\": {\n\t      \"6\": {\n\t        \"month\": \"01\",\n\t        \"day\": \"17\",\n\t        \"year\": \"2017\"\n\t      }\n\t    },\n\t    \"recurring_profile_start_datetime\":\"09/15/2017 09:49 PM\"\n\t  }\n  }\n]\n\n"
                        },
                        "url": {
                          "raw": "{{domain}}{{endpoint_carts_id_items}}",
                          "host": [
                            "{{domain}}{{endpoint_carts_id_items}}"
                          ]
                        },
                        "description": "Nominal and recurring profile item"
                      },
                      "response": []
                    },
                    {
                      "name": "Simple",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "type": "text/javascript",
                            "exec": [
                              "pm.test(\"Cannot add another product with nominal in cart\", function () {",
                              "    pm.response.to.have.status(400);",
                              "});"
                            ]
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{guest-access-token}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "POST",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "[\n  {\n    \"product\": {\n\t    \"product_id\": \"554\",\n\t    \"qty\": 1\n\t  }\n  }\n]"
                        },
                        "url": {
                          "raw": "{{domain}}{{endpoint_carts_id_items}}",
                          "host": [
                            "{{domain}}{{endpoint_carts_id_items}}"
                          ]
                        },
                        "description": "ID: 554\nType: Simple\nName: Swiss Movement Sports Watch\nSKU: acj005\nURL: swiss-movement-sports-watch\nCategory: Jewelry\nPrice: $500.00\nQty: 3"
                      },
                      "response": []
                    }
                  ],
                  "_postman_isSubFolder": true
                },
                {
                  "name": "/carts: Guest Cart",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "type": "text/javascript",
                        "exec": [
                          "var jsonData = pm.response.json();",
                          "if (responseCode.code === 200 && jsonData.hasOwnProperty('cartId')) {",
                          "    pm.environment.set(\"cartId\", jsonData.cartId);",
                          "    tests[\"Cart ID is returned\"] = isNumeric(jsonData.cartId) === true;",
                          "} else {",
                          "    tests[\"Cart ID is not returned\"] = false;",
                          "}",
                          "",
                          "pm.test('Successfull call', function(){",
                          "    pm.response.to.be.success;",
                          "});",
                          "",
                          "function isNumeric(n) {",
                          "  return !isNaN(parseFloat(n)) && isFinite(n);",
                          "}"
                        ]
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{guest-access-token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{}"
                    },
                    "url": {
                      "raw": "{{domain}}{{endpoint_carts}}",
                      "host": [
                        "{{domain}}{{endpoint_carts}}"
                      ]
                    },
                    "description": "Creates a guest cart and assigns the local cartId variable from the one returned"
                  },
                  "response": []
                },
                {
                  "name": "Bundle + Configurable",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "type": "text/javascript",
                        "exec": [
                          "pm.test('Successfull call', function(){",
                          "    pm.response.to.be.success;",
                          "});"
                        ]
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{guest-access-token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "[\n  {\n    \"product\": {\n      \"product_id\": \"447\",\n      \"qty\": 2,\n      \"bundle_option\": {\n        \"23\": \"88\",\n        \"24\": \"91\"\n      },\n      \"bundle_option_qty\": {\n        \"23\": \"3\",\n        \"24\": \"4\"\n      }\n    }\n  },\n  {\n    \"product\": {\n       \"product_id\": \"422\",\n    \t\"qty\": 1,\n    \t\"super_attribute\": {\n           \"92\": \"17\",\n           \"180\": \"76\"\n        }\n    }\n  }\n]"
                    },
                    "url": {
                      "raw": "{{domain}}{{endpoint_carts_id_items}}",
                      "host": [
                        "{{domain}}{{endpoint_carts_id_items}}"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Add Configurable: Skirt",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "type": "text/javascript",
                        "exec": [
                          "pm.test('Successfull call', function(){",
                          "    pm.response.to.be.success;",
                          "});"
                        ]
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{guest-access-token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "[\n  {\n\t    \"product\": {\n\t\t    \"product_id\": \"422\",\n\t\t    \"qty\": 1,\n\t\t    \"super_attribute\": {\n\t\t\t      \"92\": \"17\",\n\t\t\t      \"180\": \"76\"\n\t\t\t    }\n\t\t}\n  }\n]"
                    },
                    "url": {
                      "raw": "{{domain}}{{endpoint_carts_id_items}}",
                      "host": [
                        "{{domain}}{{endpoint_carts_id_items}}"
                      ]
                    },
                    "description": "ID: 422\nType: Configurable\nName: Essex Pencil Skirt\nSKU: wsd000c\nCategory: Dresses & Skirts\nPrice: $185.00\n\nSub-Products:\nID: 297 | 298 | 299 | 300 | 301\nName: Essex Pencil Skirt\nSKU: wsd000 | wsd001 | wsd002 | wsd003 | wsd004\nColor (ID: 92): Charcoal (ID: 17)\nSize (ID: 180): 2 (ID: 76) | 4 (ID: 75) | 6 (ID: 74) | 8 (ID: 73) | 10 (ID: 72)"
                  },
                  "response": []
                },
                {
                  "name": "Bundled",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "type": "text/javascript",
                        "exec": [
                          "pm.test('Successfull call', function(){",
                          "    pm.response.to.be.success;",
                          "});"
                        ]
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{guest-access-token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "[\n  {\n    \"product\": {\n\t    \"product_id\": \"447\",\n\t    \"qty\": 2,\n\t    \"bundle_option\": {\n\t      \"23\": \"88\",\n\t      \"24\": \"91\"\n\t    },\n\t    \"bundle_option_qty\": {\n\t      \"23\": \"3\",\n\t      \"24\": \"4\"\n\t    }\n\t}\n  }\n]"
                    },
                    "url": {
                      "raw": "{{domain}}{{endpoint_carts_id_items}}",
                      "host": [
                        "{{domain}}{{endpoint_carts_id_items}}"
                      ]
                    },
                    "description": "ID: 447\nType: Bundle\nName: Pillow and Throw Set\nSKU (dynamic): hdb010\nURL: pillow-and-throw-set\nCategory: Home & Decor -> Bed & Bath\nPrice: N/A\n\nBundle Items:\nTitle: Accent Pillow\nID: 24\nName: Titian Raw Silk Pillow | Shay Printed Pillow\nSKU: hdb005 | hdb006\nID: 381 | 382\nSelection ID: 91 | 92\nPrice: 125.00 | 210.00\n\nTitle: Decorative Throw\nID: 23\nName: Carnegie Alpaca Throw | Row Throw | Gramercy Throw\nSKU: hdb007 | hdb008 | hdb009\nID: 383 | 384 | 385\nPrice: 275.00 | 240.00 | 275.00\nSelection ID: 88 | 89 | 115"
                  },
                  "response": []
                },
                {
                  "name": "Downloadable",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "type": "text/javascript",
                        "exec": [
                          "pm.test('Successfull call', function(){",
                          "    pm.response.to.be.success;",
                          "});"
                        ]
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{guest-access-token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "[\n  {\n    \"product\": {\n\t    \"product_id\": \"563\",\n\t    \"qty\": 1,\n\t    \"links\": [\n\t      \"18\"\n\t    ]\n\t }\n  }\n]"
                    },
                    "url": {
                      "raw": "{{domain}}{{endpoint_carts_id_items}}",
                      "host": [
                        "{{domain}}{{endpoint_carts_id_items}}"
                      ]
                    },
                    "description": "ID: 563\nName: Fire [Kalima remix] by Unannounced Guest\nSKU: hbm010\nCategory: Music & Books\nURL: fire-kalima-remix-by-unannounced-guest\nPrice: 2.00\nQty: 1000"
                  },
                  "response": []
                },
                {
                  "name": "Grouped",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "type": "text/javascript",
                        "exec": [
                          "pm.test('Successfull call', function(){",
                          "    pm.response.to.be.success;",
                          "});"
                        ]
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{guest-access-token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "[\n  {\n    \"product\": {\n\t    \"product_id\": \"439\",\n\t    \"qty\": 1,\n\t    \"super_group\": {\n\t      \"541\" : 2\n\t    }\n\t  }\n  }\n]"
                    },
                    "url": {
                      "raw": "{{domain}}{{endpoint_carts_id_items}}",
                      "host": [
                        "{{domain}}{{endpoint_carts_id_items}}"
                      ]
                    },
                    "description": "ID: 439\nName: Luggage Set\nType: Grouped\nSKU: abl008\nURL: luggage-set\nCategory: Bags & Luggage\n\nSub-Product:\nID: 541 | 377 | 376\nName: Classic Hardshell Suitcase 19\" | Classic Hardshell Suitcase 29\" | Classic Hardshell Suitcase 21\"\nSKU: abl009 | abl007 | abl006\nPrice: 600.00 | 750.00 | 650.00\nQty: 7 | 13 | 15"
                  },
                  "response": []
                },
                {
                  "name": "Simple",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "type": "text/javascript",
                        "exec": [
                          "pm.test('Successfull call', function(){",
                          "    pm.response.to.be.success;",
                          "});"
                        ]
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{guest-access-token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "[\n  {\n    \"product\": {\n\t    \"product_id\": \"554\",\n\t    \"qty\": 1\n\t  }\n  }\n]"
                    },
                    "url": {
                      "raw": "{{domain}}{{endpoint_carts_id_items}}",
                      "host": [
                        "{{domain}}{{endpoint_carts_id_items}}"
                      ]
                    },
                    "description": "ID: 554\nType: Simple\nName: Swiss Movement Sports Watch\nSKU: acj005\nURL: swiss-movement-sports-watch\nCategory: Jewelry\nPrice: $500.00\nQty: 3"
                  },
                  "response": []
                },
                {
                  "name": "GiftCard Combined",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "2721dfff-e833-4863-b072-cf5ddd78ce2d",
                        "type": "text/javascript",
                        "exec": [
                          "if (pm.variables.get(\"mage_type\") === 'EE') {",
                          "    pm.test('Successfull call', function(){",
                          "        pm.response.to.be.success;",
                          "    });",
                          "} else {",
                          "    pm.test(\"Giftcards don't exist in the Community edition\", function () {",
                          "        pm.response.to.have.status(404);",
                          "    });",
                          "}"
                        ]
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{guest-access-token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "[\n  {\n    \"product\": {\n\t    \"sku\": \"gif001\",\n\t    \"qty\": 1,\n\t    \"custom_giftcard_amount\": \"75\",\n\t    \"giftcard_sender_name\": \"Some sender name\",\n\t    \"giftcard_sender_email\": \"test@shopgate.com\",\n\t    \"giftcard_recipient_name\": \"Some recipient name\",\n\t    \"giftcard_recipient_email\": \"test2@shopgate.com\",\n\t    \"giftcard_message\": \"Message to recipient\"\n\t  }\n  }\n]"
                    },
                    "url": {
                      "raw": "{{domain}}{{endpoint_carts_id_items}}",
                      "host": [
                        "{{domain}}{{endpoint_carts_id_items}}"
                      ]
                    },
                    "description": "Combined type Gift card with custom price"
                  },
                  "response": []
                },
                {
                  "name": "GiftCard Virtual CP",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "6949ae5b-fa51-4534-a9f1-9cddb7881023",
                        "type": "text/javascript",
                        "exec": [
                          "if (pm.variables.get(\"mage_type\") === 'EE') {",
                          "    pm.test('Successfull call', function(){",
                          "        pm.response.to.be.success;",
                          "    });",
                          "} else {",
                          "    pm.test(\"Giftcards don't exist in the Community edition\", function () {",
                          "        pm.response.to.have.status(404);",
                          "    });",
                          "}"
                        ]
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{guest-access-token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "[\n  {\n    \"product\": {\n\t    \"sku\": \"gif003\",\n\t    \"qty\": 1,\n\t    \"custom_giftcard_amount\": \"50\",\n\t    \"giftcard_sender_name\": \"Some sender name\",\n\t    \"giftcard_sender_email\": \"test@shopgate.com\",\n\t    \"giftcard_recipient_name\": \"Some recipient name\",\n\t    \"giftcard_recipient_email\": \"test2@shopgate.com\",\n\t    \"giftcard_message\": \"Message to recipient\"\n\t  }\n  }\n]"
                    },
                    "url": {
                      "raw": "{{domain}}{{endpoint_carts_id_items}}",
                      "host": [
                        "{{domain}}{{endpoint_carts_id_items}}"
                      ]
                    },
                    "description": "Virtual card with custom price set"
                  },
                  "response": []
                },
                {
                  "name": "GiftCard Virtual Set",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "0edd61ba-1533-4c9e-8bf7-a0ca2691d49a",
                        "type": "text/javascript",
                        "exec": [
                          "if (pm.variables.get(\"mage_type\") === 'EE') {",
                          "    pm.test('Successfull call', function(){",
                          "        pm.response.to.be.success;",
                          "    });",
                          "} else {",
                          "    pm.test(\"Giftcards don't exist in the Community edition\", function () {",
                          "        pm.response.to.have.status(404);",
                          "    });",
                          "}"
                        ]
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{guest-access-token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "[\n  {\n    \"product\": {\n\t    \"sku\": \"gif002\",\n\t    \"qty\": 1,\n\t    \"giftcard_sender_name\": \"Some sender name\",\n\t    \"giftcard_sender_email\": \"test@shopgate.com\",\n\t    \"giftcard_recipient_name\": \"Some recipient name\",\n\t    \"giftcard_recipient_email\": \"test2@shopgate.com\",\n\t    \"giftcard_message\": \"Message to recipient\"\n\t  }\n  }\n]"
                    },
                    "url": {
                      "raw": "{{domain}}{{endpoint_carts_id_items}}",
                      "host": [
                        "{{domain}}{{endpoint_carts_id_items}}"
                      ]
                    },
                    "description": "Virtual card with custom price set"
                  },
                  "response": []
                }
              ],
              "_postman_isSubFolder": true
            },
            {
              "name": "Guest - Update",
              "item": [
                {
                  "name": "Advanced",
                  "item": [
                    {
                      "name": "/carts: Guest Cart",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "type": "text/javascript",
                            "exec": [
                              "var jsonData = pm.response.json();",
                              "if (responseCode.code === 200 && jsonData.hasOwnProperty('cartId')) {",
                              "    pm.environment.set(\"cartId\", jsonData.cartId);",
                              "    tests[\"Cart ID is returned\"] = isNumeric(jsonData.cartId) === true;",
                              "} else {",
                              "    tests[\"Cart ID is not returned\"] = false;",
                              "}",
                              "",
                              "pm.test('Successfull call', function(){",
                              "    pm.response.to.be.success;",
                              "});",
                              "",
                              "function isNumeric(n) {",
                              "  return !isNaN(parseFloat(n)) && isFinite(n);",
                              "}"
                            ]
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{guest-access-token}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "POST",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{}"
                        },
                        "url": {
                          "raw": "{{domain}}{{endpoint_carts}}",
                          "host": [
                            "{{domain}}{{endpoint_carts}}"
                          ]
                        },
                        "description": "Creates a guest cart and assigns the local cartId variable from the one returned"
                      },
                      "response": []
                    },
                    {
                      "name": "Add Simple",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "type": "text/javascript",
                            "exec": [
                              "pm.test('Successfull call', function(){",
                              "    pm.response.to.be.success;",
                              "});"
                            ]
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{guest-access-token}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "POST",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "[\n  {\n    \"product\": {\n\t    \"product_id\": \"554\",\n\t    \"qty\": 1\n\t  }\n  }\n]"
                        },
                        "url": {
                          "raw": "{{domain}}{{endpoint_carts_id_items}}",
                          "host": [
                            "{{domain}}{{endpoint_carts_id_items}}"
                          ]
                        },
                        "description": "ID: 554\nType: Simple\nName: Swiss Movement Sports Watch\nSKU: acj005\nURL: swiss-movement-sports-watch\nCategory: Jewelry\nPrice: $500.00\nQty: 3"
                      },
                      "response": []
                    },
                    {
                      "name": "Cart: qty 1",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "type": "text/javascript",
                            "exec": [
                              "var jsonData = pm.response.json();",
                              "if (responseCode.code === 200 && jsonData.items.length > 0) {",
                              "    pm.environment.set(\"cart_item_id\", jsonData.items[0].item_id);",
                              "} else {",
                              "    tests[\"Not 200 code or no cart items returned\"] = false;",
                              "}",
                              "",
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test(\"Initial quantity is 1 after adding simple product\", function () {",
                              "    pm.expect(jsonData.items[0].qty).to.eql(1);",
                              "});"
                            ]
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{guest-access-token}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "GET",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{}"
                        },
                        "url": {
                          "raw": "{{domain}}{{endpoint_carts}}/{{cartId}}",
                          "host": [
                            "{{domain}}{{endpoint_carts}}"
                          ],
                          "path": [
                            "{{cartId}}"
                          ]
                        },
                        "description": "calls a customer cart as guest"
                      },
                      "response": []
                    },
                    {
                      "name": "Update simple & add confg",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "type": "text/javascript",
                            "exec": [
                              "pm.test('Successfull call', function(){",
                              "    pm.response.to.be.success;",
                              "});"
                            ]
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{guest-access-token}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "POST",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "[\n  {\n  \t\"cartItemId\": \"{{cart_item_id}}\",\n    \"product\": {\n\t    \"product_id\": \"554\",\n\t    \"qty\": 3\n\t  }\n  },\n  {\n\t    \"product\": {\n\t\t    \"product_id\": \"422\",\n\t\t    \"qty\": 1,\n\t\t    \"super_attribute\": {\n\t\t\t      \"92\": \"17\",\n\t\t\t      \"180\": \"76\"\n\t\t\t    }\n\t\t}\n  }\n]"
                        },
                        "url": {
                          "raw": "{{domain}}{{endpoint_carts_id_items}}",
                          "host": [
                            "{{domain}}{{endpoint_carts_id_items}}"
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Cart: qty updated",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "type": "text/javascript",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test(\"Qty is now updated to 3 for the previously inserted simple product & qty 1 for the configurable\", function () {",
                              "    var jsonData = pm.response.json();",
                              "    pm.expect(jsonData.items[0].qty).to.eql(3);",
                              "    pm.expect(jsonData.items[1].qty).to.eql(1);",
                              "});"
                            ]
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{guest-access-token}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "GET",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{}"
                        },
                        "url": {
                          "raw": "{{domain}}{{endpoint_carts}}/{{cartId}}",
                          "host": [
                            "{{domain}}{{endpoint_carts}}"
                          ],
                          "path": [
                            "{{cartId}}"
                          ]
                        }
                      },
                      "response": []
                    }
                  ],
                  "_postman_isSubFolder": true
                },
                {
                  "name": "/carts: Guest Cart",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "type": "text/javascript",
                        "exec": [
                          "var jsonData = pm.response.json();",
                          "if (responseCode.code === 200 && jsonData.hasOwnProperty('cartId')) {",
                          "    pm.environment.set(\"cartId\", jsonData.cartId);",
                          "    tests[\"Cart ID is returned\"] = isNumeric(jsonData.cartId) === true;",
                          "} else {",
                          "    tests[\"Cart ID is not returned\"] = false;",
                          "}",
                          "",
                          "pm.test('Successfull call', function(){",
                          "    pm.response.to.be.success;",
                          "});",
                          "",
                          "function isNumeric(n) {",
                          "  return !isNaN(parseFloat(n)) && isFinite(n);",
                          "}"
                        ]
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{guest-access-token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{}"
                    },
                    "url": {
                      "raw": "{{domain}}{{endpoint_carts}}",
                      "host": [
                        "{{domain}}{{endpoint_carts}}"
                      ]
                    },
                    "description": "Creates a guest cart and assigns the local cartId variable from the one returned"
                  },
                  "response": []
                },
                {
                  "name": "Add Simple",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "type": "text/javascript",
                        "exec": [
                          "pm.test('Successfull call', function(){",
                          "    pm.response.to.be.success;",
                          "});"
                        ]
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{guest-access-token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "[\n  {\n    \"product\": {\n\t    \"product_id\": \"554\",\n\t    \"qty\": 1\n\t  }\n  }\n]"
                    },
                    "url": {
                      "raw": "{{domain}}{{endpoint_carts_id_items}}",
                      "host": [
                        "{{domain}}{{endpoint_carts_id_items}}"
                      ]
                    },
                    "description": "ID: 554\nType: Simple\nName: Swiss Movement Sports Watch\nSKU: acj005\nURL: swiss-movement-sports-watch\nCategory: Jewelry\nPrice: $500.00\nQty: 3"
                  },
                  "response": []
                },
                {
                  "name": "Cart: qty 1",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "type": "text/javascript",
                        "exec": [
                          "var jsonData = pm.response.json();",
                          "if (responseCode.code === 200 && jsonData.items.length > 0) {",
                          "    pm.environment.set(\"cart_item_id\", jsonData.items[0].item_id);",
                          "} else {",
                          "    tests[\"Not 200 code or no cart items returned\"] = false;",
                          "}",
                          "",
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"Initial quantity is 1 after adding simple product\", function () {",
                          "    pm.expect(jsonData.items[0].qty).to.eql(1);",
                          "});"
                        ]
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{guest-access-token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "GET",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{}"
                    },
                    "url": {
                      "raw": "{{domain}}{{endpoint_carts}}/{{cartId}}",
                      "host": [
                        "{{domain}}{{endpoint_carts}}"
                      ],
                      "path": [
                        "{{cartId}}"
                      ]
                    },
                    "description": "calls a customer cart as guest"
                  },
                  "response": []
                },
                {
                  "name": "Update simple",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "type": "text/javascript",
                        "exec": [
                          "pm.test('Successfull call', function(){",
                          "    pm.response.to.be.success;",
                          "});"
                        ]
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{guest-access-token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "[\n  {\n  \t\"cartItemId\": \"{{cart_item_id}}\",\n    \"product\": {\n\t    \"product_id\": \"554\",\n\t    \"qty\": 3\n\t  }\n  }\n]"
                    },
                    "url": {
                      "raw": "{{domain}}{{endpoint_carts_id_items}}",
                      "host": [
                        "{{domain}}{{endpoint_carts_id_items}}"
                      ]
                    },
                    "description": "ID: 554\nType: Simple\nName: Swiss Movement Sports Watch\nSKU: acj005\nURL: swiss-movement-sports-watch\nCategory: Jewelry\nPrice: $500.00\nQty: 3"
                  },
                  "response": []
                },
                {
                  "name": "Cart: qty updated",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "type": "text/javascript",
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"Qty is now updated to 3 for the previously inserted simple product\", function () {",
                          "    var jsonData = pm.response.json();",
                          "    pm.expect(jsonData.items[0].qty).to.eql(3);",
                          "});"
                        ]
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{guest-access-token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "GET",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{}"
                    },
                    "url": {
                      "raw": "{{domain}}{{endpoint_carts}}/{{cartId}}",
                      "host": [
                        "{{domain}}{{endpoint_carts}}"
                      ],
                      "path": [
                        "{{cartId}}"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Simple",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "type": "text/javascript",
                        "exec": [
                          "pm.test('Successfull call', function(){",
                          "    pm.response.to.be.success;",
                          "});"
                        ]
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{guest-access-token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "[\n  {\n    \"product\": {\n\t    \"product_id\": \"554\",\n\t    \"qty\": 1\n\t  }\n  }\n]"
                    },
                    "url": {
                      "raw": "{{domain}}{{endpoint_carts_id_items}}",
                      "host": [
                        "{{domain}}{{endpoint_carts_id_items}}"
                      ]
                    },
                    "description": "ID: 554\nType: Simple\nName: Swiss Movement Sports Watch\nSKU: acj005\nURL: swiss-movement-sports-watch\nCategory: Jewelry\nPrice: $500.00\nQty: 3"
                  },
                  "response": []
                }
              ],
              "_postman_isSubFolder": true
            },
            {
              "name": "Guest - Delete all",
              "item": [
                {
                  "name": "Delete All",
                  "item": [
                    {
                      "name": "/carts: Guest Cart",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "type": "text/javascript",
                            "exec": [
                              "var jsonData = pm.response.json();",
                              "if (responseCode.code === 200 && jsonData.hasOwnProperty('cartId')) {",
                              "    pm.environment.set(\"cartId\", jsonData.cartId);",
                              "    tests[\"Cart ID is returned\"] = isNumeric(jsonData.cartId) === true;",
                              "} else {",
                              "    tests[\"Cart ID is not returned\"] = false;",
                              "}",
                              "",
                              "pm.test('Successfull call', function(){",
                              "    pm.response.to.be.success;",
                              "});",
                              "",
                              "function isNumeric(n) {",
                              "  return !isNaN(parseFloat(n)) && isFinite(n);",
                              "}"
                            ]
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{guest-access-token}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "POST",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{}"
                        },
                        "url": {
                          "raw": "{{domain}}{{endpoint_carts}}",
                          "host": [
                            "{{domain}}{{endpoint_carts}}"
                          ]
                        },
                        "description": "Creates a guest cart and assigns the local cartId variable from the one returned"
                      },
                      "response": []
                    },
                    {
                      "name": "Add Simple",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "type": "text/javascript",
                            "exec": [
                              "pm.test('Successfull call', function(){",
                              "    pm.response.to.be.success;",
                              "});"
                            ]
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{guest-access-token}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "POST",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "[\n  {\n    \"product\": {\n\t    \"product_id\": \"554\",\n\t    \"qty\": 1\n\t  }\n  }\n]"
                        },
                        "url": {
                          "raw": "{{domain}}{{endpoint_carts_id_items}}",
                          "host": [
                            "{{domain}}{{endpoint_carts_id_items}}"
                          ]
                        },
                        "description": "ID: 554\nType: Simple\nName: Swiss Movement Sports Watch\nSKU: acj005\nURL: swiss-movement-sports-watch\nCategory: Jewelry\nPrice: $500.00\nQty: 3"
                      },
                      "response": []
                    },
                    {
                      "name": "All item removal",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "type": "text/javascript",
                            "exec": [
                              "pm.test('Successfull call', function(){",
                              "    pm.response.to.be.success;",
                              "});"
                            ]
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{guest-access-token}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "DELETE",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": ""
                        },
                        "url": {
                          "raw": "{{domain}}{{endpoint_carts_id_items}}",
                          "host": [
                            "{{domain}}{{endpoint_carts_id_items}}"
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Check cart for no items",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "type": "text/javascript",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test(\"No items in cart\", function () {",
                              "    var jsonData = pm.response.json();",
                              "    pm.expect(jsonData.items).to.be.empty;",
                              "});"
                            ]
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{guest-access-token}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "GET",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{}"
                        },
                        "url": {
                          "raw": "{{domain}}{{endpoint_carts}}/{{cartId}}",
                          "host": [
                            "{{domain}}{{endpoint_carts}}"
                          ],
                          "path": [
                            "{{cartId}}"
                          ]
                        },
                        "description": "Creates a customer cart"
                      },
                      "response": []
                    },
                    {
                      "name": "/carts: Guest Cart",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "type": "text/javascript",
                            "exec": [
                              "var jsonData = pm.response.json();",
                              "if (responseCode.code === 200 && jsonData.hasOwnProperty('cartId')) {",
                              "    pm.environment.set(\"cartId\", jsonData.cartId);",
                              "    tests[\"Cart ID is returned\"] = isNumeric(jsonData.cartId) === true;",
                              "} else {",
                              "    tests[\"Cart ID is not returned\"] = false;",
                              "}",
                              "",
                              "pm.test('Successfull call', function(){",
                              "    pm.response.to.be.success;",
                              "});",
                              "",
                              "function isNumeric(n) {",
                              "  return !isNaN(parseFloat(n)) && isFinite(n);",
                              "}"
                            ]
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{guest-access-token}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "POST",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{}"
                        },
                        "url": {
                          "raw": "{{domain}}{{endpoint_carts}}",
                          "host": [
                            "{{domain}}{{endpoint_carts}}"
                          ]
                        },
                        "description": "Creates a guest cart and assigns the local cartId variable from the one returned"
                      },
                      "response": []
                    }
                  ],
                  "_postman_isSubFolder": true
                },
                {
                  "name": "Delete by IDs",
                  "item": [
                    {
                      "name": "Add Simple",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "type": "text/javascript",
                            "exec": [
                              "pm.test('Successfull call', function(){",
                              "    pm.response.to.be.success;",
                              "});"
                            ]
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{guest-access-token}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "POST",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "[\n  {\n    \"product\": {\n\t    \"product_id\": \"554\",\n\t    \"qty\": 1\n\t  }\n  }\n]"
                        },
                        "url": {
                          "raw": "{{domain}}{{endpoint_carts_id_items}}",
                          "host": [
                            "{{domain}}{{endpoint_carts_id_items}}"
                          ]
                        },
                        "description": "ID: 554\nType: Simple\nName: Swiss Movement Sports Watch\nSKU: acj005\nURL: swiss-movement-sports-watch\nCategory: Jewelry\nPrice: $500.00\nQty: 3"
                      },
                      "response": []
                    },
                    {
                      "name": "Get all cart item ids",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "type": "text/javascript",
                            "exec": [
                              "var jsonData = pm.response.json();",
                              "if (responseCode.code === 200 && jsonData.items.length > 0) {",
                              "    var items = '';",
                              "    jsonData.items.forEach(function(item) {",
                              "        items += item.item_id + ',';",
                              "    });",
                              "    pm.environment.set(\"cart_items_to_remove\", items);",
                              "} else {",
                              "    tests[\"Not 200 code or no cart items returned\"] = false;",
                              "}",
                              "pm.test('Successfull call', function(){",
                              "    pm.response.to.be.success;",
                              "});"
                            ]
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{guest-access-token}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "GET",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{}"
                        },
                        "url": {
                          "raw": "{{domain}}{{endpoint_carts}}/{{cartId}}",
                          "host": [
                            "{{domain}}{{endpoint_carts}}"
                          ],
                          "path": [
                            "{{cartId}}"
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "{cartId}/items?cartItemIds",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "type": "text/javascript",
                            "exec": [
                              "pm.test('Successfull call', function(){",
                              "    pm.response.to.be.success;",
                              "});"
                            ]
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{guest-access-token}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "DELETE",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": ""
                        },
                        "url": {
                          "raw": "{{domain}}{{endpoint_carts_id_items}}?cartItemIds={{cart_items_to_remove}}",
                          "host": [
                            "{{domain}}{{endpoint_carts_id_items}}"
                          ],
                          "query": [
                            {
                              "key": "cartItemIds",
                              "value": "{{cart_items_to_remove}}"
                            }
                          ]
                        },
                        "description": "Delete cart items by ids provided"
                      },
                      "response": []
                    },
                    {
                      "name": "Check all items are deleted",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "type": "text/javascript",
                            "exec": [
                              "pm.test('Successfull call', function(){",
                              "    pm.response.to.be.success;",
                              "});",
                              "",
                              "pm.test(\"No items in cart\", function () {",
                              "    var jsonData = pm.response.json();",
                              "    pm.expect(jsonData.items).to.be.empty;",
                              "});"
                            ]
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{guest-access-token}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "GET",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{}"
                        },
                        "url": {
                          "raw": "{{domain}}{{endpoint_carts}}/{{cartId}}",
                          "host": [
                            "{{domain}}{{endpoint_carts}}"
                          ],
                          "path": [
                            "{{cartId}}"
                          ]
                        }
                      },
                      "response": []
                    }
                  ],
                  "description": "Retrieves the items in the cart and deletes them using their id's",
                  "_postman_isSubFolder": true
                }
              ],
              "_postman_isSubFolder": true
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "name": "Coupon",
          "item": [
            {
              "name": "Customer",
              "item": [
                {
                  "name": "Add",
                  "item": [
                    {
                      "name": "Auto-Gen",
                      "item": [
                        {
                          "name": "/carts: customer",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "type": "text/javascript",
                                "exec": [
                                  "var jsonData = pm.response.json();",
                                  "if (responseCode.code === 200 && jsonData.hasOwnProperty('cartId')) {",
                                  "    pm.environment.set(\"cartId\", jsonData.cartId);",
                                  "    tests[\"Cart ID is returned\"] = isNumeric(jsonData.cartId) === true;",
                                  "} else {",
                                  "    tests[\"Cart ID is not returned\"] = false;",
                                  "}",
                                  "",
                                  "pm.test('Successfull call', function(){",
                                  "    pm.response.to.be.success;",
                                  "});",
                                  "",
                                  "function isNumeric(n) {",
                                  "  return !isNaN(parseFloat(n)) && isFinite(n);",
                                  "}"
                                ]
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{customer-access-token}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "POST",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "{}"
                            },
                            "url": {
                              "raw": "{{domain}}{{endpoint_carts}}",
                              "host": [
                                "{{domain}}{{endpoint_carts}}"
                              ]
                            },
                            "description": "Creates a customer cart"
                          },
                          "response": []
                        },
                        {
                          "name": "Add Simple: 500",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "type": "text/javascript",
                                "exec": [
                                  "pm.test('Successfull call', function(){",
                                  "    pm.response.to.be.success;",
                                  "});"
                                ]
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{customer-access-token}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "POST",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "[\n  {\n    \"product\": {\n\t    \"product_id\": \"554\",\n\t    \"qty\": 1\n\t  }\n  }\n]"
                            },
                            "url": {
                              "raw": "{{domain}}{{endpoint_carts_id_items}}",
                              "host": [
                                "{{domain}}{{endpoint_carts_id_items}}"
                              ]
                            },
                            "description": "ID: 554\nType: Simple\nName: Swiss Movement Sports Watch\nSKU: acj005\nURL: swiss-movement-sports-watch\nCategory: Jewelry\nPrice: $500.00\nQty: 3"
                          },
                          "response": []
                        },
                        {
                          "name": "Add 10% off coupon",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "type": "text/javascript",
                                "exec": [
                                  "pm.test('Successfull call', function(){",
                                  "    pm.response.to.be.success;",
                                  "});"
                                ]
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{customer-access-token}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "POST",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "[\n  {\n    \t\"coupon\": {\n\t\t    \"couponCode\":\"3I5REXK80NUN\"\n\t\t}\n  }\n]"
                            },
                            "url": {
                              "raw": "{{domain}}{{endpoint_carts_id_items}}",
                              "host": [
                                "{{domain}}{{endpoint_carts_id_items}}"
                              ]
                            },
                            "description": "Autogenerated coupon code.\nCondition for coupon is:\nGroup: Not-Logged-In, General, VIP, Wholesale; \nIf item in cart has \"Price in cart\" = 500"
                          },
                          "response": []
                        },
                        {
                          "name": "Check coupon exists",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "type": "text/javascript",
                                "exec": [
                                  "pm.test(\"Status code is 200\", function () {",
                                  "    pm.response.to.have.status(200);",
                                  "});",
                                  "",
                                  "pm.test(\"3I5REXK80NUN code exists\", function () {",
                                  "    var jsonData = pm.response.json();",
                                  "    pm.expect(jsonData.coupon_code).to.eql(\"3I5REXK80NUN\");",
                                  "});"
                                ]
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{customer-access-token}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "GET",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "{}"
                            },
                            "url": {
                              "raw": "{{domain}}{{endpoint_carts}}/{{cartId}}",
                              "host": [
                                "{{domain}}{{endpoint_carts}}"
                              ],
                              "path": [
                                "{{cartId}}"
                              ]
                            }
                          },
                          "response": []
                        }
                      ],
                      "description": "Tests Mage auto-generated coupon codes",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "id": "e405dbd0-8063-4983-a88c-42594f061c2f",
                            "type": "text/javascript",
                            "exec": [
                              ""
                            ]
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "id": "44e20b0b-25c5-434b-99e6-74fb0f3bfc94",
                            "type": "text/javascript",
                            "exec": [
                              ""
                            ]
                          }
                        }
                      ],
                      "_postman_isSubFolder": true
                    },
                    {
                      "name": "Mobile App Coupon",
                      "item": [
                        {
                          "name": "/carts: customer",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "type": "text/javascript",
                                "exec": [
                                  "var jsonData = pm.response.json();",
                                  "if (responseCode.code === 200 && jsonData.hasOwnProperty('cartId')) {",
                                  "    pm.environment.set(\"cartId\", jsonData.cartId);",
                                  "    tests[\"Cart ID is returned\"] = isNumeric(jsonData.cartId) === true;",
                                  "} else {",
                                  "    tests[\"Cart ID is not returned\"] = false;",
                                  "}",
                                  "",
                                  "pm.test('Successfull call', function(){",
                                  "    pm.response.to.be.success;",
                                  "});",
                                  "",
                                  "function isNumeric(n) {",
                                  "  return !isNaN(parseFloat(n)) && isFinite(n);",
                                  "}"
                                ]
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{customer-access-token}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "POST",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "{}"
                            },
                            "url": {
                              "raw": "{{domain}}{{endpoint_carts}}",
                              "host": [
                                "{{domain}}{{endpoint_carts}}"
                              ]
                            },
                            "description": "Creates a customer cart"
                          },
                          "response": []
                        },
                        {
                          "name": "Add Configurable: Boots",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "type": "text/javascript",
                                "exec": [
                                  "pm.test('Successfull call', function(){",
                                  "    pm.response.to.be.success;",
                                  "});"
                                ]
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{customer-access-token}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "POST",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "[\n  {\n    \t\"product\": {\n\t\t    \"product_id\": \"431\",\n\t\t    \"qty\": 1,\n\t\t    \"super_attribute\": {\n\t\t\t      \"92\": \"20\",\n\t\t\t      \"186\": \"102\"\n\t\t\t}\n\t\t}\n  }\n]"
                            },
                            "url": {
                              "raw": "{{domain}}{{endpoint_carts_id_items}}",
                              "host": [
                                "{{domain}}{{endpoint_carts_id_items}}"
                              ]
                            },
                            "description": "ID: 431\nType: Configurable\nName: Ann Ankle Boot\nSKU: aws005c\nURL: borgha-ankle-boot\nPrice: $470.00\nCategory: Shoes\n\n\nSub-Products:\nID: 345 | 346 | 347 | 348 | 349\nName: Ann Ankle Boot\nSKU: aws005 | aws006 | aws007 | aws008 | aws009\nColor (ID: 92): Black (ID: 20)\nShoe size (ID: 186): 6 (ID: 102) | 7 (ID: 101) | 8 (ID: 100) | 9 (ID: 99) | 10 (ID: 98)"
                          },
                          "response": []
                        },
                        {
                          "name": "Add app-only coupon",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "type": "text/javascript",
                                "exec": [
                                  "pm.test('Successfull call', function(){",
                                  "    pm.response.to.be.success;",
                                  "});"
                                ]
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{customer-access-token}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "POST",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "[\n  {\n    \t\"coupon\": {\n\t\t    \"couponCode\":\"APP10\"\n\t\t}\n  }\n]"
                            },
                            "url": {
                              "raw": "{{domain}}{{endpoint_carts_id_items}}",
                              "host": [
                                "{{domain}}{{endpoint_carts_id_items}}"
                              ]
                            },
                            "description": "Conditions: Client must use shopgate app"
                          },
                          "response": []
                        },
                        {
                          "name": "Check coupon exists",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "id": "d1a8c36e-413f-4231-b9a1-a9ef388c0879",
                                "type": "text/javascript",
                                "exec": [
                                  "pm.test(\"Status code is 200\", function () {",
                                  "    pm.response.to.have.status(200);",
                                  "});",
                                  "",
                                  "var jsonData = pm.response.json();",
                                  "pm.test(\"APP10 code exists\", function () {",
                                  "    pm.expect(jsonData.coupon_code).to.eql(\"APP10\");",
                                  "});",
                                  "",
                                  "pm.test(\"Check that the quote was not collected. Else it would be a non-string\", function () {",
                                  "    pm.expect(jsonData.items_qty).to.eql(\"1.0000\");",
                                  "});"
                                ]
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{customer-access-token}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "GET",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "{}"
                            },
                            "url": {
                              "raw": "{{domain}}{{endpoint_carts}}/{{cartId}}",
                              "host": [
                                "{{domain}}{{endpoint_carts}}"
                              ],
                              "path": [
                                "{{cartId}}"
                              ]
                            }
                          },
                          "response": []
                        }
                      ],
                      "description": "Tests shopgate coupons with shopgate mobile app type condition only",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "id": "ab0a7a2c-0eee-46ae-822a-1c50012f1e12",
                            "type": "text/javascript",
                            "exec": [
                              ""
                            ]
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "id": "85d5d4b9-13e8-4b68-8914-dad09b901a5c",
                            "type": "text/javascript",
                            "exec": [
                              ""
                            ]
                          }
                        }
                      ],
                      "_postman_isSubFolder": true
                    },
                    {
                      "name": "/carts: customer",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "type": "text/javascript",
                            "exec": [
                              "var jsonData = pm.response.json();",
                              "if (responseCode.code === 200 && jsonData.hasOwnProperty('cartId')) {",
                              "    pm.environment.set(\"cartId\", jsonData.cartId);",
                              "    tests[\"Cart ID is returned\"] = isNumeric(jsonData.cartId) === true;",
                              "} else {",
                              "    tests[\"Cart ID is not returned\"] = false;",
                              "}",
                              "",
                              "pm.test('Successfull call', function(){",
                              "    pm.response.to.be.success;",
                              "});",
                              "",
                              "function isNumeric(n) {",
                              "  return !isNaN(parseFloat(n)) && isFinite(n);",
                              "}"
                            ]
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{customer-access-token}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "POST",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{}"
                        },
                        "url": {
                          "raw": "{{domain}}{{endpoint_carts}}",
                          "host": [
                            "{{domain}}{{endpoint_carts}}"
                          ]
                        },
                        "description": "Creates a customer cart"
                      },
                      "response": []
                    },
                    {
                      "name": "Add Configurable: Boots",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "type": "text/javascript",
                            "exec": [
                              "pm.test('Successfull call', function(){",
                              "    pm.response.to.be.success;",
                              "});"
                            ]
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{customer-access-token}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "POST",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "[\n  {\n    \t\"product\": {\n\t\t    \"product_id\": \"431\",\n\t\t    \"qty\": 1,\n\t\t    \"super_attribute\": {\n\t\t\t      \"92\": \"20\",\n\t\t\t      \"186\": \"102\"\n\t\t\t}\n\t\t}\n  }\n]"
                        },
                        "url": {
                          "raw": "{{domain}}{{endpoint_carts_id_items}}",
                          "host": [
                            "{{domain}}{{endpoint_carts_id_items}}"
                          ]
                        },
                        "description": "ID: 431\nType: Configurable\nName: Ann Ankle Boot\nSKU: aws005c\nURL: borgha-ankle-boot\nPrice: $470.00\nCategory: Shoes\n\n\nSub-Products:\nID: 345 | 346 | 347 | 348 | 349\nName: Ann Ankle Boot\nSKU: aws005 | aws006 | aws007 | aws008 | aws009\nColor (ID: 92): Black (ID: 20)\nShoe size (ID: 186): 6 (ID: 102) | 7 (ID: 101) | 8 (ID: 100) | 9 (ID: 99) | 10 (ID: 98)"
                      },
                      "response": []
                    },
                    {
                      "name": "Check no discount",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "type": "text/javascript",
                            "exec": [
                              "var jsonData = pm.response.json();",
                              "if (responseCode.code === 200 && jsonData.items.length > 0) {",
                              "    pm.environment.set(\"cart_item_id\", jsonData.items[0].item_id);",
                              "} else {",
                              "    tests[\"Not 200 code or no cart items returned\"] = false;",
                              "}",
                              "",
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test(\"Coupon code not set\", function () {",
                              "    var jsonData = pm.response.json();",
                              "    pm.expect(jsonData.coupon_code).to.eql(null);",
                              "});"
                            ]
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{customer-access-token}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "GET",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{}"
                        },
                        "url": {
                          "raw": "{{domain}}{{endpoint_carts}}/{{cartId}}",
                          "host": [
                            "{{domain}}{{endpoint_carts}}"
                          ],
                          "path": [
                            "{{cartId}}"
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Add 10 flat off coupon",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "type": "text/javascript",
                            "exec": [
                              "pm.test('Successfull call', function(){",
                              "    pm.response.to.be.success;",
                              "});"
                            ]
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{customer-access-token}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "POST",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "[\n  {\n    \t\"coupon\": {\n\t\t    \"couponCode\":\"Register10\"\n\t\t}\n  }\n]"
                        },
                        "url": {
                          "raw": "{{domain}}{{endpoint_carts_id_items}}",
                          "host": [
                            "{{domain}}{{endpoint_carts_id_items}}"
                          ]
                        },
                        "description": "Condition for coupon is Group: General, subtotal: 200+"
                      },
                      "response": []
                    },
                    {
                      "name": "Check Register10 exists",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "type": "text/javascript",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test(\"Register10 code exists\", function () {",
                              "    var jsonData = pm.response.json();",
                              "    pm.expect(jsonData.coupon_code).to.eql(\"Register10\");",
                              "});"
                            ]
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{customer-access-token}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "GET",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{}"
                        },
                        "url": {
                          "raw": "{{domain}}{{endpoint_carts}}/{{cartId}}",
                          "host": [
                            "{{domain}}{{endpoint_carts}}"
                          ],
                          "path": [
                            "{{cartId}}"
                          ]
                        }
                      },
                      "response": []
                    }
                  ],
                  "_postman_isSubFolder": true
                },
                {
                  "name": "Update",
                  "item": [
                    {
                      "name": "Regular coupons",
                      "item": [
                        {
                          "name": "/carts: customer",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "type": "text/javascript",
                                "exec": [
                                  "var jsonData = pm.response.json();",
                                  "if (responseCode.code === 200 && jsonData.hasOwnProperty('cartId')) {",
                                  "    pm.environment.set(\"cartId\", jsonData.cartId);",
                                  "    tests[\"Cart ID is returned\"] = isNumeric(jsonData.cartId) === true;",
                                  "} else {",
                                  "    tests[\"Cart ID is not returned\"] = false;",
                                  "}",
                                  "",
                                  "pm.test('Successfull call', function(){",
                                  "    pm.response.to.be.success;",
                                  "});",
                                  "",
                                  "function isNumeric(n) {",
                                  "  return !isNaN(parseFloat(n)) && isFinite(n);",
                                  "}"
                                ]
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{customer-access-token}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "POST",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "{}"
                            },
                            "url": {
                              "raw": "{{domain}}{{endpoint_carts}}",
                              "host": [
                                "{{domain}}{{endpoint_carts}}"
                              ]
                            },
                            "description": "Creates a customer cart"
                          },
                          "response": []
                        },
                        {
                          "name": "Add Configurable: Boots",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "type": "text/javascript",
                                "exec": [
                                  "pm.test('Successfull call', function(){",
                                  "    pm.response.to.be.success;",
                                  "});"
                                ]
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{customer-access-token}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "POST",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "[\n  {\n    \t\"product\": {\n\t\t    \"product_id\": \"431\",\n\t\t    \"qty\": 1,\n\t\t    \"super_attribute\": {\n\t\t\t      \"92\": \"20\",\n\t\t\t      \"186\": \"102\"\n\t\t\t}\n\t\t}\n  }\n]"
                            },
                            "url": {
                              "raw": "{{domain}}{{endpoint_carts_id_items}}",
                              "host": [
                                "{{domain}}{{endpoint_carts_id_items}}"
                              ]
                            },
                            "description": "ID: 431\nType: Configurable\nName: Ann Ankle Boot\nSKU: aws005c\nURL: borgha-ankle-boot\nPrice: $470.00\nCategory: Shoes\n\n\nSub-Products:\nID: 345 | 346 | 347 | 348 | 349\nName: Ann Ankle Boot\nSKU: aws005 | aws006 | aws007 | aws008 | aws009\nColor (ID: 92): Black (ID: 20)\nShoe size (ID: 186): 6 (ID: 102) | 7 (ID: 101) | 8 (ID: 100) | 9 (ID: 99) | 10 (ID: 98)"
                          },
                          "response": []
                        },
                        {
                          "name": "Check no discount",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "type": "text/javascript",
                                "exec": [
                                  "pm.test(\"Status code is 200\", function () {",
                                  "    pm.response.to.have.status(200);",
                                  "});",
                                  "",
                                  "pm.test(\"Coupon code not set\", function () {",
                                  "    var jsonData = pm.response.json();",
                                  "    pm.expect(jsonData.coupon_code).to.eql(null);",
                                  "});"
                                ]
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{customer-access-token}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "GET",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "{}"
                            },
                            "url": {
                              "raw": "{{domain}}{{endpoint_carts}}/{{cartId}}",
                              "host": [
                                "{{domain}}{{endpoint_carts}}"
                              ],
                              "path": [
                                "{{cartId}}"
                              ]
                            }
                          },
                          "response": []
                        },
                        {
                          "name": "Add 10 flat off coupon",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "type": "text/javascript",
                                "exec": [
                                  "pm.test('Successfull call', function(){",
                                  "    pm.response.to.be.success;",
                                  "});"
                                ]
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{customer-access-token}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "POST",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "[\n  {\n    \t\"coupon\": {\n\t\t    \"couponCode\":\"Register10\"\n\t\t}\n  }\n]"
                            },
                            "url": {
                              "raw": "{{domain}}{{endpoint_carts_id_items}}",
                              "host": [
                                "{{domain}}{{endpoint_carts_id_items}}"
                              ]
                            },
                            "description": "Condition for coupon is Group: General, subtotal: 200+"
                          },
                          "response": []
                        },
                        {
                          "name": "Check Register10 exists",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "type": "text/javascript",
                                "exec": [
                                  "pm.test(\"Status code is 200\", function () {",
                                  "    pm.response.to.have.status(200);",
                                  "});",
                                  "",
                                  "pm.test(\"Register10 code exists\", function () {",
                                  "    var jsonData = pm.response.json();",
                                  "    pm.expect(jsonData.coupon_code).to.eql(\"Register10\");",
                                  "});"
                                ]
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{customer-access-token}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "GET",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "{}"
                            },
                            "url": {
                              "raw": "{{domain}}{{endpoint_carts}}/{{cartId}}",
                              "host": [
                                "{{domain}}{{endpoint_carts}}"
                              ],
                              "path": [
                                "{{cartId}}"
                              ]
                            }
                          },
                          "response": []
                        },
                        {
                          "name": "Add Configurable: Skirt",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "type": "text/javascript",
                                "exec": [
                                  "pm.test('Successfull call', function(){",
                                  "    pm.response.to.be.success;",
                                  "});"
                                ]
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{customer-access-token}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "POST",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "[\n  {\n\t    \"product\": {\n\t\t    \"product_id\": \"422\",\n\t\t    \"qty\": 1,\n\t\t    \"super_attribute\": {\n\t\t\t      \"92\": \"17\",\n\t\t\t      \"180\": \"76\"\n\t\t\t    }\n\t\t}\n  }\n]"
                            },
                            "url": {
                              "raw": "{{domain}}{{endpoint_carts_id_items}}",
                              "host": [
                                "{{domain}}{{endpoint_carts_id_items}}"
                              ]
                            },
                            "description": "ID: 422\nType: Configurable\nName: Essex Pencil Skirt\nSKU: wsd000c\nCategory: Dresses & Skirts\nPrice: $185.00\n\nSub-Products:\nID: 297 | 298 | 299 | 300 | 301\nName: Essex Pencil Skirt\nSKU: wsd000 | wsd001 | wsd002 | wsd003 | wsd004\nColor (ID: 92): Charcoal (ID: 17)\nSize (ID: 180): 2 (ID: 76) | 4 (ID: 75) | 6 (ID: 74) | 8 (ID: 73) | 10 (ID: 72)"
                          },
                          "response": []
                        },
                        {
                          "name": "Add 25% off coupon",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "type": "text/javascript",
                                "exec": [
                                  "pm.test('Successfull call', function(){",
                                  "    pm.response.to.be.success;",
                                  "});"
                                ]
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{customer-access-token}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "POST",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "[\n  {\n    \t\"coupon\": {\n\t\t    \"couponCode\":\"25OFF\"\n\t\t}\n  }\n]"
                            },
                            "url": {
                              "raw": "{{domain}}{{endpoint_carts_id_items}}",
                              "host": [
                                "{{domain}}{{endpoint_carts_id_items}}"
                              ]
                            },
                            "description": "Conditions: for customer group General and Category: Apparel"
                          },
                          "response": []
                        },
                        {
                          "name": "Check 25OFF exists",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "type": "text/javascript",
                                "exec": [
                                  "pm.test(\"Status code is 200\", function () {",
                                  "    pm.response.to.have.status(200);",
                                  "});",
                                  "",
                                  "pm.test(\"25 off code exists\", function () {",
                                  "    var jsonData = pm.response.json();",
                                  "    pm.expect(jsonData.coupon_code).to.eql(\"25OFF\");",
                                  "});"
                                ]
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{customer-access-token}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "GET",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "{}"
                            },
                            "url": {
                              "raw": "{{domain}}{{endpoint_carts}}/{{cartId}}",
                              "host": [
                                "{{domain}}{{endpoint_carts}}"
                              ],
                              "path": [
                                "{{cartId}}"
                              ]
                            }
                          },
                          "response": []
                        },
                        {
                          "name": "Add 10 flat via Update",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "type": "text/javascript",
                                "exec": [
                                  "pm.test('Successfull call', function(){",
                                  "    pm.response.to.be.success;",
                                  "});"
                                ]
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{customer-access-token}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "POST",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "[\n  {\t\t\n  \t\t\"cartItemId\": \"1234\",\n    \t\"coupon\": {\n\t\t    \"couponCode\":\"Register10\"\n\t\t}\n  }\n]"
                            },
                            "url": {
                              "raw": "{{domain}}{{endpoint_carts_id_items}}",
                              "host": [
                                "{{domain}}{{endpoint_carts_id_items}}"
                              ]
                            },
                            "description": "Condition for coupon is Group: General, subtotal: 200+"
                          },
                          "response": []
                        },
                        {
                          "name": "Check Register10 exists",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "type": "text/javascript",
                                "exec": [
                                  "pm.test(\"Status code is 200\", function () {",
                                  "    pm.response.to.have.status(200);",
                                  "});",
                                  "",
                                  "pm.test(\"Register10 code exists\", function () {",
                                  "    var jsonData = pm.response.json();",
                                  "    pm.expect(jsonData.coupon_code).to.eql(\"Register10\");",
                                  "});"
                                ]
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{customer-access-token}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "GET",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "{}"
                            },
                            "url": {
                              "raw": "{{domain}}{{endpoint_carts}}/{{cartId}}",
                              "host": [
                                "{{domain}}{{endpoint_carts}}"
                              ],
                              "path": [
                                "{{cartId}}"
                              ]
                            }
                          },
                          "response": []
                        },
                        {
                          "name": "Add empty coupon",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "type": "text/javascript",
                                "exec": [
                                  "pm.test('Successfull call', function(){",
                                  "    pm.response.to.be.success;",
                                  "});"
                                ]
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{customer-access-token}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "POST",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "[\n  {\n    \t\"coupon\": {\n\t\t    \"couponCode\":\"\"\n\t\t}\n  }\n]"
                            },
                            "url": {
                              "raw": "{{domain}}{{endpoint_carts_id_items}}",
                              "host": [
                                "{{domain}}{{endpoint_carts_id_items}}"
                              ]
                            },
                            "description": "Condition for coupon is Group: General, subtotal: 200+"
                          },
                          "response": []
                        },
                        {
                          "name": "Check no discount",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "type": "text/javascript",
                                "exec": [
                                  "pm.test(\"Status code is 200\", function () {",
                                  "    pm.response.to.have.status(200);",
                                  "});",
                                  "",
                                  "pm.test(\"Coupon code not set\", function () {",
                                  "    var jsonData = pm.response.json();",
                                  "    pm.expect(jsonData.coupon_code).to.eql(null);",
                                  "});"
                                ]
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{customer-access-token}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "GET",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "{}"
                            },
                            "url": {
                              "raw": "{{domain}}{{endpoint_carts}}/{{cartId}}",
                              "host": [
                                "{{domain}}{{endpoint_carts}}"
                              ],
                              "path": [
                                "{{cartId}}"
                              ]
                            }
                          },
                          "response": []
                        }
                      ],
                      "_postman_isSubFolder": true
                    }
                  ],
                  "description": "Run after the add tests",
                  "_postman_isSubFolder": true
                },
                {
                  "name": "Delete",
                  "item": [
                    {
                      "name": "Via Empty Add",
                      "item": [
                        {
                          "name": "/carts: customer",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "type": "text/javascript",
                                "exec": [
                                  "var jsonData = pm.response.json();",
                                  "if (responseCode.code === 200 && jsonData.hasOwnProperty('cartId')) {",
                                  "    pm.environment.set(\"cartId\", jsonData.cartId);",
                                  "    tests[\"Cart ID is returned\"] = isNumeric(jsonData.cartId) === true;",
                                  "} else {",
                                  "    tests[\"Cart ID is not returned\"] = false;",
                                  "}",
                                  "",
                                  "pm.test('Successfull call', function(){",
                                  "    pm.response.to.be.success;",
                                  "});",
                                  "",
                                  "function isNumeric(n) {",
                                  "  return !isNaN(parseFloat(n)) && isFinite(n);",
                                  "}"
                                ]
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{customer-access-token}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "POST",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "{}"
                            },
                            "url": {
                              "raw": "{{domain}}{{endpoint_carts}}",
                              "host": [
                                "{{domain}}{{endpoint_carts}}"
                              ]
                            },
                            "description": "Creates a customer cart"
                          },
                          "response": []
                        },
                        {
                          "name": "Add Configurable: Boots",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "type": "text/javascript",
                                "exec": [
                                  "pm.test('Successfull call', function(){",
                                  "    pm.response.to.be.success;",
                                  "});"
                                ]
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{customer-access-token}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "POST",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "[\n  {\n    \t\"product\": {\n\t\t    \"product_id\": \"431\",\n\t\t    \"qty\": 1,\n\t\t    \"super_attribute\": {\n\t\t\t      \"92\": \"20\",\n\t\t\t      \"186\": \"102\"\n\t\t\t}\n\t\t}\n  }\n]"
                            },
                            "url": {
                              "raw": "{{domain}}{{endpoint_carts_id_items}}",
                              "host": [
                                "{{domain}}{{endpoint_carts_id_items}}"
                              ]
                            },
                            "description": "ID: 431\nType: Configurable\nName: Ann Ankle Boot\nSKU: aws005c\nURL: borgha-ankle-boot\nPrice: $470.00\nCategory: Shoes\n\n\nSub-Products:\nID: 345 | 346 | 347 | 348 | 349\nName: Ann Ankle Boot\nSKU: aws005 | aws006 | aws007 | aws008 | aws009\nColor (ID: 92): Black (ID: 20)\nShoe size (ID: 186): 6 (ID: 102) | 7 (ID: 101) | 8 (ID: 100) | 9 (ID: 99) | 10 (ID: 98)"
                          },
                          "response": []
                        },
                        {
                          "name": "Check no discount",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "type": "text/javascript",
                                "exec": [
                                  "pm.test(\"Status code is 200\", function () {",
                                  "    pm.response.to.have.status(200);",
                                  "});",
                                  "",
                                  "pm.test(\"Coupon code not set\", function () {",
                                  "    var jsonData = pm.response.json();",
                                  "    pm.expect(jsonData.coupon_code).to.eql(null);",
                                  "});"
                                ]
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{customer-access-token}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "GET",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "{}"
                            },
                            "url": {
                              "raw": "{{domain}}{{endpoint_carts}}/{{cartId}}",
                              "host": [
                                "{{domain}}{{endpoint_carts}}"
                              ],
                              "path": [
                                "{{cartId}}"
                              ]
                            }
                          },
                          "response": []
                        },
                        {
                          "name": "Add 10 flat off coupon",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "type": "text/javascript",
                                "exec": [
                                  "pm.test('Successfull call', function(){",
                                  "    pm.response.to.be.success;",
                                  "});"
                                ]
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{customer-access-token}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "POST",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "[\n  {\n    \t\"coupon\": {\n\t\t    \"couponCode\":\"Register10\"\n\t\t}\n  }\n]"
                            },
                            "url": {
                              "raw": "{{domain}}{{endpoint_carts_id_items}}",
                              "host": [
                                "{{domain}}{{endpoint_carts_id_items}}"
                              ]
                            },
                            "description": "Condition for coupon is Group: General, subtotal: 200+"
                          },
                          "response": []
                        },
                        {
                          "name": "Check Register10 exists",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "type": "text/javascript",
                                "exec": [
                                  "pm.test(\"Status code is 200\", function () {",
                                  "    pm.response.to.have.status(200);",
                                  "});",
                                  "",
                                  "pm.test(\"Register10 code exists\", function () {",
                                  "    var jsonData = pm.response.json();",
                                  "    pm.expect(jsonData.coupon_code).to.eql(\"Register10\");",
                                  "});"
                                ]
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{customer-access-token}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "GET",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "{}"
                            },
                            "url": {
                              "raw": "{{domain}}{{endpoint_carts}}/{{cartId}}",
                              "host": [
                                "{{domain}}{{endpoint_carts}}"
                              ],
                              "path": [
                                "{{cartId}}"
                              ]
                            }
                          },
                          "response": []
                        },
                        {
                          "name": "Add empty coupon",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "type": "text/javascript",
                                "exec": [
                                  "pm.test('Successfull call', function(){",
                                  "    pm.response.to.be.success;",
                                  "});"
                                ]
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{customer-access-token}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "POST",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "[\n  {\n    \t\"coupon\": {\n\t\t    \"couponCode\":\"\"\n\t\t}\n  }\n]"
                            },
                            "url": {
                              "raw": "{{domain}}{{endpoint_carts_id_items}}",
                              "host": [
                                "{{domain}}{{endpoint_carts_id_items}}"
                              ]
                            },
                            "description": "Condition for coupon is Group: General, subtotal: 200+"
                          },
                          "response": []
                        },
                        {
                          "name": "Check no discount",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "type": "text/javascript",
                                "exec": [
                                  "pm.test(\"Status code is 200\", function () {",
                                  "    pm.response.to.have.status(200);",
                                  "});",
                                  "",
                                  "pm.test(\"Coupon code not set\", function () {",
                                  "    var jsonData = pm.response.json();",
                                  "    pm.expect(jsonData.coupon_code).to.eql(null);",
                                  "});"
                                ]
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{customer-access-token}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "GET",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "{}"
                            },
                            "url": {
                              "raw": "{{domain}}{{endpoint_carts}}/{{cartId}}",
                              "host": [
                                "{{domain}}{{endpoint_carts}}"
                              ],
                              "path": [
                                "{{cartId}}"
                              ]
                            }
                          },
                          "response": []
                        }
                      ],
                      "_postman_isSubFolder": true
                    },
                    {
                      "name": "Via query",
                      "item": [
                        {
                          "name": "/carts: customer",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "type": "text/javascript",
                                "exec": [
                                  "var jsonData = pm.response.json();",
                                  "if (responseCode.code === 200 && jsonData.hasOwnProperty('cartId')) {",
                                  "    pm.environment.set(\"cartId\", jsonData.cartId);",
                                  "    tests[\"Cart ID is returned\"] = isNumeric(jsonData.cartId) === true;",
                                  "} else {",
                                  "    tests[\"Cart ID is not returned\"] = false;",
                                  "}",
                                  "",
                                  "pm.test('Successfull call', function(){",
                                  "    pm.response.to.be.success;",
                                  "});",
                                  "",
                                  "function isNumeric(n) {",
                                  "  return !isNaN(parseFloat(n)) && isFinite(n);",
                                  "}"
                                ]
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{customer-access-token}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "POST",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "{}"
                            },
                            "url": {
                              "raw": "{{domain}}{{endpoint_carts}}",
                              "host": [
                                "{{domain}}{{endpoint_carts}}"
                              ]
                            },
                            "description": "Creates a customer cart"
                          },
                          "response": []
                        },
                        {
                          "name": "Add Configurable: Boots",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "type": "text/javascript",
                                "exec": [
                                  "pm.test('Successfull call', function(){",
                                  "    pm.response.to.be.success;",
                                  "});"
                                ]
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{customer-access-token}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "POST",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "[\n  {\n    \t\"product\": {\n\t\t    \"product_id\": \"431\",\n\t\t    \"qty\": 1,\n\t\t    \"super_attribute\": {\n\t\t\t      \"92\": \"20\",\n\t\t\t      \"186\": \"102\"\n\t\t\t}\n\t\t}\n  }\n]"
                            },
                            "url": {
                              "raw": "{{domain}}{{endpoint_carts_id_items}}",
                              "host": [
                                "{{domain}}{{endpoint_carts_id_items}}"
                              ]
                            },
                            "description": "ID: 431\nType: Configurable\nName: Ann Ankle Boot\nSKU: aws005c\nURL: borgha-ankle-boot\nPrice: $470.00\nCategory: Shoes\n\n\nSub-Products:\nID: 345 | 346 | 347 | 348 | 349\nName: Ann Ankle Boot\nSKU: aws005 | aws006 | aws007 | aws008 | aws009\nColor (ID: 92): Black (ID: 20)\nShoe size (ID: 186): 6 (ID: 102) | 7 (ID: 101) | 8 (ID: 100) | 9 (ID: 99) | 10 (ID: 98)"
                          },
                          "response": []
                        },
                        {
                          "name": "Check no discount",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "type": "text/javascript",
                                "exec": [
                                  "pm.test(\"Status code is 200\", function () {",
                                  "    pm.response.to.have.status(200);",
                                  "});",
                                  "",
                                  "pm.test(\"Coupon code not set\", function () {",
                                  "    var jsonData = pm.response.json();",
                                  "    pm.expect(jsonData.coupon_code).to.eql(null);",
                                  "});"
                                ]
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{customer-access-token}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "GET",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "{}"
                            },
                            "url": {
                              "raw": "{{domain}}{{endpoint_carts}}/{{cartId}}",
                              "host": [
                                "{{domain}}{{endpoint_carts}}"
                              ],
                              "path": [
                                "{{cartId}}"
                              ]
                            }
                          },
                          "response": []
                        },
                        {
                          "name": "Add 10 flat off coupon",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "type": "text/javascript",
                                "exec": [
                                  "pm.test('Successfull call', function(){",
                                  "    pm.response.to.be.success;",
                                  "});"
                                ]
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{customer-access-token}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "POST",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "[\n  {\n    \t\"coupon\": {\n\t\t    \"couponCode\":\"Register10\"\n\t\t}\n  }\n]"
                            },
                            "url": {
                              "raw": "{{domain}}{{endpoint_carts_id_items}}",
                              "host": [
                                "{{domain}}{{endpoint_carts_id_items}}"
                              ]
                            },
                            "description": "Condition for coupon is Group: General, subtotal: 200+"
                          },
                          "response": []
                        },
                        {
                          "name": "Check Register10 exists",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "type": "text/javascript",
                                "exec": [
                                  "pm.test(\"Status code is 200\", function () {",
                                  "    pm.response.to.have.status(200);",
                                  "});",
                                  "",
                                  "pm.test(\"Register10 code exists\", function () {",
                                  "    var jsonData = pm.response.json();",
                                  "    pm.expect(jsonData.coupon_code).to.eql(\"Register10\");",
                                  "});"
                                ]
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{customer-access-token}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "GET",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "{}"
                            },
                            "url": {
                              "raw": "{{domain}}{{endpoint_carts}}/{{cartId}}",
                              "host": [
                                "{{domain}}{{endpoint_carts}}"
                              ],
                              "path": [
                                "{{cartId}}"
                              ]
                            }
                          },
                          "response": []
                        },
                        {
                          "name": "Use ?cartItemIds=",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "type": "text/javascript",
                                "exec": [
                                  "pm.test('Successfull call', function(){",
                                  "    pm.response.to.be.success;",
                                  "});"
                                ]
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{customer-access-token}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "DELETE",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": ""
                            },
                            "url": {
                              "raw": "{{domain}}{{endpoint_carts_id_items}}?cartItemIds=COUPON_XXX",
                              "host": [
                                "{{domain}}{{endpoint_carts_id_items}}"
                              ],
                              "query": [
                                {
                                  "key": "cartItemIds",
                                  "value": "COUPON_XXX"
                                }
                              ]
                            }
                          },
                          "response": []
                        },
                        {
                          "name": "Check no discount",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "type": "text/javascript",
                                "exec": [
                                  "var jsonData = pm.response.json();",
                                  "pm.test(\"Status code is 200\", function () {",
                                  "    pm.response.to.have.status(200);",
                                  "});",
                                  "",
                                  "pm.test(\"Coupon code not set\", function () {",
                                  "    pm.expect(jsonData.coupon_code).to.eql(null);",
                                  "});",
                                  "",
                                  "pm.test(\"Still have items in cart\", function () {",
                                  "    pm.expect(jsonData.items).to.be.not.empty;",
                                  "});",
                                  "",
                                  ""
                                ]
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{customer-access-token}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "GET",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "{}"
                            },
                            "url": {
                              "raw": "{{domain}}{{endpoint_carts}}/{{cartId}}",
                              "host": [
                                "{{domain}}{{endpoint_carts}}"
                              ],
                              "path": [
                                "{{cartId}}"
                              ]
                            }
                          },
                          "response": []
                        }
                      ],
                      "_postman_isSubFolder": true
                    }
                  ],
                  "_postman_isSubFolder": true
                }
              ],
              "_postman_isSubFolder": true
            },
            {
              "name": "Guest",
              "item": [
                {
                  "name": "Add",
                  "item": [
                    {
                      "name": "Auto-Gen",
                      "item": [
                        {
                          "name": "/carts: Guest Cart",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "type": "text/javascript",
                                "exec": [
                                  "var jsonData = pm.response.json();",
                                  "if (responseCode.code === 200 && jsonData.hasOwnProperty('cartId')) {",
                                  "    pm.environment.set(\"cartId\", jsonData.cartId);",
                                  "    tests[\"Cart ID is returned\"] = isNumeric(jsonData.cartId) === true;",
                                  "} else {",
                                  "    tests[\"Cart ID is not returned\"] = false;",
                                  "}",
                                  "",
                                  "pm.test('Successfull call', function(){",
                                  "    pm.response.to.be.success;",
                                  "});",
                                  "",
                                  "function isNumeric(n) {",
                                  "  return !isNaN(parseFloat(n)) && isFinite(n);",
                                  "}"
                                ]
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{guest-access-token}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "POST",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "{}"
                            },
                            "url": {
                              "raw": "{{domain}}{{endpoint_carts}}",
                              "host": [
                                "{{domain}}{{endpoint_carts}}"
                              ]
                            },
                            "description": "Creates a guest cart and assigns the local cartId variable from the one returned"
                          },
                          "response": []
                        },
                        {
                          "name": "Add Simple: $500",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "type": "text/javascript",
                                "exec": [
                                  "pm.test('Successfull call', function(){",
                                  "    pm.response.to.be.success;",
                                  "});"
                                ]
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{guest-access-token}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "POST",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "[\n  {\n    \"product\": {\n\t    \"product_id\": \"554\",\n\t    \"qty\": 1\n\t  }\n  }\n]"
                            },
                            "url": {
                              "raw": "{{domain}}{{endpoint_carts_id_items}}",
                              "host": [
                                "{{domain}}{{endpoint_carts_id_items}}"
                              ]
                            },
                            "description": "ID: 554\nType: Simple\nName: Swiss Movement Sports Watch\nSKU: acj005\nURL: swiss-movement-sports-watch\nCategory: Jewelry\nPrice: $500.00\nQty: 3"
                          },
                          "response": []
                        },
                        {
                          "name": "Add 10% off coupon",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "type": "text/javascript",
                                "exec": [
                                  "pm.test('Successfull call', function(){",
                                  "    pm.response.to.be.success;",
                                  "});"
                                ]
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{guest-access-token}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "POST",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "[\n  {\n    \t\"coupon\": {\n\t\t    \"couponCode\":\"3I5REXK80NUN\"\n\t\t}\n  }\n]"
                            },
                            "url": {
                              "raw": "{{domain}}{{endpoint_carts_id_items}}",
                              "host": [
                                "{{domain}}{{endpoint_carts_id_items}}"
                              ]
                            },
                            "description": "Autogenerated coupon code.\nCondition for coupon is:\nGroup: Not-Logged-In, General, VIP, Wholesale; \nIf item in cart has \"Price in cart\" = 500"
                          },
                          "response": []
                        },
                        {
                          "name": "Coupon is in cart",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "type": "text/javascript",
                                "exec": [
                                  "pm.test(\"Status code is 200\", function () {",
                                  "    pm.response.to.have.status(200);",
                                  "});",
                                  "",
                                  "pm.test(\"3I5REXK80NUN code exists\", function () {",
                                  "    var jsonData = pm.response.json();",
                                  "    pm.expect(jsonData.coupon_code).to.eql(\"3I5REXK80NUN\");",
                                  "});"
                                ]
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{guest-access-token}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "GET",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "{}"
                            },
                            "url": {
                              "raw": "{{domain}}{{endpoint_carts}}/{{cartId}}",
                              "host": [
                                "{{domain}}{{endpoint_carts}}"
                              ],
                              "path": [
                                "{{cartId}}"
                              ]
                            }
                          },
                          "response": []
                        }
                      ],
                      "_postman_isSubFolder": true
                    },
                    {
                      "name": "Mobile App Coupon",
                      "item": [
                        {
                          "name": "/carts: customer",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "type": "text/javascript",
                                "exec": [
                                  "var jsonData = pm.response.json();",
                                  "if (responseCode.code === 200 && jsonData.hasOwnProperty('cartId')) {",
                                  "    pm.environment.set(\"cartId\", jsonData.cartId);",
                                  "    tests[\"Cart ID is returned\"] = isNumeric(jsonData.cartId) === true;",
                                  "} else {",
                                  "    tests[\"Cart ID is not returned\"] = false;",
                                  "}",
                                  "",
                                  "pm.test('Successfull call', function(){",
                                  "    pm.response.to.be.success;",
                                  "});",
                                  "",
                                  "function isNumeric(n) {",
                                  "  return !isNaN(parseFloat(n)) && isFinite(n);",
                                  "}"
                                ]
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{guest-access-token}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "POST",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "{}"
                            },
                            "url": {
                              "raw": "{{domain}}{{endpoint_carts}}",
                              "host": [
                                "{{domain}}{{endpoint_carts}}"
                              ]
                            },
                            "description": "Creates a customer cart"
                          },
                          "response": []
                        },
                        {
                          "name": "Add Configurable: Boots",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "type": "text/javascript",
                                "exec": [
                                  "pm.test('Successfull call', function(){",
                                  "    pm.response.to.be.success;",
                                  "});"
                                ]
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{guest-access-token}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "POST",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "[\n  {\n    \t\"product\": {\n\t\t    \"product_id\": \"431\",\n\t\t    \"qty\": 1,\n\t\t    \"super_attribute\": {\n\t\t\t      \"92\": \"20\",\n\t\t\t      \"186\": \"102\"\n\t\t\t}\n\t\t}\n  }\n]"
                            },
                            "url": {
                              "raw": "{{domain}}{{endpoint_carts_id_items}}",
                              "host": [
                                "{{domain}}{{endpoint_carts_id_items}}"
                              ]
                            },
                            "description": "ID: 431\nType: Configurable\nName: Ann Ankle Boot\nSKU: aws005c\nURL: borgha-ankle-boot\nPrice: $470.00\nCategory: Shoes\n\n\nSub-Products:\nID: 345 | 346 | 347 | 348 | 349\nName: Ann Ankle Boot\nSKU: aws005 | aws006 | aws007 | aws008 | aws009\nColor (ID: 92): Black (ID: 20)\nShoe size (ID: 186): 6 (ID: 102) | 7 (ID: 101) | 8 (ID: 100) | 9 (ID: 99) | 10 (ID: 98)"
                          },
                          "response": []
                        },
                        {
                          "name": "Add app-only coupon",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "type": "text/javascript",
                                "exec": [
                                  "pm.test('Successfull call', function(){",
                                  "    pm.response.to.be.success;",
                                  "});"
                                ]
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{guest-access-token}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "POST",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "[\n  {\n    \t\"coupon\": {\n\t\t    \"couponCode\":\"APP10\"\n\t\t}\n  }\n]"
                            },
                            "url": {
                              "raw": "{{domain}}{{endpoint_carts_id_items}}",
                              "host": [
                                "{{domain}}{{endpoint_carts_id_items}}"
                              ]
                            },
                            "description": "Conditions: Client must use shopgate app"
                          },
                          "response": []
                        },
                        {
                          "name": "Check coupon exists",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "id": "d1a8c36e-413f-4231-b9a1-a9ef388c0879",
                                "type": "text/javascript",
                                "exec": [
                                  "pm.test(\"Status code is 200\", function () {",
                                  "    pm.response.to.have.status(200);",
                                  "});",
                                  "",
                                  "var jsonData = pm.response.json();",
                                  "pm.test(\"APP10 code exists\", function () {",
                                  "    pm.expect(jsonData.coupon_code).to.eql(\"APP10\");",
                                  "});",
                                  "",
                                  "pm.test(\"Check that the quote was not collected. Else it would be a non-string\", function () {",
                                  "    pm.expect(jsonData.items_qty).to.eql(\"1.0000\");",
                                  "});"
                                ]
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{guest-access-token}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "GET",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "{}"
                            },
                            "url": {
                              "raw": "{{domain}}{{endpoint_carts}}/{{cartId}}",
                              "host": [
                                "{{domain}}{{endpoint_carts}}"
                              ],
                              "path": [
                                "{{cartId}}"
                              ]
                            }
                          },
                          "response": []
                        }
                      ],
                      "description": "Tests shopgate coupons with shopgate mobile app type condition only",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "id": "ab0a7a2c-0eee-46ae-822a-1c50012f1e12",
                            "type": "text/javascript",
                            "exec": [
                              ""
                            ]
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "id": "85d5d4b9-13e8-4b68-8914-dad09b901a5c",
                            "type": "text/javascript",
                            "exec": [
                              ""
                            ]
                          }
                        }
                      ],
                      "_postman_isSubFolder": true
                    },
                    {
                      "name": "/carts: Guest Cart",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "type": "text/javascript",
                            "exec": [
                              "var jsonData = pm.response.json();",
                              "if (responseCode.code === 200 && jsonData.hasOwnProperty('cartId')) {",
                              "    pm.environment.set(\"cartId\", jsonData.cartId);",
                              "    tests[\"Cart ID is returned\"] = isNumeric(jsonData.cartId) === true;",
                              "} else {",
                              "    tests[\"Cart ID is not returned\"] = false;",
                              "}",
                              "",
                              "pm.test('Successfull call', function(){",
                              "    pm.response.to.be.success;",
                              "});",
                              "",
                              "function isNumeric(n) {",
                              "  return !isNaN(parseFloat(n)) && isFinite(n);",
                              "}"
                            ]
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{guest-access-token}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "POST",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{}"
                        },
                        "url": {
                          "raw": "{{domain}}{{endpoint_carts}}",
                          "host": [
                            "{{domain}}{{endpoint_carts}}"
                          ]
                        },
                        "description": "Creates a guest cart and assigns the local cartId variable from the one returned"
                      },
                      "response": []
                    },
                    {
                      "name": "Add Configurable: Skirt",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "type": "text/javascript",
                            "exec": [
                              "pm.test('Successfull call', function(){",
                              "    pm.response.to.be.success;",
                              "});"
                            ]
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{guest-access-token}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "POST",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "[\n  {\n\t    \"product\": {\n\t\t    \"product_id\": \"422\",\n\t\t    \"qty\": 1,\n\t\t    \"super_attribute\": {\n\t\t\t      \"92\": \"17\",\n\t\t\t      \"180\": \"76\"\n\t\t\t    }\n\t\t}\n  }\n]"
                        },
                        "url": {
                          "raw": "{{domain}}{{endpoint_carts_id_items}}",
                          "host": [
                            "{{domain}}{{endpoint_carts_id_items}}"
                          ]
                        },
                        "description": "ID: 422\nType: Configurable\nName: Essex Pencil Skirt\nSKU: wsd000c\nCategory: Dresses & Skirts\nPrice: $185.00\n\nSub-Products:\nID: 297 | 298 | 299 | 300 | 301\nName: Essex Pencil Skirt\nSKU: wsd000 | wsd001 | wsd002 | wsd003 | wsd004\nColor (ID: 92): Charcoal (ID: 17)\nSize (ID: 180): 2 (ID: 76) | 4 (ID: 75) | 6 (ID: 74) | 8 (ID: 73) | 10 (ID: 72)"
                      },
                      "response": []
                    },
                    {
                      "name": "Add 15 flat off coupon",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "type": "text/javascript",
                            "exec": [
                              "pm.test('Successfull call', function(){",
                              "    pm.response.to.be.success;",
                              "});"
                            ]
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{guest-access-token}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "POST",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "[\n  {\n    \t\"coupon\": {\n\t\t    \"couponCode\":\"evening15\"\n\t\t}\n  }\n]"
                        },
                        "url": {
                          "raw": "{{domain}}{{endpoint_carts_id_items}}",
                          "host": [
                            "{{domain}}{{endpoint_carts_id_items}}"
                          ]
                        },
                        "description": "Condition for coupon is:\nGroup: Not-Logged-In, General, VIP, Private Sales Member; \nCategories: Dresses & Skirts, Dresses;"
                      },
                      "response": []
                    },
                    {
                      "name": "Check evening15 exists",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "type": "text/javascript",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test(\"evening15 code exists\", function () {",
                              "    var jsonData = pm.response.json();",
                              "    pm.expect(jsonData.coupon_code).to.eql(\"evening15\");",
                              "});"
                            ]
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{guest-access-token}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "GET",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{}"
                        },
                        "url": {
                          "raw": "{{domain}}{{endpoint_carts}}/{{cartId}}",
                          "host": [
                            "{{domain}}{{endpoint_carts}}"
                          ],
                          "path": [
                            "{{cartId}}"
                          ]
                        }
                      },
                      "response": []
                    }
                  ],
                  "_postman_isSubFolder": true
                },
                {
                  "name": "Update",
                  "item": [
                    {
                      "name": "/carts: Guest Cart",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "type": "text/javascript",
                            "exec": [
                              "var jsonData = pm.response.json();",
                              "if (responseCode.code === 200 && jsonData.hasOwnProperty('cartId')) {",
                              "    pm.environment.set(\"cartId\", jsonData.cartId);",
                              "    tests[\"Cart ID is returned\"] = isNumeric(jsonData.cartId) === true;",
                              "} else {",
                              "    tests[\"Cart ID is not returned\"] = false;",
                              "}",
                              "",
                              "pm.test('Successfull call', function(){",
                              "    pm.response.to.be.success;",
                              "});",
                              "",
                              "function isNumeric(n) {",
                              "  return !isNaN(parseFloat(n)) && isFinite(n);",
                              "}"
                            ]
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{guest-access-token}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "POST",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{}"
                        },
                        "url": {
                          "raw": "{{domain}}{{endpoint_carts}}",
                          "host": [
                            "{{domain}}{{endpoint_carts}}"
                          ]
                        },
                        "description": "Creates a guest cart and assigns the local cartId variable from the one returned"
                      },
                      "response": []
                    },
                    {
                      "name": "Add Configurable: Skirt",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "type": "text/javascript",
                            "exec": [
                              "pm.test('Successfull call', function(){",
                              "    pm.response.to.be.success;",
                              "});"
                            ]
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{guest-access-token}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "POST",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "[\n  {\n\t    \"product\": {\n\t\t    \"product_id\": \"422\",\n\t\t    \"qty\": 1,\n\t\t    \"super_attribute\": {\n\t\t\t      \"92\": \"17\",\n\t\t\t      \"180\": \"76\"\n\t\t\t    }\n\t\t}\n  }\n]"
                        },
                        "url": {
                          "raw": "{{domain}}{{endpoint_carts_id_items}}",
                          "host": [
                            "{{domain}}{{endpoint_carts_id_items}}"
                          ]
                        },
                        "description": "ID: 422\nType: Configurable\nName: Essex Pencil Skirt\nSKU: wsd000c\nCategory: Dresses & Skirts\nPrice: $185.00\n\nSub-Products:\nID: 297 | 298 | 299 | 300 | 301\nName: Essex Pencil Skirt\nSKU: wsd000 | wsd001 | wsd002 | wsd003 | wsd004\nColor (ID: 92): Charcoal (ID: 17)\nSize (ID: 180): 2 (ID: 76) | 4 (ID: 75) | 6 (ID: 74) | 8 (ID: 73) | 10 (ID: 72)"
                      },
                      "response": []
                    },
                    {
                      "name": "Add 15 flat off coupon",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "type": "text/javascript",
                            "exec": [
                              "pm.test('Successfull call', function(){",
                              "    pm.response.to.be.success;",
                              "});"
                            ]
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{guest-access-token}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "POST",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "[\n  {\n    \t\"coupon\": {\n\t\t    \"couponCode\":\"evening15\"\n\t\t}\n  }\n]"
                        },
                        "url": {
                          "raw": "{{domain}}{{endpoint_carts_id_items}}",
                          "host": [
                            "{{domain}}{{endpoint_carts_id_items}}"
                          ]
                        },
                        "description": "Condition for coupon is:\nGroup: Not-Logged-In, General, VIP, Private Sales Member; \nCategories: Dresses & Skirts, Dresses;"
                      },
                      "response": []
                    },
                    {
                      "name": "Check evening15 exists",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "type": "text/javascript",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test(\"evening15 code exists\", function () {",
                              "    var jsonData = pm.response.json();",
                              "    pm.expect(jsonData.coupon_code).to.eql(\"evening15\");",
                              "});"
                            ]
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{guest-access-token}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "GET",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{}"
                        },
                        "url": {
                          "raw": "{{domain}}{{endpoint_carts}}/{{cartId}}",
                          "host": [
                            "{{domain}}{{endpoint_carts}}"
                          ],
                          "path": [
                            "{{cartId}}"
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Add app-only coupon",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "type": "text/javascript",
                            "exec": [
                              "pm.test('Successfull call', function(){",
                              "    pm.response.to.be.success;",
                              "});"
                            ]
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{guest-access-token}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "POST",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "[\n  {\n    \t\"coupon\": {\n\t\t    \"couponCode\":\"APP10\"\n\t\t}\n  }\n]"
                        },
                        "url": {
                          "raw": "{{domain}}{{endpoint_carts_id_items}}",
                          "host": [
                            "{{domain}}{{endpoint_carts_id_items}}"
                          ]
                        },
                        "description": "Condition for coupon is:\nGroup: Not-Logged-In, General, VIP, Private Sales Member; \nCategories: Dresses & Skirts, Dresses;"
                      },
                      "response": []
                    },
                    {
                      "name": "Check app-only coupon exists",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "c35b4c76-39d1-4d09-abb7-85fc58f42bc2",
                            "type": "text/javascript",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test(\"APP10 code exists\", function () {",
                              "    var jsonData = pm.response.json();",
                              "    pm.expect(jsonData.coupon_code).to.eql(\"APP10\");",
                              "});"
                            ]
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{guest-access-token}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "GET",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{}"
                        },
                        "url": {
                          "raw": "{{domain}}{{endpoint_carts}}/{{cartId}}",
                          "host": [
                            "{{domain}}{{endpoint_carts}}"
                          ],
                          "path": [
                            "{{cartId}}"
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Update with empty",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "type": "text/javascript",
                            "exec": [
                              "pm.test('Successfull call', function(){",
                              "    pm.response.to.be.success;",
                              "});"
                            ]
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{guest-access-token}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "POST",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "[\n  {\n  \t\t\"cartItemId\": \"1234\",\n    \t\"coupon\": {\n\t\t    \"couponCode\":\"\"\n\t\t}\n  }\n]"
                        },
                        "url": {
                          "raw": "{{domain}}{{endpoint_carts_id_items}}",
                          "host": [
                            "{{domain}}{{endpoint_carts_id_items}}"
                          ]
                        },
                        "description": "Condition for coupon is:\nGroup: Not-Logged-In, General, VIP, Private Sales Member; \nCategories: Dresses & Skirts, Dresses;"
                      },
                      "response": []
                    },
                    {
                      "name": "Check no discount",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "type": "text/javascript",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test(\"Coupon code not set\", function () {",
                              "    var jsonData = pm.response.json();",
                              "    pm.expect(jsonData.coupon_code).to.eql(null);",
                              "});"
                            ]
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{guest-access-token}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "GET",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{}"
                        },
                        "url": {
                          "raw": "{{domain}}{{endpoint_carts}}/{{cartId}}",
                          "host": [
                            "{{domain}}{{endpoint_carts}}"
                          ],
                          "path": [
                            "{{cartId}}"
                          ]
                        }
                      },
                      "response": []
                    }
                  ],
                  "_postman_isSubFolder": true
                },
                {
                  "name": "Delete",
                  "item": [
                    {
                      "name": "Via Empty All",
                      "item": [
                        {
                          "name": "/carts: guest",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "type": "text/javascript",
                                "exec": [
                                  "var jsonData = pm.response.json();",
                                  "if (responseCode.code === 200 && jsonData.hasOwnProperty('cartId')) {",
                                  "    pm.environment.set(\"cartId\", jsonData.cartId);",
                                  "    tests[\"Cart ID is returned\"] = isNumeric(jsonData.cartId) === true;",
                                  "} else {",
                                  "    tests[\"Cart ID is not returned\"] = false;",
                                  "}",
                                  "",
                                  "pm.test('Successfull call', function(){",
                                  "    pm.response.to.be.success;",
                                  "});",
                                  "",
                                  "function isNumeric(n) {",
                                  "  return !isNaN(parseFloat(n)) && isFinite(n);",
                                  "}"
                                ]
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{guest-access-token}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "POST",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "{}"
                            },
                            "url": {
                              "raw": "{{domain}}{{endpoint_carts}}",
                              "host": [
                                "{{domain}}{{endpoint_carts}}"
                              ]
                            },
                            "description": "Creates a guest cart and assigns the local cartId variable from the one returned"
                          },
                          "response": []
                        },
                        {
                          "name": "Add Configurable: Skirt",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "type": "text/javascript",
                                "exec": [
                                  "pm.test('Successfull call', function(){",
                                  "    pm.response.to.be.success;",
                                  "});"
                                ]
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{guest-access-token}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "POST",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "[\n  {\n\t    \"product\": {\n\t\t    \"product_id\": \"422\",\n\t\t    \"qty\": 1,\n\t\t    \"super_attribute\": {\n\t\t\t      \"92\": \"17\",\n\t\t\t      \"180\": \"76\"\n\t\t\t    }\n\t\t}\n  }\n]"
                            },
                            "url": {
                              "raw": "{{domain}}{{endpoint_carts_id_items}}",
                              "host": [
                                "{{domain}}{{endpoint_carts_id_items}}"
                              ]
                            },
                            "description": "ID: 422\nType: Configurable\nName: Essex Pencil Skirt\nSKU: wsd000c\nCategory: Dresses & Skirts\nPrice: $185.00\n\nSub-Products:\nID: 297 | 298 | 299 | 300 | 301\nName: Essex Pencil Skirt\nSKU: wsd000 | wsd001 | wsd002 | wsd003 | wsd004\nColor (ID: 92): Charcoal (ID: 17)\nSize (ID: 180): 2 (ID: 76) | 4 (ID: 75) | 6 (ID: 74) | 8 (ID: 73) | 10 (ID: 72)"
                          },
                          "response": []
                        },
                        {
                          "name": "Add 15 flat off coupon",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "type": "text/javascript",
                                "exec": [
                                  "pm.test('Successfull call', function(){",
                                  "    pm.response.to.be.success;",
                                  "});"
                                ]
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{guest-access-token}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "POST",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "[\n  {\n    \t\"coupon\": {\n\t\t    \"couponCode\":\"evening15\"\n\t\t}\n  }\n]"
                            },
                            "url": {
                              "raw": "{{domain}}{{endpoint_carts_id_items}}",
                              "host": [
                                "{{domain}}{{endpoint_carts_id_items}}"
                              ]
                            },
                            "description": "Condition for coupon is:\nGroup: Not-Logged-In, General, VIP, Private Sales Member; \nCategories: Dresses & Skirts, Dresses;"
                          },
                          "response": []
                        },
                        {
                          "name": "Check evening15 exists",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "type": "text/javascript",
                                "exec": [
                                  "pm.test(\"Status code is 200\", function () {",
                                  "    pm.response.to.have.status(200);",
                                  "});",
                                  "",
                                  "pm.test(\"evening15 code exists\", function () {",
                                  "    var jsonData = pm.response.json();",
                                  "    pm.expect(jsonData.coupon_code).to.eql(\"evening15\");",
                                  "});"
                                ]
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{guest-access-token}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "GET",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "{}"
                            },
                            "url": {
                              "raw": "{{domain}}{{endpoint_carts}}/{{cartId}}",
                              "host": [
                                "{{domain}}{{endpoint_carts}}"
                              ],
                              "path": [
                                "{{cartId}}"
                              ]
                            }
                          },
                          "response": []
                        },
                        {
                          "name": "Add empty coupon",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "type": "text/javascript",
                                "exec": [
                                  "pm.test('Successfull call', function(){",
                                  "    pm.response.to.be.success;",
                                  "});"
                                ]
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{guest-access-token}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "POST",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "[\n  {\n    \t\"coupon\": {\n\t\t    \"couponCode\":\"\"\n\t\t}\n  }\n]"
                            },
                            "url": {
                              "raw": "{{domain}}{{endpoint_carts_id_items}}",
                              "host": [
                                "{{domain}}{{endpoint_carts_id_items}}"
                              ]
                            },
                            "description": "Condition for coupon is Group: General, subtotal: 200+"
                          },
                          "response": []
                        },
                        {
                          "name": "Check no discount",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "type": "text/javascript",
                                "exec": [
                                  "pm.test(\"Status code is 200\", function () {",
                                  "    pm.response.to.have.status(200);",
                                  "});",
                                  "",
                                  "pm.test(\"Coupon code not set\", function () {",
                                  "    var jsonData = pm.response.json();",
                                  "    pm.expect(jsonData.coupon_code).to.eql(null);",
                                  "});"
                                ]
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{guest-access-token}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "GET",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "{}"
                            },
                            "url": {
                              "raw": "{{domain}}{{endpoint_carts}}/{{cartId}}",
                              "host": [
                                "{{domain}}{{endpoint_carts}}"
                              ],
                              "path": [
                                "{{cartId}}"
                              ]
                            }
                          },
                          "response": []
                        },
                        {
                          "name": "/carts: guest",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "type": "text/javascript",
                                "exec": [
                                  "var jsonData = pm.response.json();",
                                  "if (responseCode.code === 200 && jsonData.hasOwnProperty('cartId')) {",
                                  "    pm.environment.set(\"cartId\", jsonData.cartId);",
                                  "    tests[\"Cart ID is returned\"] = isNumeric(jsonData.cartId) === true;",
                                  "} else {",
                                  "    tests[\"Cart ID is not returned\"] = false;",
                                  "}",
                                  "",
                                  "pm.test('Successfull call', function(){",
                                  "    pm.response.to.be.success;",
                                  "});",
                                  "",
                                  "function isNumeric(n) {",
                                  "  return !isNaN(parseFloat(n)) && isFinite(n);",
                                  "}"
                                ]
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{guest-access-token}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "POST",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "{}"
                            },
                            "url": {
                              "raw": "{{domain}}{{endpoint_carts}}",
                              "host": [
                                "{{domain}}{{endpoint_carts}}"
                              ]
                            },
                            "description": "Creates a guest cart and assigns the local cartId variable from the one returned"
                          },
                          "response": []
                        }
                      ],
                      "_postman_isSubFolder": true
                    },
                    {
                      "name": "Via query",
                      "item": [
                        {
                          "name": "/carts: guest",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "type": "text/javascript",
                                "exec": [
                                  "var jsonData = pm.response.json();",
                                  "if (responseCode.code === 200 && jsonData.hasOwnProperty('cartId')) {",
                                  "    pm.environment.set(\"cartId\", jsonData.cartId);",
                                  "    tests[\"Cart ID is returned\"] = isNumeric(jsonData.cartId) === true;",
                                  "} else {",
                                  "    tests[\"Cart ID is not returned\"] = false;",
                                  "}",
                                  "",
                                  "pm.test('Successfull call', function(){",
                                  "    pm.response.to.be.success;",
                                  "});",
                                  "",
                                  "function isNumeric(n) {",
                                  "  return !isNaN(parseFloat(n)) && isFinite(n);",
                                  "}"
                                ]
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{guest-access-token}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "POST",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "{}"
                            },
                            "url": {
                              "raw": "{{domain}}{{endpoint_carts}}",
                              "host": [
                                "{{domain}}{{endpoint_carts}}"
                              ]
                            },
                            "description": "Creates a guest cart and assigns the local cartId variable from the one returned"
                          },
                          "response": []
                        },
                        {
                          "name": "Add Configurable: Skirt",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "type": "text/javascript",
                                "exec": [
                                  "pm.test('Successfull call', function(){",
                                  "    pm.response.to.be.success;",
                                  "});"
                                ]
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{guest-access-token}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "POST",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "[\n  {\n\t    \"product\": {\n\t\t    \"product_id\": \"422\",\n\t\t    \"qty\": 1,\n\t\t    \"super_attribute\": {\n\t\t\t      \"92\": \"17\",\n\t\t\t      \"180\": \"76\"\n\t\t\t    }\n\t\t}\n  }\n]"
                            },
                            "url": {
                              "raw": "{{domain}}{{endpoint_carts_id_items}}",
                              "host": [
                                "{{domain}}{{endpoint_carts_id_items}}"
                              ]
                            },
                            "description": "ID: 422\nType: Configurable\nName: Essex Pencil Skirt\nSKU: wsd000c\nCategory: Dresses & Skirts\nPrice: $185.00\n\nSub-Products:\nID: 297 | 298 | 299 | 300 | 301\nName: Essex Pencil Skirt\nSKU: wsd000 | wsd001 | wsd002 | wsd003 | wsd004\nColor (ID: 92): Charcoal (ID: 17)\nSize (ID: 180): 2 (ID: 76) | 4 (ID: 75) | 6 (ID: 74) | 8 (ID: 73) | 10 (ID: 72)"
                          },
                          "response": []
                        },
                        {
                          "name": "Add 15 flat off coupon",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "type": "text/javascript",
                                "exec": [
                                  "pm.test('Successfull call', function(){",
                                  "    pm.response.to.be.success;",
                                  "});"
                                ]
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{guest-access-token}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "POST",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "[\n  {\n    \t\"coupon\": {\n\t\t    \"couponCode\":\"evening15\"\n\t\t}\n  }\n]"
                            },
                            "url": {
                              "raw": "{{domain}}{{endpoint_carts_id_items}}",
                              "host": [
                                "{{domain}}{{endpoint_carts_id_items}}"
                              ]
                            },
                            "description": "Condition for coupon is:\nGroup: Not-Logged-In, General, VIP, Private Sales Member; \nCategories: Dresses & Skirts, Dresses;"
                          },
                          "response": []
                        },
                        {
                          "name": "Check evening15 exists copy",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "type": "text/javascript",
                                "exec": [
                                  "pm.test(\"Status code is 200\", function () {",
                                  "    pm.response.to.have.status(200);",
                                  "});",
                                  "",
                                  "pm.test(\"evening15 code exists\", function () {",
                                  "    var jsonData = pm.response.json();",
                                  "    pm.expect(jsonData.coupon_code).to.eql(\"evening15\");",
                                  "});"
                                ]
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{guest-access-token}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "GET",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "{}"
                            },
                            "url": {
                              "raw": "{{domain}}{{endpoint_carts}}/{{cartId}}",
                              "host": [
                                "{{domain}}{{endpoint_carts}}"
                              ],
                              "path": [
                                "{{cartId}}"
                              ]
                            }
                          },
                          "response": []
                        },
                        {
                          "name": "Use ?cartItemIds=",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "type": "text/javascript",
                                "exec": [
                                  "pm.test('Successfull call', function(){",
                                  "    pm.response.to.be.success;",
                                  "});"
                                ]
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{guest-access-token}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "DELETE",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": ""
                            },
                            "url": {
                              "raw": "{{domain}}{{endpoint_carts_id_items}}?cartItemIds=COUPON_XXX",
                              "host": [
                                "{{domain}}{{endpoint_carts_id_items}}"
                              ],
                              "query": [
                                {
                                  "key": "cartItemIds",
                                  "value": "COUPON_XXX"
                                }
                              ]
                            }
                          },
                          "response": []
                        },
                        {
                          "name": "Check no discount",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "type": "text/javascript",
                                "exec": [
                                  "var jsonData = pm.response.json();",
                                  "pm.test(\"Status code is 200\", function () {",
                                  "    pm.response.to.have.status(200);",
                                  "});",
                                  "",
                                  "pm.test(\"Coupon code not set\", function () {",
                                  "    pm.expect(jsonData.coupon_code).to.eql(null);",
                                  "});",
                                  "",
                                  "pm.test(\"Still have items in cart\", function () {",
                                  "    pm.expect(jsonData.items).to.be.not.empty;",
                                  "});",
                                  "",
                                  ""
                                ]
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{guest-access-token}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "GET",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "{}"
                            },
                            "url": {
                              "raw": "{{domain}}{{endpoint_carts}}/{{cartId}}",
                              "host": [
                                "{{domain}}{{endpoint_carts}}"
                              ],
                              "path": [
                                "{{cartId}}"
                              ]
                            }
                          },
                          "response": []
                        }
                      ],
                      "_postman_isSubFolder": true
                    }
                  ],
                  "_postman_isSubFolder": true
                }
              ],
              "_postman_isSubFolder": true
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "name": "Mixed",
          "item": [
            {
              "name": "Customer",
              "item": [
                {
                  "name": "Update",
                  "item": [
                    {
                      "name": "Product first",
                      "item": [
                        {
                          "name": "/carts: customer",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "type": "text/javascript",
                                "exec": [
                                  "var jsonData = pm.response.json();",
                                  "if (responseCode.code === 200 && jsonData.hasOwnProperty('cartId')) {",
                                  "    pm.environment.set(\"cartId\", jsonData.cartId);",
                                  "    tests[\"Cart ID is returned\"] = isNumeric(jsonData.cartId) === true;",
                                  "} else {",
                                  "    tests[\"Cart ID is not returned\"] = false;",
                                  "}",
                                  "",
                                  "pm.test('Successfull call', function(){",
                                  "    pm.response.to.be.success;",
                                  "});",
                                  "",
                                  "function isNumeric(n) {",
                                  "  return !isNaN(parseFloat(n)) && isFinite(n);",
                                  "}"
                                ]
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{customer-access-token}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "POST",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "{}"
                            },
                            "url": {
                              "raw": "{{domain}}{{endpoint_carts}}",
                              "host": [
                                "{{domain}}{{endpoint_carts}}"
                              ]
                            },
                            "description": "Creates a customer cart"
                          },
                          "response": []
                        },
                        {
                          "name": "Add Configurable + Coupon",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "type": "text/javascript",
                                "exec": [
                                  "pm.test('Successfull call', function(){",
                                  "    pm.response.to.be.success;",
                                  "});"
                                ]
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{customer-access-token}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "POST",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "[\n  {\n    \t\"product\": {\n\t\t    \"product_id\": \"431\",\n\t\t    \"qty\": 1,\n\t\t    \"super_attribute\": {\n\t\t\t      \"92\": \"20\",\n\t\t\t      \"186\": \"102\"\n\t\t\t}\n\t\t}\n  },\n  {\n    \t\"coupon\": {\n\t\t    \"couponCode\":\"Register10\"\n\t\t}\n  }\n]"
                            },
                            "url": {
                              "raw": "{{domain}}{{endpoint_carts_id_items}}",
                              "host": [
                                "{{domain}}{{endpoint_carts_id_items}}"
                              ]
                            },
                            "description": "ID: 431\nType: Configurable\nName: Ann Ankle Boot\nSKU: aws005c\nURL: borgha-ankle-boot\nPrice: $470.00\nCategory: Shoes\n\n\nSub-Products:\nID: 345 | 346 | 347 | 348 | 349\nName: Ann Ankle Boot\nSKU: aws005 | aws006 | aws007 | aws008 | aws009\nColor (ID: 92): Black (ID: 20)\nShoe size (ID: 186): 6 (ID: 102) | 7 (ID: 101) | 8 (ID: 100) | 9 (ID: 99) | 10 (ID: 98)"
                          },
                          "response": []
                        },
                        {
                          "name": "Check code + product",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "type": "text/javascript",
                                "exec": [
                                  "var jsonData = pm.response.json();",
                                  "pm.test(\"Status code is 200\", function () {",
                                  "    pm.response.to.have.status(200);",
                                  "});",
                                  "",
                                  "pm.test(\"Register10 code exists\", function () {",
                                  "    pm.expect(jsonData.coupon_code).to.eql(\"Register10\");",
                                  "});",
                                  "",
                                  "pm.test(\"Configurable product is in cart\", function () {",
                                  "    pm.expect(jsonData.items.length).to.be.eql(2);",
                                  "});"
                                ]
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{customer-access-token}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "GET",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "{}"
                            },
                            "url": {
                              "raw": "{{domain}}{{endpoint_carts}}/{{cartId}}",
                              "host": [
                                "{{domain}}{{endpoint_carts}}"
                              ],
                              "path": [
                                "{{cartId}}"
                              ]
                            }
                          },
                          "response": []
                        }
                      ],
                      "_postman_isSubFolder": true
                    },
                    {
                      "name": "Product last",
                      "item": [
                        {
                          "name": "/carts: customer",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "type": "text/javascript",
                                "exec": [
                                  "var jsonData = pm.response.json();",
                                  "if (responseCode.code === 200 && jsonData.hasOwnProperty('cartId')) {",
                                  "    pm.environment.set(\"cartId\", jsonData.cartId);",
                                  "    tests[\"Cart ID is returned\"] = isNumeric(jsonData.cartId) === true;",
                                  "} else {",
                                  "    tests[\"Cart ID is not returned\"] = false;",
                                  "}",
                                  "",
                                  "pm.test('Successfull call', function(){",
                                  "    pm.response.to.be.success;",
                                  "});",
                                  "",
                                  "function isNumeric(n) {",
                                  "  return !isNaN(parseFloat(n)) && isFinite(n);",
                                  "}"
                                ]
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{customer-access-token}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "POST",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "{}"
                            },
                            "url": {
                              "raw": "{{domain}}{{endpoint_carts}}",
                              "host": [
                                "{{domain}}{{endpoint_carts}}"
                              ]
                            },
                            "description": "Creates a customer cart"
                          },
                          "response": []
                        },
                        {
                          "name": "Add Coupon + Configurable",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "type": "text/javascript",
                                "exec": [
                                  "pm.test('Cannot add coupon before items are in cart', function(){",
                                  "    pm.response.to.have.status(400);",
                                  "});"
                                ]
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{customer-access-token}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "POST",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "[\n  {\n    \t\"coupon\": {\n\t\t    \"couponCode\":\"Register10\"\n\t\t}\n  },\n  {\n    \t\"product\": {\n\t\t    \"product_id\": \"431\",\n\t\t    \"qty\": 1,\n\t\t    \"super_attribute\": {\n\t\t\t      \"92\": \"20\",\n\t\t\t      \"186\": \"102\"\n\t\t\t}\n\t\t}\n  }\n]"
                            },
                            "url": {
                              "raw": "{{domain}}{{endpoint_carts_id_items}}",
                              "host": [
                                "{{domain}}{{endpoint_carts_id_items}}"
                              ]
                            },
                            "description": "ID: 431\nType: Configurable\nName: Ann Ankle Boot\nSKU: aws005c\nURL: borgha-ankle-boot\nPrice: $470.00\nCategory: Shoes\n\n\nSub-Products:\nID: 345 | 346 | 347 | 348 | 349\nName: Ann Ankle Boot\nSKU: aws005 | aws006 | aws007 | aws008 | aws009\nColor (ID: 92): Black (ID: 20)\nShoe size (ID: 186): 6 (ID: 102) | 7 (ID: 101) | 8 (ID: 100) | 9 (ID: 99) | 10 (ID: 98)"
                          },
                          "response": []
                        }
                      ],
                      "_postman_isSubFolder": true
                    }
                  ],
                  "description": "Run after the add tests",
                  "_postman_isSubFolder": true
                },
                {
                  "name": "Delete",
                  "item": [
                    {
                      "name": "Via remove all",
                      "item": [
                        {
                          "name": "/carts: customer",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "type": "text/javascript",
                                "exec": [
                                  "var jsonData = pm.response.json();",
                                  "if (responseCode.code === 200 && jsonData.hasOwnProperty('cartId')) {",
                                  "    pm.environment.set(\"cartId\", jsonData.cartId);",
                                  "    tests[\"Cart ID is returned\"] = isNumeric(jsonData.cartId) === true;",
                                  "} else {",
                                  "    tests[\"Cart ID is not returned\"] = false;",
                                  "}",
                                  "",
                                  "pm.test('Successfull call', function(){",
                                  "    pm.response.to.be.success;",
                                  "});",
                                  "",
                                  "function isNumeric(n) {",
                                  "  return !isNaN(parseFloat(n)) && isFinite(n);",
                                  "}"
                                ]
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{customer-access-token}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "POST",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "{}"
                            },
                            "url": {
                              "raw": "{{domain}}{{endpoint_carts}}",
                              "host": [
                                "{{domain}}{{endpoint_carts}}"
                              ]
                            },
                            "description": "Creates a customer cart"
                          },
                          "response": []
                        },
                        {
                          "name": "Add Configurable: Boots",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "type": "text/javascript",
                                "exec": [
                                  "pm.test('Successfull call', function(){",
                                  "    pm.response.to.be.success;",
                                  "});"
                                ]
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{customer-access-token}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "POST",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "[\n  {\n    \t\"product\": {\n\t\t    \"product_id\": \"431\",\n\t\t    \"qty\": 1,\n\t\t    \"super_attribute\": {\n\t\t\t      \"92\": \"20\",\n\t\t\t      \"186\": \"102\"\n\t\t\t}\n\t\t}\n  }\n]"
                            },
                            "url": {
                              "raw": "{{domain}}{{endpoint_carts_id_items}}",
                              "host": [
                                "{{domain}}{{endpoint_carts_id_items}}"
                              ]
                            },
                            "description": "ID: 431\nType: Configurable\nName: Ann Ankle Boot\nSKU: aws005c\nURL: borgha-ankle-boot\nPrice: $470.00\nCategory: Shoes\n\n\nSub-Products:\nID: 345 | 346 | 347 | 348 | 349\nName: Ann Ankle Boot\nSKU: aws005 | aws006 | aws007 | aws008 | aws009\nColor (ID: 92): Black (ID: 20)\nShoe size (ID: 186): 6 (ID: 102) | 7 (ID: 101) | 8 (ID: 100) | 9 (ID: 99) | 10 (ID: 98)"
                          },
                          "response": []
                        },
                        {
                          "name": "Check no discount",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "type": "text/javascript",
                                "exec": [
                                  "pm.test(\"Status code is 200\", function () {",
                                  "    pm.response.to.have.status(200);",
                                  "});",
                                  "",
                                  "pm.test(\"Coupon code not set\", function () {",
                                  "    var jsonData = pm.response.json();",
                                  "    pm.expect(jsonData.coupon_code).to.eql(null);",
                                  "});"
                                ]
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{customer-access-token}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "GET",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "{}"
                            },
                            "url": {
                              "raw": "{{domain}}{{endpoint_carts}}/{{cartId}}",
                              "host": [
                                "{{domain}}{{endpoint_carts}}"
                              ],
                              "path": [
                                "{{cartId}}"
                              ]
                            }
                          },
                          "response": []
                        },
                        {
                          "name": "Add 10 flat off coupon",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "type": "text/javascript",
                                "exec": [
                                  "pm.test('Successfull call', function(){",
                                  "    pm.response.to.be.success;",
                                  "});"
                                ]
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{customer-access-token}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "POST",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "[\n  {\n    \t\"coupon\": {\n\t\t    \"couponCode\":\"Register10\"\n\t\t}\n  }\n]"
                            },
                            "url": {
                              "raw": "{{domain}}{{endpoint_carts_id_items}}",
                              "host": [
                                "{{domain}}{{endpoint_carts_id_items}}"
                              ]
                            },
                            "description": "Condition for coupon is Group: General, subtotal: 200+"
                          },
                          "response": []
                        },
                        {
                          "name": "Check Register10 exists",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "type": "text/javascript",
                                "exec": [
                                  "pm.test(\"Status code is 200\", function () {",
                                  "    pm.response.to.have.status(200);",
                                  "});",
                                  "",
                                  "pm.test(\"Register10 code exists\", function () {",
                                  "    var jsonData = pm.response.json();",
                                  "    pm.expect(jsonData.coupon_code).to.eql(\"Register10\");",
                                  "});"
                                ]
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{customer-access-token}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "GET",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "{}"
                            },
                            "url": {
                              "raw": "{{domain}}{{endpoint_carts}}/{{cartId}}",
                              "host": [
                                "{{domain}}{{endpoint_carts}}"
                              ],
                              "path": [
                                "{{cartId}}"
                              ]
                            }
                          },
                          "response": []
                        },
                        {
                          "name": "Remove all items",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "type": "text/javascript",
                                "exec": [
                                  "pm.test('Successfull call', function(){",
                                  "    pm.response.to.be.success;",
                                  "});"
                                ]
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{customer-access-token}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "DELETE",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "{}"
                            },
                            "url": {
                              "raw": "{{domain}}{{endpoint_carts_id_items}}",
                              "host": [
                                "{{domain}}{{endpoint_carts_id_items}}"
                              ]
                            }
                          },
                          "response": []
                        },
                        {
                          "name": "Check no coupon/prods",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "type": "text/javascript",
                                "exec": [
                                  "var jsonData = pm.response.json();",
                                  "pm.test(\"Status code is 200\", function () {",
                                  "    pm.response.to.have.status(200);",
                                  "});",
                                  "",
                                  "pm.test(\"Coupon code not set\", function () {",
                                  "    pm.expect(jsonData.coupon_code).to.eql(null);",
                                  "});",
                                  "",
                                  "pm.test(\"No items in cart\", function () {",
                                  "    pm.expect(jsonData.items).to.be.empty;",
                                  "});",
                                  "",
                                  ""
                                ]
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{customer-access-token}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "GET",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "{}"
                            },
                            "url": {
                              "raw": "{{domain}}{{endpoint_carts}}/{{cartId}}",
                              "host": [
                                "{{domain}}{{endpoint_carts}}"
                              ],
                              "path": [
                                "{{cartId}}"
                              ]
                            }
                          },
                          "response": []
                        }
                      ],
                      "_postman_isSubFolder": true
                    },
                    {
                      "name": "Via query",
                      "item": [
                        {
                          "name": "/carts: customer",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "type": "text/javascript",
                                "exec": [
                                  "var jsonData = pm.response.json();",
                                  "if (responseCode.code === 200 && jsonData.hasOwnProperty('cartId')) {",
                                  "    pm.environment.set(\"cartId\", jsonData.cartId);",
                                  "    tests[\"Cart ID is returned\"] = isNumeric(jsonData.cartId) === true;",
                                  "} else {",
                                  "    tests[\"Cart ID is not returned\"] = false;",
                                  "}",
                                  "",
                                  "pm.test('Successfull call', function(){",
                                  "    pm.response.to.be.success;",
                                  "});",
                                  "",
                                  "function isNumeric(n) {",
                                  "  return !isNaN(parseFloat(n)) && isFinite(n);",
                                  "}"
                                ]
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{customer-access-token}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "POST",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "{}"
                            },
                            "url": {
                              "raw": "{{domain}}{{endpoint_carts}}",
                              "host": [
                                "{{domain}}{{endpoint_carts}}"
                              ]
                            },
                            "description": "Creates a customer cart"
                          },
                          "response": []
                        },
                        {
                          "name": "Add Configurable: Boots",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "type": "text/javascript",
                                "exec": [
                                  "pm.test('Successfull call', function(){",
                                  "    pm.response.to.be.success;",
                                  "});"
                                ]
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{customer-access-token}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "POST",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "[\n  {\n    \t\"product\": {\n\t\t    \"product_id\": \"431\",\n\t\t    \"qty\": 1,\n\t\t    \"super_attribute\": {\n\t\t\t      \"92\": \"20\",\n\t\t\t      \"186\": \"102\"\n\t\t\t}\n\t\t}\n  }\n]"
                            },
                            "url": {
                              "raw": "{{domain}}{{endpoint_carts_id_items}}",
                              "host": [
                                "{{domain}}{{endpoint_carts_id_items}}"
                              ]
                            },
                            "description": "ID: 431\nType: Configurable\nName: Ann Ankle Boot\nSKU: aws005c\nURL: borgha-ankle-boot\nPrice: $470.00\nCategory: Shoes\n\n\nSub-Products:\nID: 345 | 346 | 347 | 348 | 349\nName: Ann Ankle Boot\nSKU: aws005 | aws006 | aws007 | aws008 | aws009\nColor (ID: 92): Black (ID: 20)\nShoe size (ID: 186): 6 (ID: 102) | 7 (ID: 101) | 8 (ID: 100) | 9 (ID: 99) | 10 (ID: 98)"
                          },
                          "response": []
                        },
                        {
                          "name": "Check no discount",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "type": "text/javascript",
                                "exec": [
                                  "pm.test(\"Status code is 200\", function () {",
                                  "    pm.response.to.have.status(200);",
                                  "});",
                                  "",
                                  "pm.test(\"Coupon code not set\", function () {",
                                  "    var jsonData = pm.response.json();",
                                  "    pm.expect(jsonData.coupon_code).to.eql(null);",
                                  "});"
                                ]
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{customer-access-token}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "GET",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "{}"
                            },
                            "url": {
                              "raw": "{{domain}}{{endpoint_carts}}/{{cartId}}",
                              "host": [
                                "{{domain}}{{endpoint_carts}}"
                              ],
                              "path": [
                                "{{cartId}}"
                              ]
                            }
                          },
                          "response": []
                        },
                        {
                          "name": "Add 10 flat off coupon",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "type": "text/javascript",
                                "exec": [
                                  "pm.test('Successfull call', function(){",
                                  "    pm.response.to.be.success;",
                                  "});"
                                ]
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{customer-access-token}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "POST",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "[\n  {\n    \t\"coupon\": {\n\t\t    \"couponCode\":\"Register10\"\n\t\t}\n  }\n]"
                            },
                            "url": {
                              "raw": "{{domain}}{{endpoint_carts_id_items}}",
                              "host": [
                                "{{domain}}{{endpoint_carts_id_items}}"
                              ]
                            },
                            "description": "Condition for coupon is Group: General, subtotal: 200+"
                          },
                          "response": []
                        },
                        {
                          "name": "Check Register10 exists",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "type": "text/javascript",
                                "exec": [
                                  "pm.test(\"Status code is 200\", function () {",
                                  "    pm.response.to.have.status(200);",
                                  "});",
                                  "",
                                  "pm.test(\"Register10 code exists\", function () {",
                                  "    var jsonData = pm.response.json();",
                                  "    pm.expect(jsonData.coupon_code).to.eql(\"Register10\");",
                                  "});"
                                ]
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{customer-access-token}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "GET",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "{}"
                            },
                            "url": {
                              "raw": "{{domain}}{{endpoint_carts}}/{{cartId}}",
                              "host": [
                                "{{domain}}{{endpoint_carts}}"
                              ],
                              "path": [
                                "{{cartId}}"
                              ]
                            }
                          },
                          "response": []
                        },
                        {
                          "name": "CartItemIds > variable",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "type": "text/javascript",
                                "exec": [
                                  "var jsonData = pm.response.json();",
                                  "pm.test(\"Status code is 200\", function () {",
                                  "    pm.response.to.have.status(200);",
                                  "});",
                                  "",
                                  "pm.test(\"Register10 code exists\", function () {",
                                  "    var jsonData = pm.response.json();",
                                  "    pm.expect(jsonData.coupon_code).to.eql(\"Register10\");",
                                  "});",
                                  "",
                                  "if (responseCode.code === 200 && jsonData.items.length > 0) {",
                                  "    var items = '';",
                                  "    jsonData.items.forEach(function(item) {",
                                  "        items += item.item_id + ',';",
                                  "    });",
                                  "    pm.environment.set(\"cart_items_to_remove\", items);",
                                  "} else {",
                                  "    tests[\"No cart items returned\"] = false;",
                                  "}"
                                ]
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{customer-access-token}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "GET",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "{}"
                            },
                            "url": {
                              "raw": "{{domain}}{{endpoint_carts}}/{{cartId}}",
                              "host": [
                                "{{domain}}{{endpoint_carts}}"
                              ],
                              "path": [
                                "{{cartId}}"
                              ]
                            }
                          },
                          "response": []
                        },
                        {
                          "name": "Add simple product",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "type": "text/javascript",
                                "exec": [
                                  "pm.test('Successfull call', function(){",
                                  "    pm.response.to.be.success;",
                                  "});"
                                ]
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{customer-access-token}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "POST",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "[\n  {\n    \"product\": {\n\t    \"product_id\": \"554\",\n\t    \"qty\": 1\n\t  }\n  }\n]"
                            },
                            "url": {
                              "raw": "{{domain}}{{endpoint_carts_id_items}}",
                              "host": [
                                "{{domain}}{{endpoint_carts_id_items}}"
                              ]
                            },
                            "description": "Name: Swiss Movement Sports Watch, Category: Jewelry, Price: $500.00"
                          },
                          "response": []
                        },
                        {
                          "name": "Remove config + coupon",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "type": "text/javascript",
                                "exec": [
                                  "pm.test('Successfull call', function(){",
                                  "    pm.response.to.be.success;",
                                  "});"
                                ]
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{customer-access-token}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "DELETE",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": ""
                            },
                            "url": {
                              "raw": "{{domain}}{{endpoint_carts_id_items}}?cartItemIds={{cart_items_to_remove}}COUPON_XXX",
                              "host": [
                                "{{domain}}{{endpoint_carts_id_items}}"
                              ],
                              "query": [
                                {
                                  "key": "cartItemIds",
                                  "value": "{{cart_items_to_remove}}COUPON_XXX"
                                }
                              ]
                            },
                            "description": "Removes configurable product + the coupon set. Leaves the Simple product intact."
                          },
                          "response": []
                        },
                        {
                          "name": "Check discount/products",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "type": "text/javascript",
                                "exec": [
                                  "var jsonData = pm.response.json();",
                                  "pm.test(\"Status code is 200\", function () {",
                                  "    pm.response.to.have.status(200);",
                                  "});",
                                  "",
                                  "pm.test(\"Coupon code not set\", function () {",
                                  "    pm.expect(jsonData.coupon_code).to.eql(null);",
                                  "});",
                                  "",
                                  "pm.test(\"Still have the 544:Watch product in cart\", function () {",
                                  "    pm.expect(jsonData.items[0].product_id).to.be.eql(\"554\");",
                                  "});",
                                  "",
                                  ""
                                ]
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{customer-access-token}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "GET",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "{}"
                            },
                            "url": {
                              "raw": "{{domain}}{{endpoint_carts}}/{{cartId}}",
                              "host": [
                                "{{domain}}{{endpoint_carts}}"
                              ],
                              "path": [
                                "{{cartId}}"
                              ]
                            },
                            "description": "Checks that there is no coupon applied and still have items in cart"
                          },
                          "response": []
                        }
                      ],
                      "_postman_isSubFolder": true
                    }
                  ],
                  "_postman_isSubFolder": true
                }
              ],
              "_postman_isSubFolder": true
            },
            {
              "name": "Guest",
              "item": [
                {
                  "name": "Update",
                  "item": [
                    {
                      "name": "Product first",
                      "item": [
                        {
                          "name": "/carts: guest",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "type": "text/javascript",
                                "exec": [
                                  "var jsonData = pm.response.json();",
                                  "if (responseCode.code === 200 && jsonData.hasOwnProperty('cartId')) {",
                                  "    pm.environment.set(\"cartId\", jsonData.cartId);",
                                  "    tests[\"Cart ID is returned\"] = isNumeric(jsonData.cartId) === true;",
                                  "} else {",
                                  "    tests[\"Cart ID is not returned\"] = false;",
                                  "}",
                                  "",
                                  "pm.test('Successfull call', function(){",
                                  "    pm.response.to.be.success;",
                                  "});",
                                  "",
                                  "function isNumeric(n) {",
                                  "  return !isNaN(parseFloat(n)) && isFinite(n);",
                                  "}"
                                ]
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{guest-access-token}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "POST",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "{}"
                            },
                            "url": {
                              "raw": "{{domain}}{{endpoint_carts}}",
                              "host": [
                                "{{domain}}{{endpoint_carts}}"
                              ]
                            },
                            "description": "Creates a guest cart and assigns the local cartId variable from the one returned"
                          },
                          "response": []
                        },
                        {
                          "name": "Add config + coupon",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "type": "text/javascript",
                                "exec": [
                                  "pm.test('Successfull call', function(){",
                                  "    pm.response.to.be.success;",
                                  "});"
                                ]
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{guest-access-token}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "POST",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "[\n  {\n\t    \"product\": {\n\t\t    \"product_id\": \"422\",\n\t\t    \"qty\": 1,\n\t\t    \"super_attribute\": {\n\t\t\t      \"92\": \"17\",\n\t\t\t      \"180\": \"76\"\n\t\t\t    }\n\t\t}\n  },\n  {\n    \t\"coupon\": {\n\t\t    \"couponCode\":\"evening15\"\n\t\t}\n  }\n]"
                            },
                            "url": {
                              "raw": "{{domain}}{{endpoint_carts_id_items}}",
                              "host": [
                                "{{domain}}{{endpoint_carts_id_items}}"
                              ]
                            },
                            "description": "Name: Essex Pencil Skirt; SKU: wsd000c; Category: Dresses & Skirts; Price: $185.00\nSub-Product:"
                          },
                          "response": []
                        },
                        {
                          "name": "Check code + product",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "type": "text/javascript",
                                "exec": [
                                  "var jsonData = pm.response.json();",
                                  "pm.test(\"Status code is 200\", function () {",
                                  "    pm.response.to.have.status(200);",
                                  "});",
                                  "",
                                  "pm.test(\"evening15 code exists\", function () {",
                                  "    pm.expect(jsonData.coupon_code).to.eql(\"evening15\");",
                                  "});",
                                  "",
                                  "pm.test(\"Configurable product is in cart\", function () {",
                                  "    pm.expect(jsonData.items.length).to.be.eql(2);",
                                  "});"
                                ]
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{guest-access-token}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "GET",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "{}"
                            },
                            "url": {
                              "raw": "{{domain}}{{endpoint_carts}}/{{cartId}}",
                              "host": [
                                "{{domain}}{{endpoint_carts}}"
                              ],
                              "path": [
                                "{{cartId}}"
                              ]
                            }
                          },
                          "response": []
                        }
                      ],
                      "_postman_isSubFolder": true
                    },
                    {
                      "name": "Product last",
                      "item": [
                        {
                          "name": "/carts: guest",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "type": "text/javascript",
                                "exec": [
                                  "var jsonData = pm.response.json();",
                                  "if (responseCode.code === 200 && jsonData.hasOwnProperty('cartId')) {",
                                  "    pm.environment.set(\"cartId\", jsonData.cartId);",
                                  "    tests[\"Cart ID is returned\"] = isNumeric(jsonData.cartId) === true;",
                                  "} else {",
                                  "    tests[\"Cart ID is not returned\"] = false;",
                                  "}",
                                  "",
                                  "pm.test('Successfull call', function(){",
                                  "    pm.response.to.be.success;",
                                  "});",
                                  "",
                                  "function isNumeric(n) {",
                                  "  return !isNaN(parseFloat(n)) && isFinite(n);",
                                  "}"
                                ]
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{guest-access-token}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "POST",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "{}"
                            },
                            "url": {
                              "raw": "{{domain}}{{endpoint_carts}}",
                              "host": [
                                "{{domain}}{{endpoint_carts}}"
                              ]
                            },
                            "description": "Creates a guest cart and assigns the local cartId variable from the one returned"
                          },
                          "response": []
                        },
                        {
                          "name": "Add coupon + config",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "type": "text/javascript",
                                "exec": [
                                  "pm.test('Cannot add coupon before items are in cart', function(){",
                                  "    pm.response.to.have.status(400);",
                                  "});"
                                ]
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{guest-access-token}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "POST",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "[\n  {\n    \t\"coupon\": {\n\t\t    \"couponCode\":\"evening15\"\n\t\t}\n  },\n  {\n\t    \"product\": {\n\t\t    \"product_id\": \"422\",\n\t\t    \"qty\": 1,\n\t\t    \"super_attribute\": {\n\t\t\t      \"92\": \"17\",\n\t\t\t      \"180\": \"76\"\n\t\t\t    }\n\t\t}\n  }\n]"
                            },
                            "url": {
                              "raw": "{{domain}}{{endpoint_carts_id_items}}",
                              "host": [
                                "{{domain}}{{endpoint_carts_id_items}}"
                              ]
                            },
                            "description": "Name: Essex Pencil Skirt; SKU: wsd000c; Category: Dresses & Skirts; Price: $185.00\nSub-Product:"
                          },
                          "response": []
                        }
                      ],
                      "_postman_isSubFolder": true
                    }
                  ],
                  "_postman_isSubFolder": true
                },
                {
                  "name": "Delete",
                  "item": [
                    {
                      "name": "Via Empty All",
                      "item": [
                        {
                          "name": "/carts: guest",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "type": "text/javascript",
                                "exec": [
                                  "var jsonData = pm.response.json();",
                                  "if (responseCode.code === 200 && jsonData.hasOwnProperty('cartId')) {",
                                  "    pm.environment.set(\"cartId\", jsonData.cartId);",
                                  "    tests[\"Cart ID is returned\"] = isNumeric(jsonData.cartId) === true;",
                                  "} else {",
                                  "    tests[\"Cart ID is not returned\"] = false;",
                                  "}",
                                  "",
                                  "pm.test('Successfull call', function(){",
                                  "    pm.response.to.be.success;",
                                  "});",
                                  "",
                                  "function isNumeric(n) {",
                                  "  return !isNaN(parseFloat(n)) && isFinite(n);",
                                  "}"
                                ]
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{guest-access-token}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "POST",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "{}"
                            },
                            "url": {
                              "raw": "{{domain}}{{endpoint_carts}}",
                              "host": [
                                "{{domain}}{{endpoint_carts}}"
                              ]
                            },
                            "description": "Creates a guest cart and assigns the local cartId variable from the one returned"
                          },
                          "response": []
                        },
                        {
                          "name": "Add Configurable: Skirt",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "type": "text/javascript",
                                "exec": [
                                  "pm.test('Successfull call', function(){",
                                  "    pm.response.to.be.success;",
                                  "});"
                                ]
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{guest-access-token}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "POST",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "[\n  {\n\t    \"product\": {\n\t\t    \"product_id\": \"422\",\n\t\t    \"qty\": 1,\n\t\t    \"super_attribute\": {\n\t\t\t      \"92\": \"17\",\n\t\t\t      \"180\": \"76\"\n\t\t\t    }\n\t\t}\n  }\n]"
                            },
                            "url": {
                              "raw": "{{domain}}{{endpoint_carts_id_items}}",
                              "host": [
                                "{{domain}}{{endpoint_carts_id_items}}"
                              ]
                            },
                            "description": "ID: 422\nType: Configurable\nName: Essex Pencil Skirt\nSKU: wsd000c\nCategory: Dresses & Skirts\nPrice: $185.00\n\nSub-Products:\nID: 297 | 298 | 299 | 300 | 301\nName: Essex Pencil Skirt\nSKU: wsd000 | wsd001 | wsd002 | wsd003 | wsd004\nColor (ID: 92): Charcoal (ID: 17)\nSize (ID: 180): 2 (ID: 76) | 4 (ID: 75) | 6 (ID: 74) | 8 (ID: 73) | 10 (ID: 72)"
                          },
                          "response": []
                        },
                        {
                          "name": "Check no discount",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "type": "text/javascript",
                                "exec": [
                                  "var jsonData = pm.response.json();",
                                  "",
                                  "pm.test(\"Status code is 200\", function () {",
                                  "    pm.response.to.have.status(200);",
                                  "});",
                                  "",
                                  "pm.test(\"Coupon code not set\", function () {",
                                  "    pm.expect(jsonData.coupon_code).to.eql(null);",
                                  "});"
                                ]
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{guest-access-token}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "GET",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "{}"
                            },
                            "url": {
                              "raw": "{{domain}}{{endpoint_carts}}/{{cartId}}",
                              "host": [
                                "{{domain}}{{endpoint_carts}}"
                              ],
                              "path": [
                                "{{cartId}}"
                              ]
                            }
                          },
                          "response": []
                        },
                        {
                          "name": "Add 15 flat off coupon",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "type": "text/javascript",
                                "exec": [
                                  "pm.test('Successfull call', function(){",
                                  "    pm.response.to.be.success;",
                                  "});"
                                ]
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{guest-access-token}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "POST",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "[\n  {\n    \t\"coupon\": {\n\t\t    \"couponCode\":\"evening15\"\n\t\t}\n  }\n]"
                            },
                            "url": {
                              "raw": "{{domain}}{{endpoint_carts_id_items}}",
                              "host": [
                                "{{domain}}{{endpoint_carts_id_items}}"
                              ]
                            },
                            "description": "Condition for coupon is:\nGroup: Not-Logged-In, General, VIP, Private Sales Member; \nCategories: Dresses & Skirts, Dresses;"
                          },
                          "response": []
                        },
                        {
                          "name": "Check evening15 exists",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "type": "text/javascript",
                                "exec": [
                                  "pm.test(\"Status code is 200\", function () {",
                                  "    pm.response.to.have.status(200);",
                                  "});",
                                  "",
                                  "pm.test(\"evening15 code exists\", function () {",
                                  "    var jsonData = pm.response.json();",
                                  "    pm.expect(jsonData.coupon_code).to.eql(\"evening15\");",
                                  "});"
                                ]
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{guest-access-token}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "GET",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "{}"
                            },
                            "url": {
                              "raw": "{{domain}}{{endpoint_carts}}/{{cartId}}",
                              "host": [
                                "{{domain}}{{endpoint_carts}}"
                              ],
                              "path": [
                                "{{cartId}}"
                              ]
                            }
                          },
                          "response": []
                        },
                        {
                          "name": "Remove all items",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "type": "text/javascript",
                                "exec": [
                                  "pm.test('Successfull call', function(){",
                                  "    pm.response.to.be.success;",
                                  "});"
                                ]
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{guest-access-token}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "DELETE",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "{}"
                            },
                            "url": {
                              "raw": "{{domain}}{{endpoint_carts_id_items}}",
                              "host": [
                                "{{domain}}{{endpoint_carts_id_items}}"
                              ]
                            }
                          },
                          "response": []
                        },
                        {
                          "name": "Check no prod + coupon",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "type": "text/javascript",
                                "exec": [
                                  "var jsonData = pm.response.json();",
                                  "pm.test(\"Status code is 200\", function () {",
                                  "    pm.response.to.have.status(200);",
                                  "});",
                                  "",
                                  "pm.test(\"Coupon code not set\", function () {",
                                  "    pm.expect(jsonData.coupon_code).to.eql(null);",
                                  "});",
                                  "",
                                  "pm.test(\"No items in cart\", function () {",
                                  "    pm.expect(jsonData.items).to.be.empty;",
                                  "});"
                                ]
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{guest-access-token}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "GET",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "{}"
                            },
                            "url": {
                              "raw": "{{domain}}{{endpoint_carts}}/{{cartId}}",
                              "host": [
                                "{{domain}}{{endpoint_carts}}"
                              ],
                              "path": [
                                "{{cartId}}"
                              ]
                            }
                          },
                          "response": []
                        }
                      ],
                      "_postman_isSubFolder": true
                    },
                    {
                      "name": "Via query",
                      "item": [
                        {
                          "name": "/carts: guest",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "type": "text/javascript",
                                "exec": [
                                  "var jsonData = pm.response.json();",
                                  "if (responseCode.code === 200 && jsonData.hasOwnProperty('cartId')) {",
                                  "    pm.environment.set(\"cartId\", jsonData.cartId);",
                                  "    tests[\"Cart ID is returned\"] = isNumeric(jsonData.cartId) === true;",
                                  "} else {",
                                  "    tests[\"Cart ID is not returned\"] = false;",
                                  "}",
                                  "",
                                  "pm.test('Successfull call', function(){",
                                  "    pm.response.to.be.success;",
                                  "});",
                                  "",
                                  "function isNumeric(n) {",
                                  "  return !isNaN(parseFloat(n)) && isFinite(n);",
                                  "}"
                                ]
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{guest-access-token}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "POST",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "{}"
                            },
                            "url": {
                              "raw": "{{domain}}{{endpoint_carts}}",
                              "host": [
                                "{{domain}}{{endpoint_carts}}"
                              ]
                            },
                            "description": "Creates a guest cart and assigns the local cartId variable from the one returned"
                          },
                          "response": []
                        },
                        {
                          "name": "Add Configurable: Skirt",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "type": "text/javascript",
                                "exec": [
                                  "pm.test('Successfull call', function(){",
                                  "    pm.response.to.be.success;",
                                  "});"
                                ]
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{guest-access-token}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "POST",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "[\n  {\n\t    \"product\": {\n\t\t    \"product_id\": \"422\",\n\t\t    \"qty\": 1,\n\t\t    \"super_attribute\": {\n\t\t\t      \"92\": \"17\",\n\t\t\t      \"180\": \"76\"\n\t\t\t    }\n\t\t}\n  }\n]"
                            },
                            "url": {
                              "raw": "{{domain}}{{endpoint_carts_id_items}}",
                              "host": [
                                "{{domain}}{{endpoint_carts_id_items}}"
                              ]
                            },
                            "description": "ID: 422\nType: Configurable\nName: Essex Pencil Skirt\nSKU: wsd000c\nCategory: Dresses & Skirts\nPrice: $185.00\n\nSub-Products:\nID: 297 | 298 | 299 | 300 | 301\nName: Essex Pencil Skirt\nSKU: wsd000 | wsd001 | wsd002 | wsd003 | wsd004\nColor (ID: 92): Charcoal (ID: 17)\nSize (ID: 180): 2 (ID: 76) | 4 (ID: 75) | 6 (ID: 74) | 8 (ID: 73) | 10 (ID: 72)"
                          },
                          "response": []
                        },
                        {
                          "name": "Check no discount",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "type": "text/javascript",
                                "exec": [
                                  "var jsonData = pm.response.json();",
                                  "",
                                  "pm.test(\"Status code is 200\", function () {",
                                  "    pm.response.to.have.status(200);",
                                  "});",
                                  "",
                                  "pm.test(\"Coupon code not set\", function () {",
                                  "    pm.expect(jsonData.coupon_code).to.eql(null);",
                                  "});"
                                ]
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{guest-access-token}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "GET",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "{}"
                            },
                            "url": {
                              "raw": "{{domain}}{{endpoint_carts}}/{{cartId}}",
                              "host": [
                                "{{domain}}{{endpoint_carts}}"
                              ],
                              "path": [
                                "{{cartId}}"
                              ]
                            }
                          },
                          "response": []
                        },
                        {
                          "name": "Add 15 flat off coupon",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "type": "text/javascript",
                                "exec": [
                                  "pm.test('Successfull call', function(){",
                                  "    pm.response.to.be.success;",
                                  "});"
                                ]
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{guest-access-token}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "POST",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "[\n  {\n    \t\"coupon\": {\n\t\t    \"couponCode\":\"evening15\"\n\t\t}\n  }\n]"
                            },
                            "url": {
                              "raw": "{{domain}}{{endpoint_carts_id_items}}",
                              "host": [
                                "{{domain}}{{endpoint_carts_id_items}}"
                              ]
                            },
                            "description": "Condition for coupon is:\nGroup: Not-Logged-In, General, VIP, Private Sales Member; \nCategories: Dresses & Skirts, Dresses;"
                          },
                          "response": []
                        },
                        {
                          "name": "CartItemIds > variable",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "type": "text/javascript",
                                "exec": [
                                  "var jsonData = pm.response.json();",
                                  "pm.test(\"Status code is 200\", function () {",
                                  "    pm.response.to.have.status(200);",
                                  "});",
                                  "",
                                  "pm.test(\"evening15 code exists\", function () {",
                                  "    pm.expect(jsonData.coupon_code).to.eql(\"evening15\");",
                                  "});",
                                  "",
                                  "if (responseCode.code === 200 && jsonData.items.length > 0) {",
                                  "    var items = '';",
                                  "    jsonData.items.forEach(function(item) {",
                                  "        items += item.item_id + ',';",
                                  "    });",
                                  "    pm.environment.set(\"cart_items_to_remove\", items);",
                                  "} else {",
                                  "    tests[\"No cart items returned\"] = false;",
                                  "}"
                                ]
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{guest-access-token}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "GET",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "{}"
                            },
                            "url": {
                              "raw": "{{domain}}{{endpoint_carts}}/{{cartId}}",
                              "host": [
                                "{{domain}}{{endpoint_carts}}"
                              ],
                              "path": [
                                "{{cartId}}"
                              ]
                            }
                          },
                          "response": []
                        },
                        {
                          "name": "Add simple product",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "type": "text/javascript",
                                "exec": [
                                  "pm.test('Successfull call', function(){",
                                  "    pm.response.to.be.success;",
                                  "});"
                                ]
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{guest-access-token}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "POST",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "[\n  {\n    \"product\": {\n\t    \"product_id\": \"554\",\n\t    \"qty\": 1\n\t  }\n  }\n]"
                            },
                            "url": {
                              "raw": "{{domain}}{{endpoint_carts_id_items}}",
                              "host": [
                                "{{domain}}{{endpoint_carts_id_items}}"
                              ]
                            },
                            "description": "Name: Swiss Movement Sports Watch, Category: Jewelry, Price: $500.00"
                          },
                          "response": []
                        },
                        {
                          "name": "Remove config + coupon",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "type": "text/javascript",
                                "exec": [
                                  "pm.test('Successfull call', function(){",
                                  "    pm.response.to.be.success;",
                                  "});"
                                ]
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{guest-access-token}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "DELETE",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": ""
                            },
                            "url": {
                              "raw": "{{domain}}{{endpoint_carts_id_items}}?cartItemIds={{cart_items_to_remove}}COUPON_XXX",
                              "host": [
                                "{{domain}}{{endpoint_carts_id_items}}"
                              ],
                              "query": [
                                {
                                  "key": "cartItemIds",
                                  "value": "{{cart_items_to_remove}}COUPON_XXX"
                                }
                              ]
                            },
                            "description": "Removes configurable product + the coupon set. Leaves the Simple product intact."
                          },
                          "response": []
                        },
                        {
                          "name": "Check discount/products",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "type": "text/javascript",
                                "exec": [
                                  "var jsonData = pm.response.json();",
                                  "pm.test(\"Status code is 200\", function () {",
                                  "    pm.response.to.have.status(200);",
                                  "});",
                                  "",
                                  "pm.test(\"Coupon code not set\", function () {",
                                  "    pm.expect(jsonData.coupon_code).to.eql(null);",
                                  "});",
                                  "",
                                  "pm.test(\"Still have the 544:Watch product in cart\", function () {",
                                  "    pm.expect(jsonData.items[0].product_id).to.be.eql(\"554\");",
                                  "});",
                                  "",
                                  ""
                                ]
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{guest-access-token}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "GET",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "{}"
                            },
                            "url": {
                              "raw": "{{domain}}{{endpoint_carts}}/{{cartId}}",
                              "host": [
                                "{{domain}}{{endpoint_carts}}"
                              ],
                              "path": [
                                "{{cartId}}"
                              ]
                            },
                            "description": "Checks that there is no coupon applied and still have items in cart"
                          },
                          "response": []
                        }
                      ],
                      "_postman_isSubFolder": true
                    }
                  ],
                  "_postman_isSubFolder": true
                }
              ],
              "_postman_isSubFolder": true
            }
          ],
          "description": "Adds/Removes items & coupons in one call",
          "_postman_isSubFolder": true
        }
      ]
    },
    {
      "name": "/v2/carts/:id/items/:itemId",
      "item": [
        {
          "name": "Product",
          "item": [
            {
              "name": "Customer",
              "item": [
                {
                  "name": "Update",
                  "item": [
                    {
                      "name": "Simple",
                      "item": [
                        {
                          "name": "/carts: customer",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "type": "text/javascript",
                                "exec": [
                                  "var jsonData = pm.response.json();",
                                  "if (responseCode.code === 200 && jsonData.hasOwnProperty('cartId')) {",
                                  "    pm.environment.set(\"cartId\", jsonData.cartId);",
                                  "    tests[\"Cart ID is returned\"] = isNumeric(jsonData.cartId) === true;",
                                  "} else {",
                                  "    tests[\"Cart ID is not returned\"] = false;",
                                  "}",
                                  "",
                                  "pm.test('Successfull call', function(){",
                                  "    pm.response.to.be.success;",
                                  "});",
                                  "",
                                  "function isNumeric(n) {",
                                  "  return !isNaN(parseFloat(n)) && isFinite(n);",
                                  "}"
                                ]
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{customer-access-token}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "POST",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "{}"
                            },
                            "url": {
                              "raw": "{{domain}}{{endpoint_carts}}",
                              "host": [
                                "{{domain}}{{endpoint_carts}}"
                              ]
                            },
                            "description": "Creates a customer cart"
                          },
                          "response": []
                        },
                        {
                          "name": "Add Simple",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "type": "text/javascript",
                                "exec": [
                                  "pm.test('Successfull call', function(){",
                                  "    pm.response.to.be.success;",
                                  "});"
                                ]
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{customer-access-token}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "POST",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "[\n  {\n    \"product\": {\n\t    \"product_id\": \"554\",\n\t    \"qty\": 1\n\t  }\n  }\n]"
                            },
                            "url": {
                              "raw": "{{domain}}{{endpoint_carts_me_items}}",
                              "host": [
                                "{{domain}}{{endpoint_carts_me_items}}"
                              ]
                            },
                            "description": "ID: 554\nType: Simple\nName: Swiss Movement Sports Watch\nSKU: acj005\nURL: swiss-movement-sports-watch\nCategory: Jewelry\nPrice: $500.00\nQty: 3"
                          },
                          "response": []
                        },
                        {
                          "name": "Carts: qty 1",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "type": "text/javascript",
                                "exec": [
                                  "var jsonData = pm.response.json();",
                                  "if (responseCode.code === 200 && jsonData.items.length > 0) {",
                                  "    pm.environment.set(\"cart_item_id\", jsonData.items[0].item_id);",
                                  "} else {",
                                  "    tests[\"Not 200 code or no cart items returned\"] = false;",
                                  "}",
                                  "",
                                  "pm.test(\"Status code is 200\", function () {",
                                  "    pm.response.to.have.status(200);",
                                  "});",
                                  "",
                                  "pm.test(\"Initial quantity is 1 after adding simple product\", function () {",
                                  "    pm.expect(jsonData.items[0].qty).to.eql(1);",
                                  "});"
                                ]
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{customer-access-token}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "GET",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "{}"
                            },
                            "url": {
                              "raw": "{{domain}}{{endpoint_carts}}/me",
                              "host": [
                                "{{domain}}{{endpoint_carts}}"
                              ],
                              "path": [
                                "me"
                              ]
                            }
                          },
                          "response": []
                        },
                        {
                          "name": "Update simple",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "type": "text/javascript",
                                "exec": [
                                  "pm.test('Successfull call', function(){",
                                  "    pm.response.to.be.success;",
                                  "});"
                                ]
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{customer-access-token}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "POST",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "{\n    \"product\": {\n\t    \"product_id\": \"554\",\n\t    \"qty\": 3\n\t  }\n}"
                            },
                            "url": {
                              "raw": "{{domain}}{{endpoint_carts_me_items}}/{{cart_item_id}}",
                              "host": [
                                "{{domain}}{{endpoint_carts_me_items}}"
                              ],
                              "path": [
                                "{{cart_item_id}}"
                              ]
                            },
                            "description": "ID: 554\nType: Simple\nName: Swiss Movement Sports Watch\nSKU: acj005\nURL: swiss-movement-sports-watch\nCategory: Jewelry\nPrice: $500.00\nQty: 3"
                          },
                          "response": []
                        },
                        {
                          "name": "Carts: qty 3",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "type": "text/javascript",
                                "exec": [
                                  "pm.test(\"Status code is 200\", function () {",
                                  "    pm.response.to.have.status(200);",
                                  "});",
                                  "",
                                  "pm.test(\"Qty is now updated to 3 for the previously inserted simple product\", function () {",
                                  "    var jsonData = pm.response.json();",
                                  "    pm.expect(jsonData.items[0].qty).to.eql(3);",
                                  "});"
                                ]
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{customer-access-token}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "GET",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "{}"
                            },
                            "url": {
                              "raw": "{{domain}}{{endpoint_carts}}/me",
                              "host": [
                                "{{domain}}{{endpoint_carts}}"
                              ],
                              "path": [
                                "me"
                              ]
                            }
                          },
                          "response": []
                        },
                        {
                          "name": "Alt update",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "type": "text/javascript",
                                "exec": [
                                  "pm.test('Successfull call', function(){",
                                  "    pm.response.to.be.success;",
                                  "});"
                                ]
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{customer-access-token}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "POST",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "{\n\t\"cartItemId\": \"1111\",\n    \"product\": {\n\t    \"product_id\": \"554\",\n\t    \"qty\": 4\n\t  }\n}"
                            },
                            "url": {
                              "raw": "{{domain}}{{endpoint_carts_me_items}}/{{cart_item_id}}",
                              "host": [
                                "{{domain}}{{endpoint_carts_me_items}}"
                              ],
                              "path": [
                                "{{cart_item_id}}"
                              ]
                            },
                            "description": "Alternative way to updae the cart. This is the case where it is possible that the item id is in the body, even though it's not supposed to. The test makes sure the cartItemId in the body is replaced by the URI one"
                          },
                          "response": []
                        },
                        {
                          "name": "Carts: qty 4",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "type": "text/javascript",
                                "exec": [
                                  "pm.test(\"Status code is 200\", function () {",
                                  "    pm.response.to.have.status(200);",
                                  "});",
                                  "",
                                  "pm.test(\"Qty is now updated to 4 for the previously inserted simple product\", function () {",
                                  "    var jsonData = pm.response.json();",
                                  "    pm.expect(jsonData.items[0].qty).to.eql(4);",
                                  "});"
                                ]
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{customer-access-token}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "GET",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "{}"
                            },
                            "url": {
                              "raw": "{{domain}}{{endpoint_carts}}/me",
                              "host": [
                                "{{domain}}{{endpoint_carts}}"
                              ],
                              "path": [
                                "me"
                              ]
                            }
                          },
                          "response": []
                        }
                      ],
                      "_postman_isSubFolder": true
                    },
                    {
                      "name": "Configurable",
                      "item": [
                        {
                          "name": "/carts: customer",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "type": "text/javascript",
                                "exec": [
                                  "var jsonData = pm.response.json();",
                                  "if (responseCode.code === 200 && jsonData.hasOwnProperty('cartId')) {",
                                  "    pm.environment.set(\"cartId\", jsonData.cartId);",
                                  "    tests[\"Cart ID is returned\"] = isNumeric(jsonData.cartId) === true;",
                                  "} else {",
                                  "    tests[\"Cart ID is not returned\"] = false;",
                                  "}",
                                  "",
                                  "pm.test('Successfull call', function(){",
                                  "    pm.response.to.be.success;",
                                  "});",
                                  "",
                                  "function isNumeric(n) {",
                                  "  return !isNaN(parseFloat(n)) && isFinite(n);",
                                  "}"
                                ]
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{customer-access-token}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "POST",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "{}"
                            },
                            "url": {
                              "raw": "{{domain}}{{endpoint_carts}}",
                              "host": [
                                "{{domain}}{{endpoint_carts}}"
                              ]
                            },
                            "description": "Creates a customer cart"
                          },
                          "response": []
                        },
                        {
                          "name": "Add Configurable: Skirt",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "type": "text/javascript",
                                "exec": [
                                  "pm.test('Successfull call', function(){",
                                  "    pm.response.to.be.success;",
                                  "});"
                                ]
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{customer-access-token}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "POST",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "[\n  {\n\t    \"product\": {\n\t\t    \"product_id\": \"422\",\n\t\t    \"qty\": 1,\n\t\t    \"super_attribute\": {\n\t\t\t      \"92\": \"17\",\n\t\t\t      \"180\": \"76\"\n\t\t\t    }\n\t\t}\n  }\n]"
                            },
                            "url": {
                              "raw": "{{domain}}{{endpoint_carts_id_items}}",
                              "host": [
                                "{{domain}}{{endpoint_carts_id_items}}"
                              ]
                            },
                            "description": "ID: 422\nType: Configurable\nName: Essex Pencil Skirt\nSKU: wsd000c\nCategory: Dresses & Skirts\nPrice: $185.00\n\nSub-Products:\nID: 297 | 298 | 299 | 300 | 301\nName: Essex Pencil Skirt\nSKU: wsd000 | wsd001 | wsd002 | wsd003 | wsd004\nColor (ID: 92): Charcoal (ID: 17)\nSize (ID: 180): 2 (ID: 76) | 4 (ID: 75) | 6 (ID: 74) | 8 (ID: 73) | 10 (ID: 72)"
                          },
                          "response": []
                        },
                        {
                          "name": "Carts: qty 1",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "type": "text/javascript",
                                "exec": [
                                  "var jsonData = pm.response.json();",
                                  "if (responseCode.code === 200 && jsonData.items.length > 0) {",
                                  "    pm.environment.set(\"cart_item_id\", jsonData.items[0].item_id);",
                                  "} else {",
                                  "    tests[\"Not 200 code or no cart items returned\"] = false;",
                                  "}",
                                  "",
                                  "pm.test(\"Status code is 200\", function () {",
                                  "    pm.response.to.have.status(200);",
                                  "});",
                                  "",
                                  "pm.test(\"Initial quantity is 1 after adding simple product\", function () {",
                                  "    pm.expect(jsonData.items[0].qty).to.eql(1);",
                                  "    pm.expect(jsonData.items[1].qty).to.eql(1);",
                                  "});"
                                ]
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{customer-access-token}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "GET",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "{}"
                            },
                            "url": {
                              "raw": "{{domain}}{{endpoint_carts}}/me",
                              "host": [
                                "{{domain}}{{endpoint_carts}}"
                              ],
                              "path": [
                                "me"
                              ]
                            }
                          },
                          "response": []
                        },
                        {
                          "name": "Update configurable",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "type": "text/javascript",
                                "exec": [
                                  "pm.test('Successfull call', function(){",
                                  "    pm.response.to.be.success;",
                                  "});"
                                ]
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{customer-access-token}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "POST",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "{\n    \"product\": {\n\t    \"product_id\": \"422\",\n\t    \"qty\": 3\n\t}\n}"
                            },
                            "url": {
                              "raw": "{{domain}}{{endpoint_carts_me_items}}/{{cart_item_id}}",
                              "host": [
                                "{{domain}}{{endpoint_carts_me_items}}"
                              ],
                              "path": [
                                "{{cart_item_id}}"
                              ]
                            },
                            "description": "ID: 554\nType: Simple\nName: Swiss Movement Sports Watch\nSKU: acj005\nURL: swiss-movement-sports-watch\nCategory: Jewelry\nPrice: $500.00\nQty: 3"
                          },
                          "response": []
                        },
                        {
                          "name": "Carts: qty 3",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "type": "text/javascript",
                                "exec": [
                                  "pm.test(\"Status code is 200\", function () {",
                                  "    pm.response.to.have.status(200);",
                                  "});",
                                  "",
                                  "pm.test(\"Qty is now updated to 3 for the previously inserted simple product\", function () {",
                                  "    var jsonData = pm.response.json();",
                                  "    pm.expect(jsonData.items[0].qty).to.eql(3);",
                                  "    pm.expect(jsonData.items[1].qty).to.eql(1);",
                                  "});"
                                ]
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{customer-access-token}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "GET",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "{}"
                            },
                            "url": {
                              "raw": "{{domain}}{{endpoint_carts}}/me",
                              "host": [
                                "{{domain}}{{endpoint_carts}}"
                              ],
                              "path": [
                                "me"
                              ]
                            }
                          },
                          "response": []
                        },
                        {
                          "name": "Alt update",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "type": "text/javascript",
                                "exec": [
                                  "pm.test('Successfull call', function(){",
                                  "    pm.response.to.be.success;",
                                  "});"
                                ]
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{customer-access-token}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "POST",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "{\n\t\"cartItemId\": \"1111\",\n    \"product\": {\n\t    \"qty\": 4\n\t}\n}"
                            },
                            "url": {
                              "raw": "{{domain}}{{endpoint_carts_me_items}}/{{cart_item_id}}",
                              "host": [
                                "{{domain}}{{endpoint_carts_me_items}}"
                              ],
                              "path": [
                                "{{cart_item_id}}"
                              ]
                            },
                            "description": "Alternative way to updae the cart. This is the case where it is possible that the item id is in the body, even though it's not supposed to. The test makes sure the cartItemId in the body is replaced by the URI one"
                          },
                          "response": []
                        },
                        {
                          "name": "Carts: qty 4",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "type": "text/javascript",
                                "exec": [
                                  "pm.test(\"Status code is 200\", function () {",
                                  "    pm.response.to.have.status(200);",
                                  "});",
                                  "",
                                  "pm.test(\"Qty is now updated to 4 for the previously inserted simple product\", function () {",
                                  "    var jsonData = pm.response.json();",
                                  "    pm.expect(jsonData.items[0].qty).to.eql(4);",
                                  "    pm.expect(jsonData.items[1].qty).to.eql(1);",
                                  "});"
                                ]
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{customer-access-token}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "GET",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "{}"
                            },
                            "url": {
                              "raw": "{{domain}}{{endpoint_carts}}/me",
                              "host": [
                                "{{domain}}{{endpoint_carts}}"
                              ],
                              "path": [
                                "me"
                              ]
                            }
                          },
                          "response": []
                        }
                      ],
                      "_postman_isSubFolder": true
                    }
                  ],
                  "_postman_isSubFolder": true
                },
                {
                  "name": "Delete",
                  "item": [
                    {
                      "name": "/carts: customer",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "type": "text/javascript",
                            "exec": [
                              "var jsonData = pm.response.json();",
                              "if (responseCode.code === 200 && jsonData.hasOwnProperty('cartId')) {",
                              "    pm.environment.set(\"cartId\", jsonData.cartId);",
                              "    tests[\"Cart ID is returned\"] = isNumeric(jsonData.cartId) === true;",
                              "} else {",
                              "    tests[\"Cart ID is not returned\"] = false;",
                              "}",
                              "",
                              "pm.test('Successfull call', function(){",
                              "    pm.response.to.be.success;",
                              "});",
                              "",
                              "function isNumeric(n) {",
                              "  return !isNaN(parseFloat(n)) && isFinite(n);",
                              "}"
                            ]
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{customer-access-token}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "POST",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{}"
                        },
                        "url": {
                          "raw": "{{domain}}{{endpoint_carts}}",
                          "host": [
                            "{{domain}}{{endpoint_carts}}"
                          ]
                        },
                        "description": "Creates a customer cart"
                      },
                      "response": []
                    },
                    {
                      "name": "Add Simple",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "type": "text/javascript",
                            "exec": [
                              "pm.test('Successfull call', function(){",
                              "    pm.response.to.be.success;",
                              "});"
                            ]
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{customer-access-token}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "POST",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "[\n  {\n    \"product\": {\n\t    \"product_id\": \"554\",\n\t    \"qty\": 1\n\t  }\n  }\n]"
                        },
                        "url": {
                          "raw": "{{domain}}{{endpoint_carts_id_items}}",
                          "host": [
                            "{{domain}}{{endpoint_carts_id_items}}"
                          ]
                        },
                        "description": "ID: 554\nType: Simple\nName: Swiss Movement Sports Watch\nSKU: acj005\nURL: swiss-movement-sports-watch\nCategory: Jewelry\nPrice: $500.00\nQty: 3"
                      },
                      "response": []
                    },
                    {
                      "name": "Carts: qty 1",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "type": "text/javascript",
                            "exec": [
                              "var jsonData = pm.response.json();",
                              "if (responseCode.code === 200 && jsonData.items.length > 0) {",
                              "    pm.environment.set(\"cart_item_id\", jsonData.items[0].item_id);",
                              "} else {",
                              "    tests[\"Not 200 code or no cart items returned\"] = false;",
                              "}",
                              "",
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test(\"Initial quantity is 1 after adding simple product\", function () {",
                              "    pm.expect(jsonData.items.length).to.eql(1);",
                              "});"
                            ]
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{customer-access-token}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "GET",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{}"
                        },
                        "url": {
                          "raw": "{{domain}}{{endpoint_carts}}/{{cartId}}",
                          "host": [
                            "{{domain}}{{endpoint_carts}}"
                          ],
                          "path": [
                            "{{cartId}}"
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Delete by ID",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "type": "text/javascript",
                            "exec": [
                              "pm.test('Successfull call', function(){",
                              "    pm.response.to.be.success;",
                              "});"
                            ]
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{customer-access-token}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "DELETE",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": ""
                        },
                        "url": {
                          "raw": "{{domain}}{{endpoint_carts_id_items}}/{{cart_item_id}}",
                          "host": [
                            "{{domain}}{{endpoint_carts_id_items}}"
                          ],
                          "path": [
                            "{{cart_item_id}}"
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Check cart for no items",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "type": "text/javascript",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test(\"No items in cart\", function () {",
                              "    var jsonData = pm.response.json();",
                              "    pm.expect(jsonData.items).to.be.empty;",
                              "});"
                            ]
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{customer-access-token}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "GET",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{}"
                        },
                        "url": {
                          "raw": "{{domain}}{{endpoint_carts}}/{{cartId}}",
                          "host": [
                            "{{domain}}{{endpoint_carts}}"
                          ],
                          "path": [
                            "{{cartId}}"
                          ]
                        }
                      },
                      "response": []
                    }
                  ],
                  "_postman_isSubFolder": true
                }
              ],
              "_postman_isSubFolder": true
            },
            {
              "name": "Guest",
              "item": [
                {
                  "name": "Update",
                  "item": [
                    {
                      "name": "/carts: Guest Cart",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "type": "text/javascript",
                            "exec": [
                              "var jsonData = pm.response.json();",
                              "if (responseCode.code === 200 && jsonData.hasOwnProperty('cartId')) {",
                              "    pm.environment.set(\"cartId\", jsonData.cartId);",
                              "    tests[\"Cart ID is returned\"] = isNumeric(jsonData.cartId) === true;",
                              "} else {",
                              "    tests[\"Cart ID is not returned\"] = false;",
                              "}",
                              "",
                              "pm.test('Successfull call', function(){",
                              "    pm.response.to.be.success;",
                              "});",
                              "",
                              "function isNumeric(n) {",
                              "  return !isNaN(parseFloat(n)) && isFinite(n);",
                              "}"
                            ]
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{guest-access-token}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "POST",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{}"
                        },
                        "url": {
                          "raw": "{{domain}}{{endpoint_carts}}",
                          "host": [
                            "{{domain}}{{endpoint_carts}}"
                          ]
                        },
                        "description": "Creates a guest cart and assigns the local cartId variable from the one returned"
                      },
                      "response": []
                    },
                    {
                      "name": "Add Simple",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "type": "text/javascript",
                            "exec": [
                              "pm.test('Successfull call', function(){",
                              "    pm.response.to.be.success;",
                              "});"
                            ]
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{guest-access-token}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "POST",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "[\n  {\n    \"product\": {\n\t    \"product_id\": \"554\",\n\t    \"qty\": 1\n\t  }\n  }\n]"
                        },
                        "url": {
                          "raw": "{{domain}}{{endpoint_carts_id_items}}",
                          "host": [
                            "{{domain}}{{endpoint_carts_id_items}}"
                          ]
                        },
                        "description": "ID: 554\nType: Simple\nName: Swiss Movement Sports Watch\nSKU: acj005\nURL: swiss-movement-sports-watch\nCategory: Jewelry\nPrice: $500.00\nQty: 3"
                      },
                      "response": []
                    },
                    {
                      "name": "Carts: qty 1",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "type": "text/javascript",
                            "exec": [
                              "var jsonData = pm.response.json();",
                              "if (responseCode.code === 200 && jsonData.items.length > 0) {",
                              "    pm.environment.set(\"cart_item_id\", jsonData.items[0].item_id);",
                              "} else {",
                              "    tests[\"Not 200 code or no cart items returned\"] = false;",
                              "}",
                              "",
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test(\"Initial quantity is 1 after adding simple product\", function () {",
                              "    pm.expect(jsonData.items[0].qty).to.eql(1);",
                              "});"
                            ]
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{guest-access-token}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "GET",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{}"
                        },
                        "url": {
                          "raw": "{{domain}}{{endpoint_carts}}/{{cartId}}",
                          "host": [
                            "{{domain}}{{endpoint_carts}}"
                          ],
                          "path": [
                            "{{cartId}}"
                          ]
                        },
                        "description": "Creates a customer cart"
                      },
                      "response": []
                    },
                    {
                      "name": "Update (no cartItem)",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "type": "text/javascript",
                            "exec": [
                              "pm.test('Successfull call', function(){",
                              "    pm.response.to.be.success;",
                              "});"
                            ]
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{guest-access-token}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "POST",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"product\": {\n\t    \"product_id\": \"554\",\n\t    \"qty\": 3\n\t  }\n}"
                        },
                        "url": {
                          "raw": "{{domain}}{{endpoint_carts_id_items}}/{{cart_item_id}}",
                          "host": [
                            "{{domain}}{{endpoint_carts_id_items}}"
                          ],
                          "path": [
                            "{{cart_item_id}}"
                          ]
                        },
                        "description": "Physical Gift Card"
                      },
                      "response": []
                    },
                    {
                      "name": "Carts: qty 3",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "type": "text/javascript",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test(\"Qty is now updated to 3 for the previously inserted simple product\", function () {",
                              "    var jsonData = pm.response.json();",
                              "    pm.expect(jsonData.items[0].qty).to.eql(3);",
                              "});"
                            ]
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{guest-access-token}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "GET",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{}"
                        },
                        "url": {
                          "raw": "{{domain}}{{endpoint_carts}}/{{cartId}}",
                          "host": [
                            "{{domain}}{{endpoint_carts}}"
                          ],
                          "path": [
                            "{{cartId}}"
                          ]
                        },
                        "description": "Creates a customer cart"
                      },
                      "response": []
                    },
                    {
                      "name": "Alt update",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "type": "text/javascript",
                            "exec": [
                              "pm.test('Successfull call', function(){",
                              "    pm.response.to.be.success;",
                              "});"
                            ]
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{guest-access-token}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "POST",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n\t\"cartItemId\": \"1111\",\n    \"product\": {\n\t    \"product_id\": \"554\",\n\t    \"qty\": 4\n\t  }\n}"
                        },
                        "url": {
                          "raw": "{{domain}}{{endpoint_carts_id_items}}/{{cart_item_id}}",
                          "host": [
                            "{{domain}}{{endpoint_carts_id_items}}"
                          ],
                          "path": [
                            "{{cart_item_id}}"
                          ]
                        },
                        "description": "Alternative way to updae the cart. This is the case where it is possible that the item id is in the body, even though it's not supposed to. The test makes sure the cartItemId in the body is replaced by the URI one"
                      },
                      "response": []
                    },
                    {
                      "name": "Carts: qty 4",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "type": "text/javascript",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test(\"Qty is now updated to 4 for the previously inserted simple product\", function () {",
                              "    var jsonData = pm.response.json();",
                              "    pm.expect(jsonData.items[0].qty).to.eql(4);",
                              "});"
                            ]
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{guest-access-token}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "GET",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{}"
                        },
                        "url": {
                          "raw": "{{domain}}{{endpoint_carts}}/{{cartId}}",
                          "host": [
                            "{{domain}}{{endpoint_carts}}"
                          ],
                          "path": [
                            "{{cartId}}"
                          ]
                        },
                        "description": "Creates a customer cart"
                      },
                      "response": []
                    }
                  ],
                  "_postman_isSubFolder": true
                },
                {
                  "name": "Delete",
                  "item": [
                    {
                      "name": "/carts: Guest Cart",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "type": "text/javascript",
                            "exec": [
                              "var jsonData = pm.response.json();",
                              "if (responseCode.code === 200 && jsonData.hasOwnProperty('cartId')) {",
                              "    pm.environment.set(\"cartId\", jsonData.cartId);",
                              "    tests[\"Cart ID is returned\"] = isNumeric(jsonData.cartId) === true;",
                              "} else {",
                              "    tests[\"Cart ID is not returned\"] = false;",
                              "}",
                              "",
                              "pm.test('Successfull call', function(){",
                              "    pm.response.to.be.success;",
                              "});",
                              "",
                              "function isNumeric(n) {",
                              "  return !isNaN(parseFloat(n)) && isFinite(n);",
                              "}"
                            ]
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{guest-access-token}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "POST",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{}"
                        },
                        "url": {
                          "raw": "{{domain}}{{endpoint_carts}}",
                          "host": [
                            "{{domain}}{{endpoint_carts}}"
                          ]
                        },
                        "description": "Creates a guest cart and assigns the local cartId variable from the one returned"
                      },
                      "response": []
                    },
                    {
                      "name": "Add Simple",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "type": "text/javascript",
                            "exec": [
                              "pm.test('Successfull call', function(){",
                              "    pm.response.to.be.success;",
                              "});"
                            ]
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{guest-access-token}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "POST",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "[\n  {\n    \"product\": {\n\t    \"product_id\": \"554\",\n\t    \"qty\": 1\n\t  }\n  }\n]"
                        },
                        "url": {
                          "raw": "{{domain}}{{endpoint_carts_id_items}}",
                          "host": [
                            "{{domain}}{{endpoint_carts_id_items}}"
                          ]
                        },
                        "description": "ID: 554\nType: Simple\nName: Swiss Movement Sports Watch\nSKU: acj005\nURL: swiss-movement-sports-watch\nCategory: Jewelry\nPrice: $500.00\nQty: 3"
                      },
                      "response": []
                    },
                    {
                      "name": "Carts: qty 1",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "type": "text/javascript",
                            "exec": [
                              "var jsonData = pm.response.json();",
                              "if (responseCode.code === 200 && jsonData.items.length > 0) {",
                              "    pm.environment.set(\"cart_item_id\", jsonData.items[0].item_id);",
                              "} else {",
                              "    tests[\"Not 200 code or no cart items returned\"] = false;",
                              "}",
                              "",
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test(\"Initial quantity is 1 after adding simple product\", function () {",
                              "    pm.expect(jsonData.items.length).to.eql(1);",
                              "});"
                            ]
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{guest-access-token}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "GET",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{}"
                        },
                        "url": {
                          "raw": "{{domain}}{{endpoint_carts}}/{{cartId}}",
                          "host": [
                            "{{domain}}{{endpoint_carts}}"
                          ],
                          "path": [
                            "{{cartId}}"
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Delete by ID",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "type": "text/javascript",
                            "exec": [
                              "pm.test('Successfull call', function(){",
                              "    pm.response.to.be.success;",
                              "});"
                            ]
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{guest-access-token}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "DELETE",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": ""
                        },
                        "url": {
                          "raw": "{{domain}}{{endpoint_carts_id_items}}/{{cart_item_id}}",
                          "host": [
                            "{{domain}}{{endpoint_carts_id_items}}"
                          ],
                          "path": [
                            "{{cart_item_id}}"
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Check cart for no items",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "type": "text/javascript",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test(\"No items in cart\", function () {",
                              "    var jsonData = pm.response.json();",
                              "    pm.expect(jsonData.items).to.be.empty;",
                              "});"
                            ]
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{guest-access-token}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "GET",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{}"
                        },
                        "url": {
                          "raw": "{{domain}}{{endpoint_carts}}/{{cartId}}",
                          "host": [
                            "{{domain}}{{endpoint_carts}}"
                          ],
                          "path": [
                            "{{cartId}}"
                          ]
                        }
                      },
                      "response": []
                    }
                  ],
                  "_postman_isSubFolder": true
                }
              ],
              "_postman_isSubFolder": true
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "name": "Coupon",
          "item": [
            {
              "name": "Customer",
              "item": [
                {
                  "name": "Delete",
                  "item": [
                    {
                      "name": "/carts: customer",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "type": "text/javascript",
                            "exec": [
                              "var jsonData = pm.response.json();",
                              "if (responseCode.code === 200 && jsonData.hasOwnProperty('cartId')) {",
                              "    pm.environment.set(\"cartId\", jsonData.cartId);",
                              "    tests[\"Cart ID is returned\"] = isNumeric(jsonData.cartId) === true;",
                              "} else {",
                              "    tests[\"Cart ID is not returned\"] = false;",
                              "}",
                              "",
                              "pm.test('Successfull call', function(){",
                              "    pm.response.to.be.success;",
                              "});",
                              "",
                              "function isNumeric(n) {",
                              "  return !isNaN(parseFloat(n)) && isFinite(n);",
                              "}"
                            ]
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{customer-access-token}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "POST",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{}"
                        },
                        "url": {
                          "raw": "{{domain}}{{endpoint_carts}}",
                          "host": [
                            "{{domain}}{{endpoint_carts}}"
                          ]
                        },
                        "description": "Creates a customer cart"
                      },
                      "response": []
                    },
                    {
                      "name": "Add Configurable: Boots",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "type": "text/javascript",
                            "exec": [
                              "pm.test('Successfull call', function(){",
                              "    pm.response.to.be.success;",
                              "});"
                            ]
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{customer-access-token}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "POST",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "[\n  {\n    \t\"product\": {\n\t\t    \"product_id\": \"431\",\n\t\t    \"qty\": 1,\n\t\t    \"super_attribute\": {\n\t\t\t      \"92\": \"20\",\n\t\t\t      \"186\": \"102\"\n\t\t\t}\n\t\t}\n  }\n]"
                        },
                        "url": {
                          "raw": "{{domain}}{{endpoint_carts_id_items}}",
                          "host": [
                            "{{domain}}{{endpoint_carts_id_items}}"
                          ]
                        },
                        "description": "ID: 431\nType: Configurable\nName: Ann Ankle Boot\nSKU: aws005c\nURL: borgha-ankle-boot\nPrice: $470.00\nCategory: Shoes\n\n\nSub-Products:\nID: 345 | 346 | 347 | 348 | 349\nName: Ann Ankle Boot\nSKU: aws005 | aws006 | aws007 | aws008 | aws009\nColor (ID: 92): Black (ID: 20)\nShoe size (ID: 186): 6 (ID: 102) | 7 (ID: 101) | 8 (ID: 100) | 9 (ID: 99) | 10 (ID: 98)"
                      },
                      "response": []
                    },
                    {
                      "name": "Add 10 flat off coupon",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "type": "text/javascript",
                            "exec": [
                              "pm.test('Successfull call', function(){",
                              "    pm.response.to.be.success;",
                              "});"
                            ]
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{customer-access-token}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "POST",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "[\n  {\n    \t\"coupon\": {\n\t\t    \"couponCode\":\"Register10\"\n\t\t}\n  }\n]"
                        },
                        "url": {
                          "raw": "{{domain}}{{endpoint_carts_id_items}}",
                          "host": [
                            "{{domain}}{{endpoint_carts_id_items}}"
                          ]
                        },
                        "description": "Condition for coupon is Group: General, subtotal: 200+"
                      },
                      "response": []
                    },
                    {
                      "name": "Check Register10 exists",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "type": "text/javascript",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test(\"Register10 code exists\", function () {",
                              "    var jsonData = pm.response.json();",
                              "    pm.expect(jsonData.coupon_code).to.eql(\"Register10\");",
                              "});"
                            ]
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{customer-access-token}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "GET",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{}"
                        },
                        "url": {
                          "raw": "{{domain}}{{endpoint_carts}}/{{cartId}}",
                          "host": [
                            "{{domain}}{{endpoint_carts}}"
                          ],
                          "path": [
                            "{{cartId}}"
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "items/COUPON_X",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "type": "text/javascript",
                            "exec": [
                              "pm.test('Successfull call', function(){",
                              "    pm.response.to.be.success;",
                              "});"
                            ]
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{customer-access-token}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "DELETE",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": ""
                        },
                        "url": {
                          "raw": "{{domain}}{{endpoint_carts_id_items}}/COUPON_XXX",
                          "host": [
                            "{{domain}}{{endpoint_carts_id_items}}"
                          ],
                          "path": [
                            "COUPON_XXX"
                          ]
                        },
                        "description": "Removes configurable product + the coupon set. Leaves the Simple product intact."
                      },
                      "response": []
                    },
                    {
                      "name": "Check discount/products",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "type": "text/javascript",
                            "exec": [
                              "var jsonData = pm.response.json();",
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test(\"Coupon code not set\", function () {",
                              "    pm.expect(jsonData.coupon_code).to.eql(null);",
                              "});",
                              "",
                              "pm.test(\"Still have configurable products in cart\", function () {",
                              "    pm.expect(jsonData.items.length).to.be.eql(2);",
                              "});",
                              "",
                              ""
                            ]
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{customer-access-token}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "GET",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{}"
                        },
                        "url": {
                          "raw": "{{domain}}{{endpoint_carts}}/{{cartId}}",
                          "host": [
                            "{{domain}}{{endpoint_carts}}"
                          ],
                          "path": [
                            "{{cartId}}"
                          ]
                        },
                        "description": "Checks that there is no coupon applied and still have items in cart"
                      },
                      "response": []
                    }
                  ],
                  "_postman_isSubFolder": true
                }
              ],
              "_postman_isSubFolder": true
            },
            {
              "name": "Guest",
              "item": [
                {
                  "name": "Delete",
                  "item": [
                    {
                      "name": "/carts: guest",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "type": "text/javascript",
                            "exec": [
                              "var jsonData = pm.response.json();",
                              "if (responseCode.code === 200 && jsonData.hasOwnProperty('cartId')) {",
                              "    pm.environment.set(\"cartId\", jsonData.cartId);",
                              "    tests[\"Cart ID is returned\"] = isNumeric(jsonData.cartId) === true;",
                              "} else {",
                              "    tests[\"Cart ID is not returned\"] = false;",
                              "}",
                              "",
                              "pm.test('Successfull call', function(){",
                              "    pm.response.to.be.success;",
                              "});",
                              "",
                              "function isNumeric(n) {",
                              "  return !isNaN(parseFloat(n)) && isFinite(n);",
                              "}"
                            ]
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{guest-access-token}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "POST",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{}"
                        },
                        "url": {
                          "raw": "{{domain}}{{endpoint_carts}}",
                          "host": [
                            "{{domain}}{{endpoint_carts}}"
                          ]
                        },
                        "description": "Creates a guest cart and assigns the local cartId variable from the one returned"
                      },
                      "response": []
                    },
                    {
                      "name": "Add Configurable: Skirt",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "type": "text/javascript",
                            "exec": [
                              "pm.test('Successfull call', function(){",
                              "    pm.response.to.be.success;",
                              "});"
                            ]
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{guest-access-token}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "POST",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "[\n  {\n\t    \"product\": {\n\t\t    \"product_id\": \"422\",\n\t\t    \"qty\": 1,\n\t\t    \"super_attribute\": {\n\t\t\t      \"92\": \"17\",\n\t\t\t      \"180\": \"76\"\n\t\t\t    }\n\t\t}\n  }\n]"
                        },
                        "url": {
                          "raw": "{{domain}}{{endpoint_carts_id_items}}",
                          "host": [
                            "{{domain}}{{endpoint_carts_id_items}}"
                          ]
                        },
                        "description": "ID: 422\nType: Configurable\nName: Essex Pencil Skirt\nSKU: wsd000c\nCategory: Dresses & Skirts\nPrice: $185.00\n\nSub-Products:\nID: 297 | 298 | 299 | 300 | 301\nName: Essex Pencil Skirt\nSKU: wsd000 | wsd001 | wsd002 | wsd003 | wsd004\nColor (ID: 92): Charcoal (ID: 17)\nSize (ID: 180): 2 (ID: 76) | 4 (ID: 75) | 6 (ID: 74) | 8 (ID: 73) | 10 (ID: 72)"
                      },
                      "response": []
                    },
                    {
                      "name": "Add 15 flat off coupon",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "type": "text/javascript",
                            "exec": [
                              "pm.test('Successfull call', function(){",
                              "    pm.response.to.be.success;",
                              "});"
                            ]
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{guest-access-token}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "POST",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "[\n  {\n    \t\"coupon\": {\n\t\t    \"couponCode\":\"evening15\"\n\t\t}\n  }\n]"
                        },
                        "url": {
                          "raw": "{{domain}}{{endpoint_carts_id_items}}",
                          "host": [
                            "{{domain}}{{endpoint_carts_id_items}}"
                          ]
                        },
                        "description": "Condition for coupon is:\nGroup: Not-Logged-In, General, VIP, Private Sales Member; \nCategories: Dresses & Skirts, Dresses;"
                      },
                      "response": []
                    },
                    {
                      "name": "Code evening15 exists",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "type": "text/javascript",
                            "exec": [
                              "var jsonData = pm.response.json();",
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test(\"evening15 code exists\", function () {",
                              "    pm.expect(jsonData.coupon_code).to.eql(\"evening15\");",
                              "});"
                            ]
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{guest-access-token}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "GET",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{}"
                        },
                        "url": {
                          "raw": "{{domain}}{{endpoint_carts}}/{{cartId}}",
                          "host": [
                            "{{domain}}{{endpoint_carts}}"
                          ],
                          "path": [
                            "{{cartId}}"
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "items/COUPON_X",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "type": "text/javascript",
                            "exec": [
                              "pm.test('Successfull call', function(){",
                              "    pm.response.to.be.success;",
                              "});"
                            ]
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{guest-access-token}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "DELETE",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": ""
                        },
                        "url": {
                          "raw": "{{domain}}{{endpoint_carts_id_items}}/COUPON_XXX",
                          "host": [
                            "{{domain}}{{endpoint_carts_id_items}}"
                          ],
                          "path": [
                            "COUPON_XXX"
                          ]
                        },
                        "description": "Removes configurable product + the coupon set. Leaves the Simple product intact."
                      },
                      "response": []
                    },
                    {
                      "name": "Check discount/products",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "type": "text/javascript",
                            "exec": [
                              "var jsonData = pm.response.json();",
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test(\"Coupon code not set\", function () {",
                              "    pm.expect(jsonData.coupon_code).to.eql(null);",
                              "});",
                              "",
                              "pm.test(\"Still have configurable item in cart\", function () {",
                              "    pm.expect(jsonData.items.length).to.be.eql(2);",
                              "});",
                              "",
                              ""
                            ]
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{guest-access-token}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "GET",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{}"
                        },
                        "url": {
                          "raw": "{{domain}}{{endpoint_carts}}/{{cartId}}",
                          "host": [
                            "{{domain}}{{endpoint_carts}}"
                          ],
                          "path": [
                            "{{cartId}}"
                          ]
                        },
                        "description": "Checks that there is no coupon applied and still have items in cart"
                      },
                      "response": []
                    }
                  ],
                  "_postman_isSubFolder": true
                }
              ],
              "_postman_isSubFolder": true
            }
          ],
          "_postman_isSubFolder": true
        }
      ]
    },
    {
      "name": "/v2/carts/:id/checkoutUrl",
      "item": [
        {
          "name": "Customer",
          "item": [
            {
              "name": "Create customer cart",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "var jsonData = pm.response.json();",
                      "if (responseCode.code === 200 && jsonData.hasOwnProperty('cartId')) {",
                      "    pm.environment.set(\"cartId\", jsonData.cartId);",
                      "    tests[\"Cart ID is returned\"] = isNumeric(jsonData.cartId) === true;",
                      "} else {",
                      "    tests[\"Cart ID is not returned\"] = false;",
                      "}",
                      "",
                      "pm.test('Successfull call', function(){",
                      "    pm.response.to.be.success;",
                      "});",
                      "",
                      "function isNumeric(n) {",
                      "  return !isNaN(parseFloat(n)) && isFinite(n);",
                      "}"
                    ]
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{customer-access-token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{}"
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_carts}}",
                  "host": [
                    "{{domain}}{{endpoint_carts}}"
                  ]
                },
                "description": "Creates a customer cart"
              },
              "response": []
            },
            {
              "name": "Add simple product to cart",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Successfull call', function(){",
                      "    pm.response.to.be.success;",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{customer-access-token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "[\n  {\n    \"product\": {\n\t    \"product_id\": \"554\",\n\t    \"qty\": 1\n\t  }\n  }\n]"
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_carts_id_items}}",
                  "host": [
                    "{{domain}}{{endpoint_carts_id_items}}"
                  ]
                },
                "description": "ID: 554\nType: Simple\nName: Swiss Movement Sports Watch\nSKU: acj005\nURL: swiss-movement-sports-watch\nCategory: Jewelry\nPrice: $500.00\nQty: 3"
              },
              "response": []
            },
            {
              "name": "checkoutURL",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Checkout URL is returned\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.response.to.have.jsonBody('url');",
                      "    pm.response.to.have.jsonBody('expires_in', 30);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{customer-access-token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{}"
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_carts_id_checkoutUrl}}",
                  "host": [
                    "{{domain}}{{endpoint_carts_id_checkoutUrl}}"
                  ]
                }
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "name": "Guest",
          "item": [
            {
              "name": "Create guest cart",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "var jsonData = pm.response.json();",
                      "if (responseCode.code === 200 && jsonData.hasOwnProperty('cartId')) {",
                      "    pm.environment.set(\"cartId\", jsonData.cartId);",
                      "    tests[\"Cart ID is returned\"] = isNumeric(jsonData.cartId) === true;",
                      "} else {",
                      "    tests[\"Cart ID is not returned\"] = false;",
                      "}",
                      "",
                      "pm.test('Successfull call', function(){",
                      "    pm.response.to.be.success;",
                      "});",
                      "",
                      "function isNumeric(n) {",
                      "  return !isNaN(parseFloat(n)) && isFinite(n);",
                      "}"
                    ]
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{guest-access-token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{}"
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_carts}}",
                  "host": [
                    "{{domain}}{{endpoint_carts}}"
                  ]
                },
                "description": "Creates a guest cart and assigns the local cartId variable from the one returned"
              },
              "response": []
            },
            {
              "name": "Add simple item to cart",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Successfull call', function(){",
                      "    pm.response.to.be.success;",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{guest-access-token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "[\n  {\n    \"product\": {\n\t    \"product_id\": \"554\",\n\t    \"qty\": 1\n\t  }\n  }\n]"
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_carts_id_items}}",
                  "host": [
                    "{{domain}}{{endpoint_carts_id_items}}"
                  ]
                },
                "description": "ID: 554\nType: Simple\nName: Swiss Movement Sports Watch\nSKU: acj005\nURL: swiss-movement-sports-watch\nCategory: Jewelry\nPrice: $500.00\nQty: 3"
              },
              "response": []
            },
            {
              "name": "checkoutURL",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Checkout URL is returned\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.response.to.have.jsonBody('url');",
                      "    pm.response.to.have.jsonBody('expires_in', 30);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{guest-access-token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{}"
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_carts_id_checkoutUrl}}",
                  "host": [
                    "{{domain}}{{endpoint_carts_id_checkoutUrl}}"
                  ]
                }
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        }
      ]
    },
    {
      "name": "/v2/carts/:id/customer",
      "item": [
        {
          "name": "Create customer cart",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = pm.response.json();",
                  "if (responseCode.code === 200 && jsonData.hasOwnProperty('cartId')) {",
                  "    pm.environment.set(\"cartId\", jsonData.cartId);",
                  "    tests[\"Cart ID is returned\"] = isNumeric(jsonData.cartId) === true;",
                  "} else {",
                  "    tests[\"Cart ID is not returned\"] = false;",
                  "}",
                  "",
                  "pm.test('Successfull call', function(){",
                  "    pm.response.to.be.success;",
                  "});",
                  "",
                  "function isNumeric(n) {",
                  "  return !isNaN(parseFloat(n)) && isFinite(n);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{customer-access-token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{}"
            },
            "url": {
              "raw": "{{domain}}{{endpoint_carts}}",
              "host": [
                "{{domain}}{{endpoint_carts}}"
              ]
            },
            "description": "Creates a customer cart"
          },
          "response": []
        },
        {
          "name": "Customer: add simple",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Successfull call', function(){",
                  "    pm.response.to.be.success;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{customer-access-token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "[\n  {\n    \"product\": {\n\t    \"product_id\": \"554\",\n\t    \"qty\": 1\n\t  }\n  }\n]"
            },
            "url": {
              "raw": "{{domain}}{{endpoint_carts_id_items}}",
              "host": [
                "{{domain}}{{endpoint_carts_id_items}}"
              ]
            },
            "description": "ID: 554\nType: Simple\nName: Swiss Movement Sports Watch\nSKU: acj005\nURL: swiss-movement-sports-watch\nCategory: Jewelry\nPrice: $500.00\nQty: 3"
          },
          "response": []
        },
        {
          "name": "Customer: cart qty 1",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = pm.response.json();",
                  "",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Initial quantity is 1 after adding a simple product\", function () {",
                  "    pm.expect(jsonData.items.length).to.eql(1);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{customer-access-token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{}"
            },
            "url": {
              "raw": "{{domain}}{{endpoint_carts}}/{{cartId}}",
              "host": [
                "{{domain}}{{endpoint_carts}}"
              ],
              "path": [
                "{{cartId}}"
              ]
            },
            "description": "Creates a customer cart"
          },
          "response": []
        },
        {
          "name": "/carts: Guest Cart",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = pm.response.json();",
                  "if (responseCode.code === 200 && jsonData.hasOwnProperty('cartId')) {",
                  "    pm.environment.set(\"cartId\", jsonData.cartId);",
                  "    tests[\"Cart ID is returned\"] = isNumeric(jsonData.cartId) === true;",
                  "} else {",
                  "    tests[\"Cart ID is not returned\"] = false;",
                  "}",
                  "",
                  "pm.test('Successfull call', function(){",
                  "    pm.response.to.be.success;",
                  "});",
                  "",
                  "function isNumeric(n) {",
                  "  return !isNaN(parseFloat(n)) && isFinite(n);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{guest-access-token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{}"
            },
            "url": {
              "raw": "{{domain}}{{endpoint_carts}}",
              "host": [
                "{{domain}}{{endpoint_carts}}"
              ]
            },
            "description": "Creates a guest cart and assigns the local cartId variable from the one returned"
          },
          "response": []
        },
        {
          "name": "Guest: add downloadable",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Successfull call', function(){",
                  "    pm.response.to.be.success;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{guest-access-token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "[\n  {\n    \"product\": {\n\t    \"product_id\": \"563\",\n\t    \"qty\": 1,\n\t    \"links\": [\n\t      \"18\"\n\t    ]\n\t }\n  }\n]"
            },
            "url": {
              "raw": "{{domain}}{{endpoint_carts_id_items}}",
              "host": [
                "{{domain}}{{endpoint_carts_id_items}}"
              ]
            },
            "description": "ID: 563\nName: Fire [Kalima remix] by Unannounced Guest\nSKU: hbm010\nCategory: Music & Books\nURL: fire-kalima-remix-by-unannounced-guest\nPrice: 2.00\nQty: 1000"
          },
          "response": []
        },
        {
          "name": "Guest: cart qty 1",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = pm.response.json();",
                  "",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Initial quantity is 1 after adding a downlodable product\", function () {",
                  "    pm.expect(jsonData.items.length).to.eql(1);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{guest-access-token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{}"
            },
            "url": {
              "raw": "{{domain}}{{endpoint_carts}}/{{cartId}}",
              "host": [
                "{{domain}}{{endpoint_carts}}"
              ],
              "path": [
                "{{cartId}}"
              ]
            },
            "description": "calls a customer cart as guest"
          },
          "response": []
        },
        {
          "name": "Merge carts",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = pm.response.json();",
                  "if (responseCode.code === 200 && jsonData.cartId) {",
                  "    pm.environment.set(\"cartId\", jsonData.cartId);",
                  "}",
                  "",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Cart ID is returned\", function () {",
                  "    pm.expect(jsonData.cartId).to.not.be.empty;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{customer-access-token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{}"
            },
            "url": {
              "raw": "{{domain}}{{endpoint_carts_id_customer}}",
              "host": [
                "{{domain}}{{endpoint_carts_id_customer}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Customer: cart qty 2",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = pm.response.json();",
                  "",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Carts merged, 2 items in cart\", function () {",
                  "    pm.expect(jsonData.items.length).to.eql(2);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{customer-access-token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{}"
            },
            "url": {
              "raw": "{{domain}}{{endpoint_carts}}/{{cartId}}",
              "host": [
                "{{domain}}{{endpoint_carts}}"
              ],
              "path": [
                "{{cartId}}"
              ]
            },
            "description": "Creates a customer cart"
          },
          "response": []
        },
        {
          "name": "Merge: call ME endpoint",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Cannot use ME endpoint here\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{customer-access-token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{}"
            },
            "url": {
              "raw": "{{domain}}{{endpoint_carts}}/me/customer",
              "host": [
                "{{domain}}{{endpoint_carts}}"
              ],
              "path": [
                "me",
                "customer"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "/v2/customers/me",
      "item": [
        {
          "name": "Customer: me",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9af79f56-dba0-4f0d-a976-85ec26419a1d",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Successfully loaded customer data via ME endpoint\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Customer ID is returned\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.customer_id).to.not.be.empty;",
                  "});",
                  "",
                  "pm.test(\"Customer group is returned\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.customer_group).to.not.to.be.empty;",
                  "});",
                  "pm.test(\"Addresses are not returned\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.addresses).to.be.undefined;",
                  "});",
                  ""
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "f4a1b51e-3eea-4ae6-9dfd-f4c5faf33af3",
                "type": "text/javascript",
                "exec": [
                  "pm.environment.unset(\"customer_id\");"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{customer-access-token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{domain}}{{endpoint_customers_me}}",
              "host": [
                "{{domain}}{{endpoint_customers_me}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Guest cannot call this endpoint",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d71bccf3-b3d3-480f-9000-d0d6294ea575",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Guest cannot access, unauthorized\", function () {",
                  "    pm.response.to.have.status(403);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{guest-access-token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{domain}}{{endpoint_customers_me}}",
              "host": [
                "{{domain}}{{endpoint_customers_me}}"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "/v2/customers/:id",
      "item": [
        {
          "name": "Get customer ID via ME",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9929cd06-eb01-424b-a398-df220840b14a",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Successfully loaded customer data via ME endpoint\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.response.to.have.status(200);",
                  "    pm.environment.set(\"customer-id\", jsonData.customer_id);",
                  "});"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "f4a1b51e-3eea-4ae6-9dfd-f4c5faf33af3",
                "type": "text/javascript",
                "exec": [
                  "pm.environment.unset(\"customer_id\");"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{customer-access-token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{domain}}{{endpoint_customers_me}}",
              "host": [
                "{{domain}}{{endpoint_customers_me}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update customer data",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "898b977f-9f9e-40b8-8201-4352c18c619b",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "878ccafd-8752-4982-8896-5f83b8e7aebb",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{customer-access-token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"should@not.change\",\n    \"firstname\": \"newFirstName\",\n    \"middlename\": \"newMiddleName\",\n    \"lastname\": \"newLastName\"\n}"
            },
            "url": {
              "raw": "{{domain}}{{endpoint_customers}}/{{customer-id}}",
              "host": [
                "{{domain}}{{endpoint_customers}}"
              ],
              "path": [
                "{{customer-id}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Check updated customer data",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "703c3a85-b29b-4f52-82ea-34ab57afcf7d",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Successfully loaded customer data\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Customer data was updated\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.customer_id).to.eq(pm.environment.get(\"customer-id\"));",
                  "    pm.expect(jsonData.firstname).to.eq('newFirstName');",
                  "    pm.expect(jsonData.middlename).to.eq('newMiddleName');",
                  "    pm.expect(jsonData.lastname).to.eq('newLastName');",
                  "});",
                  "",
                  "pm.test(\"Email was not updated\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.email).to.not.eq('should@not.change');",
                  "});"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "2980fc02-9812-4b3b-9b87-0a4ab8678755",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{customer-access-token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{domain}}{{endpoint_customers_me}}",
              "host": [
                "{{domain}}{{endpoint_customers_me}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Check Update customer data validation",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7f44cbd9-43c2-4276-bde0-6e229220b63a",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status 400 returned\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"We get at least 2 errors regarding first name and last name\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.messages.error.length).to.eq(2);",
                  "    pm.expect(jsonData.messages.error[0].path).to.eq('firstname');",
                  "    pm.expect(jsonData.messages.error[1].path).to.eq('lastname');",
                  "});"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "40c8d3cd-93c2-429b-bdf8-0bca31e9aa1a",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{customer-access-token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"firstname\": \"\",\n    \"middlename\": \"\",\n    \"lastname\": \"\"\n}"
            },
            "url": {
              "raw": "{{domain}}{{endpoint_customers}}/{{customer-id}}",
              "host": [
                "{{domain}}{{endpoint_customers}}"
              ],
              "path": [
                "{{customer-id}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update EE specific customer data",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "025837a2-e229-4d0f-bd6d-3f26e2801b39",
                "type": "text/javascript",
                "exec": [
                  "if (pm.variables.get('mage_type') === 'EE') {",
                  "    pm.test('Successfull call', function(){",
                  "        pm.response.to.be.success;",
                  "    });",
                  "} else {",
                  "    pm.test('Request data is invalid for the Community edition', function () {",
                  "        pm.response.to.have.status(400);",
                  "    });",
                  "}"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "40c8d3cd-93c2-429b-bdf8-0bca31e9aa1a",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{customer-access-token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"gender\": \"2\",\n    \"dob\": \"1980-12-31\",\n    \"favorite_number\": \"42\"\n}"
            },
            "url": {
              "raw": "{{domain}}{{endpoint_customers}}/{{customer-id}}",
              "host": [
                "{{domain}}{{endpoint_customers}}"
              ],
              "path": [
                "{{customer-id}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Check updated EE specific customer data",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6ea30813-c530-40dd-ab98-471f13b77cdd",
                "type": "text/javascript",
                "exec": [
                  "if (pm.variables.get('mage_type') === 'EE') {",
                  "    pm.test('EE specific customer data was updated', function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData.customer_id).to.eq(pm.environment.get('customer-id'));",
                  "        pm.expect(jsonData.dob).to.eq('1980-12-31 00:00:00');",
                  "        pm.expect(jsonData.gender).to.eq('2');",
                  "        pm.expect(jsonData.favorite_number).to.eq('42');",
                  "    });",
                  "} else {",
                  "    pm.test('Customer was not updated in the Community edition', function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData.customer_id).to.eq(pm.environment.get(\"customer-id\"));",
                  "    });",
                  "}"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "2980fc02-9812-4b3b-9b87-0a4ab8678755",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{customer-access-token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{domain}}{{endpoint_customers_me}}",
              "host": [
                "{{domain}}{{endpoint_customers_me}}"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "/v2/customers/:id/addresses",
      "item": [
        {
          "name": "Guest",
          "item": [
            {
              "name": "Get address",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "575714b8-e63a-402c-92c0-c45fe722225c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.variables.set(\"customer-id\", \"1\");"
                    ]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "fe5dc968-baee-4c87-8863-3384aa68dd7e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Guest cannot access customer endpoint by an existing ID of 1\", function () {",
                      "    pm.response.to.have.status(403);",
                      "});",
                      "pm.variables.unset(\"customer-id\");"
                    ]
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{guest-access-token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_customers_id_addresses}}",
                  "host": [
                    "{{domain}}{{endpoint_customers_id_addresses}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Create address",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "575714b8-e63a-402c-92c0-c45fe722225c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.variables.set(\"customer-id\", \"1\");"
                    ]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "fe5dc968-baee-4c87-8863-3384aa68dd7e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Guest cannot access customer endpoint by an existing ID of 1\", function () {",
                      "    pm.response.to.have.status(403);",
                      "});",
                      "pm.variables.unset(\"customer-id\");"
                    ]
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{guest-access-token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{}"
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_customers_id_addresses}}",
                  "host": [
                    "{{domain}}{{endpoint_customers_id_addresses}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Delete address",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "21e83ae0-714e-47ef-aea7-805fe1801de4",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Guest cannot access customer endpoint by an existing ID of 1\", function () {",
                      "    pm.response.to.have.status(403);",
                      "});",
                      "pm.variables.unset(\"customer-id\");",
                      "pm.variables.unset(\"address-id\");"
                    ]
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "bb50f680-c6e9-49d0-b73c-19dd063ea186",
                    "type": "text/javascript",
                    "exec": [
                      "pm.variables.set(\"customer-id\", \"1\");",
                      "pm.variables.set(\"address-id\", \"1\");"
                    ]
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{guest-access-token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "DELETE",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_customers_id_addresses}}/{{address-id}}",
                  "host": [
                    "{{domain}}{{endpoint_customers_id_addresses}}"
                  ],
                  "path": [
                    "{{address-id}}"
                  ]
                }
              },
              "response": []
            }
          ],
          "description": "Making sure the guest cannot access this endpoint",
          "_postman_isSubFolder": true
        },
        {
          "name": "Customer 2 (C2)",
          "item": [
            {
              "name": "Get C1 ID via ME",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5cb95e31-6dc3-45e7-9b0c-a0b309745f49",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Successfully loaded customer data via ME endpoint\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.response.to.have.status(200);",
                      "    pm.environment.set(\"customer-id\", jsonData.customer_id);",
                      "});"
                    ]
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "f4a1b51e-3eea-4ae6-9dfd-f4c5faf33af3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.environment.unset(\"customer_id\");"
                    ]
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{customer-access-token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_customers_me}}",
                  "host": [
                    "{{domain}}{{endpoint_customers_me}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Create address via C1",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0b831f5a-28f5-4714-9636-ced2cc33ff65",
                    "type": "text/javascript",
                    "exec": [
                      "// preparation for delete / update address endpoint",
                      "var jsonData = pm.response.json();",
                      "if (jsonData.addressId) {",
                      "    pm.environment.set(\"address-id\", jsonData.addressId);",
                      "}"
                    ]
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "666aa4c8-cc6b-47e8-bbb2-f54f7cd6dd6c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.environment.set(\"seed\", \"address-\" + Math.floor(Math.random() * Math.floor(100)));"
                    ]
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{customer-access-token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"firstname\": \"{{seed}}.first\",\n    \"middlename\": \"{{seed}}.mid\",\n    \"lastname\": \"{{seed}}.last\",\n    \"company\": \"{{seed}}.company\",\n    \"city\": \"{{seed}}.city\",\n    \"country_id\": \"US\",\n    \"region\": \"Arizona\",\n    \"postcode\": \"85000\",\n    \"telephone\": \"{{seed}}.phone\",\n    \"vat_id\": \"{{seed}}.vat_id\",\n    \"street\": [\n        \"{{seed}}.street1\",\n        \"{{seed}}.street2\"\n    ]\n}"
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_customers_id_addresses}}",
                  "host": [
                    "{{domain}}{{endpoint_customers_id_addresses}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Create address via C2",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2d0771bb-36f1-4096-a9d8-0f213a404ad3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Accessed resource cannot be found\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});"
                    ]
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "666aa4c8-cc6b-47e8-bbb2-f54f7cd6dd6c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.environment.set(\"seed\", \"address-\" + Math.floor(Math.random() * Math.floor(100)));"
                    ]
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{customer-access-token-2}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"firstname\": \"{{seed}}.first\",\n    \"middlename\": \"{{seed}}.mid\",\n    \"lastname\": \"{{seed}}.last\",\n    \"company\": \"{{seed}}.company\",\n    \"city\": \"{{seed}}.city\",\n    \"country_id\": \"US\",\n    \"region\": \"Arizona\",\n    \"postcode\": \"85000\",\n    \"telephone\": \"{{seed}}.phone\",\n    \"vat_id\": \"{{seed}}.vat_id\",\n    \"street\": [\n        \"{{seed}}.street1\",\n        \"{{seed}}.street2\"\n    ]\n}"
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_customers_id_addresses}}",
                  "host": [
                    "{{domain}}{{endpoint_customers_id_addresses}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get address via C2",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e8c83952-bfd1-4c86-9518-1fb825553b39",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Accessed resource cannot be found\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});"
                    ]
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "16d54f96-0512-4548-814a-9beef69d72ad",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{customer-access-token-2}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_customers_id_addresses}}",
                  "host": [
                    "{{domain}}{{endpoint_customers_id_addresses}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Update address via C2",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5d5fe4a9-8d64-4c86-abb5-d70556361c07",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Accessed resource cannot be found\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});"
                    ]
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "034019cd-7070-499f-b523-c16e67b7bf67",
                    "type": "text/javascript",
                    "exec": [
                      "pm.environment.set(\"seed\", \"address-\" + Math.floor(Math.random() * Math.floor(100)));",
                      "setTimeout(function(){}, 2000); //delay 2 seconds so that created_at and updated_at are different"
                    ]
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{customer-access-token-2}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"firstname\": \"{{seed}}.first\",\n    \"middlename\": \"{{seed}}.mid\",\n    \"lastname\": \"{{seed}}.last\",\n    \"company\": \"{{seed}}.company\",\n    \"city\": \"{{seed}}.city\",\n    \"country_id\": \"EE\",\n    \"region\": \"Harjumaa\",\n    \"postcode\": \"13916\",\n    \"telephone\": \"{{seed}}.phone\",\n    \"vat_id\": \"{{seed}}.vat_id\",\n    \"street\": [\n        \"{{seed}}.street1\",\n        \"{{seed}}.street2\"\n    ]\n}"
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_customers_id_addresses}}/{{address-id}}",
                  "host": [
                    "{{domain}}{{endpoint_customers_id_addresses}}"
                  ],
                  "path": [
                    "{{address-id}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Delete address via C2",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6e95581e-0177-4dbd-b8f6-a28e4e6d88f7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Accessed resource cannot be found\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});"
                    ]
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "16d54f96-0512-4548-814a-9beef69d72ad",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{customer-access-token-2}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "DELETE",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_customers_id_addresses}}/{{address-id}}",
                  "host": [
                    "{{domain}}{{endpoint_customers_id_addresses}}"
                  ],
                  "path": [
                    "{{address-id}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "cleanup",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "146b2f14-10e9-43a5-972e-02e5442395e2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.environment.unset(\"seed\");",
                      "pm.environment.unset(\"address-id\");",
                      "pm.environment.unset(\"customer-id\");",
                      ""
                    ]
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "16d54f96-0512-4548-814a-9beef69d72ad",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{customer-access-token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "DELETE",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_customers_id_addresses}}/{{address-id}}",
                  "host": [
                    "{{domain}}{{endpoint_customers_id_addresses}}"
                  ],
                  "path": [
                    "{{address-id}}"
                  ]
                }
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "name": "Create",
          "item": [
            {
              "name": "Errors",
              "item": [
                {
                  "name": "Get customer ID via ME",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "6e232847-89ab-4d2e-94b0-11642a2b365b",
                        "type": "text/javascript",
                        "exec": [
                          "pm.test(\"Successfully loaded customer data via ME endpoint\", function () {",
                          "    var jsonData = pm.response.json();",
                          "    pm.response.to.have.status(200);",
                          "    pm.environment.set(\"customer-id\", jsonData.customer_id);",
                          "});"
                        ]
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "f4a1b51e-3eea-4ae6-9dfd-f4c5faf33af3",
                        "type": "text/javascript",
                        "exec": [
                          "pm.environment.unset(\"customer_id\");"
                        ]
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{customer-access-token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "GET",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": ""
                    },
                    "url": {
                      "raw": "{{domain}}{{endpoint_customers_me}}",
                      "host": [
                        "{{domain}}{{endpoint_customers_me}}"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Required errors",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "66930191-8830-4aae-9aa8-5900658a79bf",
                        "type": "text/javascript",
                        "exec": [
                          "pm.test(\"Status 400 returned\", function () {",
                          "    pm.response.to.have.status(400);",
                          "});",
                          "",
                          "/**",
                          " * Traverses all default errors and checks that they exist as json objects",
                          " */",
                          "pm.test(\"All default errors appear correctly\", function () {",
                          "    var jsonData = pm.response.json();",
                          "    const list = ['firstname', 'lastname', 'street', 'country_id', 'city', 'postcode', 'telephone']",
                          "    pm.expect(jsonData.messages.error.length).to.be.gte(7);",
                          "    list.forEach((path) => {",
                          "        let result = jsonData.messages.error.filter((item) => item.path === path);",
                          "        pm.expect(result.length).to.eq(1);",
                          "        if (result.length === 0) {",
                          "            console.log('This path is not available in this mage instance: ' + path)",
                          "        }",
                          "    })",
                          "});",
                          "",
                          ""
                        ]
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "16d54f96-0512-4548-814a-9beef69d72ad",
                        "type": "text/javascript",
                        "exec": [
                          ""
                        ]
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{customer-access-token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{}"
                    },
                    "url": {
                      "raw": "{{domain}}{{endpoint_customers_id_addresses}}",
                      "host": [
                        "{{domain}}{{endpoint_customers_id_addresses}}"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Region doesn't exist",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "0a78e10c-f4e1-4db8-9cd8-45413846399d",
                        "type": "text/javascript",
                        "exec": [
                          "pm.test(\"Status 400 returned\", function () {",
                          "    pm.response.to.have.status(400);",
                          "});",
                          "",
                          "pm.test(\"Correct errors are returned\", function () {",
                          "    var jsonData = pm.response.json();",
                          "    pm.expect(jsonData.messages.error.length).to.eq(1);",
                          "    pm.expect(jsonData.messages.error[0].path).to.eq('region');",
                          "    pm.expect(jsonData.messages.error[0].messages[0]).to.eq('State/Province does not exist.');",
                          "});"
                        ]
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "16d54f96-0512-4548-814a-9beef69d72ad",
                        "type": "text/javascript",
                        "exec": [
                          ""
                        ]
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{customer-access-token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"firstname\": \"test1.firstname\",\n    \"lastname\": \"test1.lastname\",\n    \"city\": \"test1.city\",\n    \"country_id\": \"US\",\n    \"region\": \"bla\",\n    \"postcode\": \"test1.postcode\",\n    \"telephone\": \"test1.telephone\",\n    \"street\": [\"test1.street\"]\n}"
                    },
                    "url": {
                      "raw": "{{domain}}{{endpoint_customers_id_addresses}}",
                      "host": [
                        "{{domain}}{{endpoint_customers_id_addresses}}"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Region is not a string",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "71d16f78-8d2b-42b3-953a-735f1b5f1c50",
                        "type": "text/javascript",
                        "exec": [
                          "pm.test(\"Status 400 returned\", function () {",
                          "    pm.response.to.have.status(400);",
                          "});",
                          "",
                          "pm.test(\"Correct errors are returned\", function () {",
                          "    var jsonData = pm.response.json();",
                          "    pm.expect(jsonData.messages.error.length).to.eq(1);",
                          "    pm.expect(jsonData.messages.error[0].path).to.eq('region');",
                          "});"
                        ]
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "16d54f96-0512-4548-814a-9beef69d72ad",
                        "type": "text/javascript",
                        "exec": [
                          ""
                        ]
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{customer-access-token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n        \"firstname\": \"test1.firstname\",\n        \"lastname\": \"test1.lastname\",\n        \"city\": \"test1.city\",\n        \"country_id\": \"US\",\n        \"region\": 1,\n        \"postcode\": \"test1.postcode\",\n        \"telephone\": \"test1.telephone\",\n        \"street\": [\"test1.street\"]\n\t}"
                    },
                    "url": {
                      "raw": "{{domain}}{{endpoint_customers_id_addresses}}",
                      "host": [
                        "{{domain}}{{endpoint_customers_id_addresses}}"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "No region provided",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "86a42c19-c1c8-4d24-a87e-befae29dec4b",
                        "type": "text/javascript",
                        "exec": [
                          "pm.test(\"Status 400 returned\", function () {",
                          "    pm.response.to.have.status(400);",
                          "});",
                          "",
                          "pm.test(\"State/Province error is thrown\", function () {",
                          "    var jsonData = pm.response.json();",
                          "    pm.expect(jsonData.messages.error.length).to.eq(1);",
                          "    pm.expect(jsonData.messages.error[0].path).to.eq('region');",
                          "    pm.expect(jsonData.messages.error[0].messages[0]).to.eq('\"State/Province\" is required.');",
                          "});"
                        ]
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "16d54f96-0512-4548-814a-9beef69d72ad",
                        "type": "text/javascript",
                        "exec": [
                          ""
                        ]
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{customer-access-token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n        \"firstname\": \"test1.firstname\",\n        \"lastname\": \"test1.lastname\",\n        \"city\": \"test1.city\",\n        \"country_id\": \"US\",\n        \"region\": \"\",\n        \"postcode\": \"test1.postcode\",\n        \"telephone\": \"test1.telephone\",\n        \"street\": [\"test1.street\"]\n  }"
                    },
                    "url": {
                      "raw": "{{domain}}{{endpoint_customers_id_addresses}}",
                      "host": [
                        "{{domain}}{{endpoint_customers_id_addresses}}"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "No region needed for Italy",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "27c387ae-33eb-46d6-a04d-18252e260a26",
                        "type": "text/javascript",
                        "exec": [
                          "pm.test(\"Status 400 returned\", function () {",
                          "    pm.response.to.have.status(400);",
                          "});",
                          "",
                          "pm.test(\"Only postcode error is thrown and no region error\", function () {",
                          "    var jsonData = pm.response.json();",
                          "    pm.expect(jsonData.messages.error.length).to.eq(1);",
                          "    pm.expect(jsonData.messages.error[0].path).to.eq('postcode');",
                          "});"
                        ]
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "16d54f96-0512-4548-814a-9beef69d72ad",
                        "type": "text/javascript",
                        "exec": [
                          ""
                        ]
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{customer-access-token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n        \"firstname\": \"test1.firstname\",\n        \"lastname\": \"test1.lastname\",\n        \"city\": \"test1.city\",\n        \"country_id\": \"IT\",\n        \"region\": \"\",\n        \"postcode\": \"\",\n        \"telephone\": \"test1.telephone\",\n        \"street\": [\"test1.street\"]\n  }"
                    },
                    "url": {
                      "raw": "{{domain}}{{endpoint_customers_id_addresses}}",
                      "host": [
                        "{{domain}}{{endpoint_customers_id_addresses}}"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Country code too long",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "11a0e30c-2a27-49f6-8be5-26d47dbea85d",
                        "type": "text/javascript",
                        "exec": [
                          "pm.test(\"Status 400 returned\", function () {",
                          "    pm.response.to.have.status(400);",
                          "});",
                          "",
                          "pm.test(\"One error with country_id path returned\", function () {",
                          "    var jsonData = pm.response.json();",
                          "    pm.expect(jsonData.messages.error.length).to.eq(1);",
                          "    pm.expect(jsonData.messages.error[0].path).to.eq('country_id');",
                          "});"
                        ]
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "16d54f96-0512-4548-814a-9beef69d72ad",
                        "type": "text/javascript",
                        "exec": [
                          ""
                        ]
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{customer-access-token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n        \"firstname\": \"test1.firstname\",\n        \"lastname\": \"test1.lastname\",\n        \"city\": \"test1.city\",\n        \"country_id\": \"United States\",\n        \"region\": \"test.region\",\n        \"postcode\": \"test.postcode\",\n        \"telephone\": \"test1.telephone\",\n        \"street\": [\"test1.street\"]\n\t}"
                    },
                    "url": {
                      "raw": "{{domain}}{{endpoint_customers_id_addresses}}",
                      "host": [
                        "{{domain}}{{endpoint_customers_id_addresses}}"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Country code too short",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "c2456a7c-69e5-438c-9873-320242742b9f",
                        "type": "text/javascript",
                        "exec": [
                          "pm.test(\"Status 400 returned\", function () {",
                          "    pm.response.to.have.status(400);",
                          "});",
                          "",
                          "pm.test(\"One error with country_id path returned\", function () {",
                          "    var jsonData = pm.response.json();",
                          "    pm.expect(jsonData.messages.error.length).to.eq(1);",
                          "    pm.expect(jsonData.messages.error[0].path).to.eq('country_id');",
                          "});"
                        ]
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "16d54f96-0512-4548-814a-9beef69d72ad",
                        "type": "text/javascript",
                        "exec": [
                          ""
                        ]
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{customer-access-token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n        \"firstname\": \"test1.firstname\",\n        \"lastname\": \"test1.lastname\",\n        \"city\": \"test1.city\",\n        \"country_id\": \"U\",\n        \"region\": \"test.region\",\n        \"postcode\": \"test.postcode\",\n        \"telephone\": \"test1.telephone\",\n        \"street\": [\"test1.street\"]\n\t}"
                    },
                    "url": {
                      "raw": "{{domain}}{{endpoint_customers_id_addresses}}",
                      "host": [
                        "{{domain}}{{endpoint_customers_id_addresses}}"
                      ]
                    }
                  },
                  "response": []
                }
              ],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b570ddae-af2d-49be-8573-6490d642017f",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "f3b6d2d4-b0b3-4b7c-ab0c-aa16d0f7ce2f",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                }
              ],
              "_postman_isSubFolder": true
            },
            {
              "name": "Defaults",
              "item": [
                {
                  "name": "Get customer ID via ME",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "5cb95e31-6dc3-45e7-9b0c-a0b309745f49",
                        "type": "text/javascript",
                        "exec": [
                          "pm.test(\"Successfully loaded customer data via ME endpoint\", function () {",
                          "    var jsonData = pm.response.json();",
                          "    pm.response.to.have.status(200);",
                          "    pm.environment.set(\"customer-id\", jsonData.customer_id);",
                          "});"
                        ]
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "f4a1b51e-3eea-4ae6-9dfd-f4c5faf33af3",
                        "type": "text/javascript",
                        "exec": [
                          "pm.environment.unset(\"customer_id\");"
                        ]
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{customer-access-token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "GET",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": ""
                    },
                    "url": {
                      "raw": "{{domain}}{{endpoint_customers_me}}",
                      "host": [
                        "{{domain}}{{endpoint_customers_me}}"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Create address (get ID)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "0b831f5a-28f5-4714-9636-ced2cc33ff65",
                        "type": "text/javascript",
                        "exec": [
                          "// preparation for delete / update address endpoint",
                          "var jsonData = pm.response.json();",
                          "if (jsonData.addressId) {",
                          "    pm.environment.set(\"address-id\", jsonData.addressId);",
                          "}"
                        ]
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "666aa4c8-cc6b-47e8-bbb2-f54f7cd6dd6c",
                        "type": "text/javascript",
                        "exec": [
                          "pm.environment.set(\"seed\", \"address-\" + Math.floor(Math.random() * Math.floor(100)));"
                        ]
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{customer-access-token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"firstname\": \"{{seed}}.first\",\n    \"middlename\": \"{{seed}}.mid\",\n    \"lastname\": \"{{seed}}.last\",\n    \"company\": \"{{seed}}.company\",\n    \"city\": \"{{seed}}.city\",\n    \"country_id\": \"US\",\n    \"region\": \"Arizona\",\n    \"postcode\": \"85000\",\n    \"telephone\": \"{{seed}}.phone\",\n    \"vat_id\": \"{{seed}}.vat_id\",\n    \"street\": [\n        \"{{seed}}.street1\",\n        \"{{seed}}.street2\"\n    ],\n    \"is_default_billing\": 0,\n    \"is_default_shipping\": 1\n}"
                    },
                    "url": {
                      "raw": "{{domain}}{{endpoint_customers_id_addresses}}",
                      "host": [
                        "{{domain}}{{endpoint_customers_id_addresses}}"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Check default status",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "3e77a69a-d733-4443-93a7-c93b0108514b",
                        "type": "text/javascript",
                        "exec": [
                          "pm.test(\"Successfully loaded address data\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"Correct default status is returned\", function () {",
                          "    var lastAddress = pm.response.json();",
                          "    pm.expect(lastAddress.is_default_billing).to.eq(0);",
                          "    pm.expect(lastAddress.is_default_shipping).to.eq(1);",
                          "});",
                          "",
                          "pm.environment.unset(\"seed\");",
                          "pm.environment.unset(\"address-id\");",
                          "pm.environment.unset(\"customer-id\");"
                        ]
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "16d54f96-0512-4548-814a-9beef69d72ad",
                        "type": "text/javascript",
                        "exec": [
                          ""
                        ]
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{customer-access-token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "GET",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": ""
                    },
                    "url": {
                      "raw": "{{domain}}{{endpoint_customers_id_addresses}}/{{address-id}}",
                      "host": [
                        "{{domain}}{{endpoint_customers_id_addresses}}"
                      ],
                      "path": [
                        "{{address-id}}"
                      ]
                    }
                  },
                  "response": []
                }
              ],
              "_postman_isSubFolder": true
            },
            {
              "name": "Get customer ID via ME",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5cb95e31-6dc3-45e7-9b0c-a0b309745f49",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Successfully loaded customer data via ME endpoint\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.response.to.have.status(200);",
                      "    pm.environment.set(\"customer-id\", jsonData.customer_id);",
                      "});"
                    ]
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "f4a1b51e-3eea-4ae6-9dfd-f4c5faf33af3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.environment.unset(\"customer_id\");"
                    ]
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{customer-access-token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_customers_me}}",
                  "host": [
                    "{{domain}}{{endpoint_customers_me}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Create address (get ID)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0b831f5a-28f5-4714-9636-ced2cc33ff65",
                    "type": "text/javascript",
                    "exec": [
                      "// preparation for delete / update address endpoint",
                      "var jsonData = pm.response.json();",
                      "if (jsonData.addressId) {",
                      "    pm.environment.set(\"address-id\", jsonData.addressId);",
                      "}"
                    ]
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "666aa4c8-cc6b-47e8-bbb2-f54f7cd6dd6c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.environment.set(\"seed\", \"address-\" + Math.floor(Math.random() * Math.floor(100)));"
                    ]
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{customer-access-token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"firstname\": \"{{seed}}.first\",\n    \"middlename\": \"{{seed}}.mid\",\n    \"lastname\": \"{{seed}}.last\",\n    \"company\": \"{{seed}}.company\",\n    \"city\": \"{{seed}}.city\",\n    \"country_id\": \"US\",\n    \"region\": \"Arizona\",\n    \"postcode\": \"85000\",\n    \"telephone\": \"{{seed}}.phone\",\n    \"vat_id\": \"{{seed}}.vat_id\",\n    \"street\": [\n        \"{{seed}}.street1\",\n        \"{{seed}}.street2\"\n    ]\n}"
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_customers_id_addresses}}",
                  "host": [
                    "{{domain}}{{endpoint_customers_id_addresses}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Check last address entry",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "710b0cb7-da08-4fa7-b07e-770488fd65af",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Successfully loaded address data\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Customer address data is returned\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const lastAddress = jsonData.pop();",
                      "    pm.expect(lastAddress.customer_id).to.be.a('string').to.eq(pm.environment.get(\"customer-id\"));",
                      "    pm.expect(lastAddress.created_at).to.not.be.empty;",
                      "    pm.expect(lastAddress.updated_at).to.not.be.empty;",
                      "    pm.expect(lastAddress.firstname).to.eq(pm.environment.get(\"seed\") + \".first\");",
                      "    pm.expect(lastAddress.lastname).to.eq(pm.environment.get(\"seed\") + \".last\");",
                      "    pm.expect(lastAddress.is_active).to.be.a('string').to.eq('1');",
                      "    pm.expect(lastAddress.company).to.eq(pm.environment.get(\"seed\") + \".company\");",
                      "    pm.expect(lastAddress.city).to.eq(pm.environment.get(\"seed\") + \".city\");",
                      "    pm.expect(lastAddress.country_id).to.eq(\"US\");",
                      "    pm.expect(lastAddress.region).to.eq(\"Arizona\");",
                      "    pm.expect(lastAddress.region_code).to.eq(\"AZ\");",
                      "    pm.expect(lastAddress.postcode).to.be.a('string').to.eq(\"85000\");",
                      "    pm.expect(lastAddress.street[0]).to.eq(pm.environment.get(\"seed\") + \".street1\");",
                      "    pm.expect(lastAddress.street[1]).to.eq(pm.environment.get(\"seed\") + \".street2\");",
                      "    pm.expect(lastAddress.telephone).to.eq(pm.environment.get(\"seed\") + \".phone\");",
                      "    pm.expect(lastAddress.vat_id).to.be.a('string').to.eq(pm.environment.get(\"seed\") + \".vat_id\");",
                      "});"
                    ]
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "16d54f96-0512-4548-814a-9beef69d72ad",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{customer-access-token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_customers_id_addresses}}",
                  "host": [
                    "{{domain}}{{endpoint_customers_id_addresses}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Check addresses by ID",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a47455e0-49e9-4fdc-9d13-79dbdb8e02eb",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Successfully loaded address data\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Customer address data is returned\", function () {",
                      "    var lastAddress = pm.response.json();",
                      "    pm.expect(lastAddress.created_at).to.not.be.empty;",
                      "    pm.expect(lastAddress.updated_at).to.not.be.empty;",
                      "    pm.expect(lastAddress.firstname).to.eq(pm.environment.get(\"seed\") + \".first\");",
                      "    pm.expect(lastAddress.lastname).to.eq(pm.environment.get(\"seed\") + \".last\");",
                      "    pm.expect(lastAddress.is_active).to.be.a('string').to.eq('1');",
                      "    pm.expect(lastAddress.company).to.eq(pm.environment.get(\"seed\") + \".company\");",
                      "    pm.expect(lastAddress.city).to.eq(pm.environment.get(\"seed\") + \".city\");",
                      "    pm.expect(lastAddress.country_id).to.eq(\"US\");",
                      "    pm.expect(lastAddress.region).to.eq(\"Arizona\");",
                      "    pm.expect(lastAddress.region_code).to.eq(\"AZ\");",
                      "    pm.expect(lastAddress.postcode).to.be.a('string').to.eq(\"85000\");",
                      "    pm.expect(lastAddress.street[0]).to.eq(pm.environment.get(\"seed\") + \".street1\");",
                      "    pm.expect(lastAddress.street[1]).to.eq(pm.environment.get(\"seed\") + \".street2\");",
                      "    pm.expect(lastAddress.telephone).to.eq(pm.environment.get(\"seed\") + \".phone\");",
                      "    pm.expect(lastAddress.vat_id).to.be.a('string').to.eq(pm.environment.get(\"seed\") + \".vat_id\");",
                      "});"
                    ]
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "16d54f96-0512-4548-814a-9beef69d72ad",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{customer-access-token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_customers_id_addresses}}/{{address-id}}",
                  "host": [
                    "{{domain}}{{endpoint_customers_id_addresses}}"
                  ],
                  "path": [
                    "{{address-id}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "cleanup",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "40b75786-3514-46b9-98c4-6d9774f2d4ab",
                    "type": "text/javascript",
                    "exec": [
                      "pm.environment.unset(\"seed\");",
                      "pm.environment.unset(\"address-id\");",
                      "pm.environment.unset(\"customer-id\");"
                    ]
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "16d54f96-0512-4548-814a-9beef69d72ad",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{customer-access-token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "DELETE",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_customers_id_addresses}}/{{address-id}}",
                  "host": [
                    "{{domain}}{{endpoint_customers_id_addresses}}"
                  ],
                  "path": [
                    "{{address-id}}"
                  ]
                }
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "id": "4b7a8d7f-9bbd-4c6f-878a-f71d38e1a982",
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  ""
                ],
                "id": "cee13ced-d2e8-4416-b506-3ffd165aac32",
                "type": "text/javascript"
              }
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "name": "Update",
          "item": [
            {
              "name": "Errors",
              "item": [
                {
                  "name": "Get customer ID via ME",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "6e232847-89ab-4d2e-94b0-11642a2b365b",
                        "type": "text/javascript",
                        "exec": [
                          "pm.test(\"Successfully loaded customer data via ME endpoint\", function () {",
                          "    var jsonData = pm.response.json();",
                          "    pm.response.to.have.status(200);",
                          "    pm.environment.set(\"customer-id\", jsonData.customer_id);",
                          "});"
                        ]
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "f4a1b51e-3eea-4ae6-9dfd-f4c5faf33af3",
                        "type": "text/javascript",
                        "exec": [
                          "pm.environment.unset(\"customer_id\");"
                        ]
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{customer-access-token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "GET",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": ""
                    },
                    "url": {
                      "raw": "{{domain}}{{endpoint_customers_me}}",
                      "host": [
                        "{{domain}}{{endpoint_customers_me}}"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Create address (get ID)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "0b831f5a-28f5-4714-9636-ced2cc33ff65",
                        "type": "text/javascript",
                        "exec": [
                          "// preparation for delete / update address endpoint",
                          "var jsonData = pm.response.json();",
                          "if (jsonData.addressId) {",
                          "    pm.environment.set(\"address-id\", jsonData.addressId);",
                          "}"
                        ]
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "666aa4c8-cc6b-47e8-bbb2-f54f7cd6dd6c",
                        "type": "text/javascript",
                        "exec": [
                          "pm.environment.set(\"seed\", \"address-\" + Math.floor(Math.random() * Math.floor(100)));"
                        ]
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{customer-access-token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"firstname\": \"{{seed}}.first\",\n    \"middlename\": \"{{seed}}.mid\",\n    \"lastname\": \"{{seed}}.last\",\n    \"company\": \"{{seed}}.company\",\n    \"city\": \"{{seed}}.city\",\n    \"country_id\": \"US\",\n    \"region\": \"Arizona\",\n    \"postcode\": \"85000\",\n    \"telephone\": \"{{seed}}.phone\",\n    \"vat_id\": \"{{seed}}.vat_id\",\n    \"street\": [\n        \"{{seed}}.street1\",\n        \"{{seed}}.street2\"\n    ]\n}"
                    },
                    "url": {
                      "raw": "{{domain}}{{endpoint_customers_id_addresses}}",
                      "host": [
                        "{{domain}}{{endpoint_customers_id_addresses}}"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Empty body",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "244d963e-3945-44c9-9b7a-066d0d6f8c4e",
                        "type": "text/javascript",
                        "exec": [
                          "pm.test(\"Empty body, status 400 returned\", function () {",
                          "    pm.response.to.have.status(400);",
                          "});",
                          "",
                          ""
                        ]
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "16d54f96-0512-4548-814a-9beef69d72ad",
                        "type": "text/javascript",
                        "exec": [
                          ""
                        ]
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{customer-access-token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{}"
                    },
                    "url": {
                      "raw": "{{domain}}{{endpoint_customers_id_addresses}}/{{address-id}}",
                      "host": [
                        "{{domain}}{{endpoint_customers_id_addresses}}"
                      ],
                      "path": [
                        "{{address-id}}"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Region doesn't exist",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "0a78e10c-f4e1-4db8-9cd8-45413846399d",
                        "type": "text/javascript",
                        "exec": [
                          "pm.test(\"Status 400 returned\", function () {",
                          "    pm.response.to.have.status(400);",
                          "});",
                          "",
                          "pm.test(\"Correct errors are returned\", function () {",
                          "    var jsonData = pm.response.json();",
                          "    pm.expect(jsonData.messages.error.length).to.eq(1);",
                          "    pm.expect(jsonData.messages.error[0].path).to.eq('region');",
                          "    pm.expect(jsonData.messages.error[0].messages[0]).to.eq('State/Province does not exist.');",
                          "});"
                        ]
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "16d54f96-0512-4548-814a-9beef69d72ad",
                        "type": "text/javascript",
                        "exec": [
                          ""
                        ]
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{customer-access-token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"country_id\": \"US\",\n    \"region\": \"bla\"\n}"
                    },
                    "url": {
                      "raw": "{{domain}}{{endpoint_customers_id_addresses}}/{{address-id}}",
                      "host": [
                        "{{domain}}{{endpoint_customers_id_addresses}}"
                      ],
                      "path": [
                        "{{address-id}}"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Region is not a string",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "71d16f78-8d2b-42b3-953a-735f1b5f1c50",
                        "type": "text/javascript",
                        "exec": [
                          "pm.test(\"Status 400 returned\", function () {",
                          "    pm.response.to.have.status(400);",
                          "});",
                          "",
                          "pm.test(\"Correct errors are returned\", function () {",
                          "    var jsonData = pm.response.json();",
                          "    pm.expect(jsonData.messages.error.length).to.eq(1);",
                          "    pm.expect(jsonData.messages.error[0].path).to.eq('region');",
                          "});"
                        ]
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "16d54f96-0512-4548-814a-9beef69d72ad",
                        "type": "text/javascript",
                        "exec": [
                          ""
                        ]
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{customer-access-token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"country_id\": \"US\",\n    \"region\": 1\n}"
                    },
                    "url": {
                      "raw": "{{domain}}{{endpoint_customers_id_addresses}}/{{address-id}}",
                      "host": [
                        "{{domain}}{{endpoint_customers_id_addresses}}"
                      ],
                      "path": [
                        "{{address-id}}"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "No region provided",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "86a42c19-c1c8-4d24-a87e-befae29dec4b",
                        "type": "text/javascript",
                        "exec": [
                          "pm.test(\"Status 400 returned\", function () {",
                          "    pm.response.to.have.status(400);",
                          "});",
                          "",
                          "pm.test(\"State/Province error is thrown\", function () {",
                          "    var jsonData = pm.response.json();",
                          "    pm.expect(jsonData.messages.error.length).to.eq(1);",
                          "    pm.expect(jsonData.messages.error[0].path).to.eq('region');",
                          "    pm.expect(jsonData.messages.error[0].messages[0]).to.eq('\"State/Province\" is required.');",
                          "});"
                        ]
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "16d54f96-0512-4548-814a-9beef69d72ad",
                        "type": "text/javascript",
                        "exec": [
                          ""
                        ]
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{customer-access-token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"country_id\": \"US\",\n    \"region\": \"\"\n}"
                    },
                    "url": {
                      "raw": "{{domain}}{{endpoint_customers_id_addresses}}/{{address-id}}",
                      "host": [
                        "{{domain}}{{endpoint_customers_id_addresses}}"
                      ],
                      "path": [
                        "{{address-id}}"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "No region needed for Italy",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "27c387ae-33eb-46d6-a04d-18252e260a26",
                        "type": "text/javascript",
                        "exec": [
                          "pm.test(\"Status 400 returned\", function () {",
                          "    pm.response.to.have.status(400);",
                          "});",
                          "",
                          "pm.test(\"Only postcode error is thrown and no region error\", function () {",
                          "    var jsonData = pm.response.json();",
                          "    pm.expect(jsonData.messages.error.length).to.eq(1);",
                          "    pm.expect(jsonData.messages.error[0].path).to.eq('postcode');",
                          "});"
                        ]
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "16d54f96-0512-4548-814a-9beef69d72ad",
                        "type": "text/javascript",
                        "exec": [
                          ""
                        ]
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{customer-access-token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"country_id\": \"IT\",\n    \"region\": \"\",\n    \"postcode\": \"\"\n}"
                    },
                    "url": {
                      "raw": "{{domain}}{{endpoint_customers_id_addresses}}/{{address-id}}",
                      "host": [
                        "{{domain}}{{endpoint_customers_id_addresses}}"
                      ],
                      "path": [
                        "{{address-id}}"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Country code too long",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "11a0e30c-2a27-49f6-8be5-26d47dbea85d",
                        "type": "text/javascript",
                        "exec": [
                          "pm.test(\"Status 400 returned\", function () {",
                          "    pm.response.to.have.status(400);",
                          "});",
                          "",
                          "pm.test(\"One error with country_id path returned\", function () {",
                          "    var jsonData = pm.response.json();",
                          "    pm.expect(jsonData.messages.error.length).to.eq(1);",
                          "    pm.expect(jsonData.messages.error[0].path).to.eq('country_id');",
                          "});"
                        ]
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "16d54f96-0512-4548-814a-9beef69d72ad",
                        "type": "text/javascript",
                        "exec": [
                          ""
                        ]
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{customer-access-token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"country_id\": \"United States\"\n}"
                    },
                    "url": {
                      "raw": "{{domain}}{{endpoint_customers_id_addresses}}/{{address-id}}",
                      "host": [
                        "{{domain}}{{endpoint_customers_id_addresses}}"
                      ],
                      "path": [
                        "{{address-id}}"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Country code too short",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "c2456a7c-69e5-438c-9873-320242742b9f",
                        "type": "text/javascript",
                        "exec": [
                          "pm.test(\"Status 400 returned\", function () {",
                          "    pm.response.to.have.status(400);",
                          "});",
                          "",
                          "pm.test(\"One error with country_id path returned\", function () {",
                          "    var jsonData = pm.response.json();",
                          "    pm.expect(jsonData.messages.error.length).to.eq(1);",
                          "    pm.expect(jsonData.messages.error[0].path).to.eq('country_id');",
                          "});"
                        ]
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "16d54f96-0512-4548-814a-9beef69d72ad",
                        "type": "text/javascript",
                        "exec": [
                          ""
                        ]
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{customer-access-token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"country_id\": \"U\"\n}"
                    },
                    "url": {
                      "raw": "{{domain}}{{endpoint_customers_id_addresses}}/{{address-id}}",
                      "host": [
                        "{{domain}}{{endpoint_customers_id_addresses}}"
                      ],
                      "path": [
                        "{{address-id}}"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "cleanup",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "5be76750-28f8-414d-961c-8de6c1185296",
                        "type": "text/javascript",
                        "exec": [
                          "pm.environment.unset(\"seed\");",
                          "pm.environment.unset(\"address-id\");",
                          "pm.environment.unset(\"customer-id\");"
                        ]
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "16d54f96-0512-4548-814a-9beef69d72ad",
                        "type": "text/javascript",
                        "exec": [
                          ""
                        ]
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{customer-access-token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "DELETE",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": ""
                    },
                    "url": {
                      "raw": "{{domain}}{{endpoint_customers_id_addresses}}?ids={{address-id}}",
                      "host": [
                        "{{domain}}{{endpoint_customers_id_addresses}}"
                      ],
                      "query": [
                        {
                          "key": "ids",
                          "value": "{{address-id}}"
                        }
                      ]
                    }
                  },
                  "response": []
                }
              ],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b570ddae-af2d-49be-8573-6490d642017f",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "f3b6d2d4-b0b3-4b7c-ab0c-aa16d0f7ce2f",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                }
              ],
              "_postman_isSubFolder": true
            },
            {
              "name": "Defaults",
              "item": [
                {
                  "name": "Get customer ID via ME",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "5cb95e31-6dc3-45e7-9b0c-a0b309745f49",
                        "type": "text/javascript",
                        "exec": [
                          "pm.test(\"Successfully loaded customer data via ME endpoint\", function () {",
                          "    var jsonData = pm.response.json();",
                          "    pm.response.to.have.status(200);",
                          "    pm.environment.set(\"customer-id\", jsonData.customer_id);",
                          "});"
                        ]
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "f4a1b51e-3eea-4ae6-9dfd-f4c5faf33af3",
                        "type": "text/javascript",
                        "exec": [
                          "pm.environment.unset(\"customer_id\");"
                        ]
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{customer-access-token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "GET",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": ""
                    },
                    "url": {
                      "raw": "{{domain}}{{endpoint_customers_me}}",
                      "host": [
                        "{{domain}}{{endpoint_customers_me}}"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Create address (get ID)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "0b831f5a-28f5-4714-9636-ced2cc33ff65",
                        "type": "text/javascript",
                        "exec": [
                          "// preparation for delete / update address endpoint",
                          "var jsonData = pm.response.json();",
                          "if (jsonData.addressId) {",
                          "    pm.environment.set(\"address-id\", jsonData.addressId);",
                          "}"
                        ]
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "666aa4c8-cc6b-47e8-bbb2-f54f7cd6dd6c",
                        "type": "text/javascript",
                        "exec": [
                          "pm.environment.set(\"seed\", \"address-\" + Math.floor(Math.random() * Math.floor(100)));"
                        ]
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{customer-access-token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"firstname\": \"{{seed}}.first\",\n    \"middlename\": \"{{seed}}.mid\",\n    \"lastname\": \"{{seed}}.last\",\n    \"company\": \"{{seed}}.company\",\n    \"city\": \"{{seed}}.city\",\n    \"country_id\": \"US\",\n    \"region\": \"Arizona\",\n    \"postcode\": \"85000\",\n    \"telephone\": \"{{seed}}.phone\",\n    \"vat_id\": \"{{seed}}.vat_id\",\n    \"street\": [\n        \"{{seed}}.street1\",\n        \"{{seed}}.street2\"\n    ],\n    \"is_default_billing\": 1,\n    \"is_default_shipping\": 1\n}"
                    },
                    "url": {
                      "raw": "{{domain}}{{endpoint_customers_id_addresses}}",
                      "host": [
                        "{{domain}}{{endpoint_customers_id_addresses}}"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Attempt set defaults to 0",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "2102d275-5464-4b29-a4e1-fe22a1d2e578",
                        "type": "text/javascript",
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});"
                        ]
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "7c76b266-d40a-4922-bb90-adfbc01176dd",
                        "type": "text/javascript",
                        "exec": [
                          ""
                        ]
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{customer-access-token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n\t\"country_id\": \"US\",\n\t\"region\": \"AZ\",\n    \"is_default_billing\": 0,\n    \"is_default_shipping\": 0\n}"
                    },
                    "url": {
                      "raw": "{{domain}}{{endpoint_customers_id_addresses}}/{{address-id}}",
                      "host": [
                        "{{domain}}{{endpoint_customers_id_addresses}}"
                      ],
                      "path": [
                        "{{address-id}}"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Check error + clean",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "f690b4c0-cbf4-408e-8c30-9392cd8054f9",
                        "type": "text/javascript",
                        "exec": [
                          "pm.test(\"Cannot delete a default address\", function () {",
                          "    pm.response.to.have.status(405);",
                          "});",
                          "",
                          "pm.environment.unset(\"seed\");",
                          "pm.environment.unset(\"address-id\");",
                          "pm.environment.unset(\"customer-id\");"
                        ]
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "16d54f96-0512-4548-814a-9beef69d72ad",
                        "type": "text/javascript",
                        "exec": [
                          ""
                        ]
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{customer-access-token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "DELETE",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": ""
                    },
                    "url": {
                      "raw": "{{domain}}{{endpoint_customers_id_addresses}}/{{address-id}}",
                      "host": [
                        "{{domain}}{{endpoint_customers_id_addresses}}"
                      ],
                      "path": [
                        "{{address-id}}"
                      ]
                    }
                  },
                  "response": []
                }
              ],
              "description": "Test to make sure that we cannot change defaults by passing 0's at the end we try to delete, a successful error on delete means that it is stil default and we were unsuccessful.",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "3f0b46c5-f723-455e-b31f-5d9a2bfe26f2",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "c8a791ec-f3df-4373-927e-ff890b51d270",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                }
              ],
              "_postman_isSubFolder": true
            },
            {
              "name": "Get customer ID via ME",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5cb95e31-6dc3-45e7-9b0c-a0b309745f49",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Successfully loaded customer data via ME endpoint\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.response.to.have.status(200);",
                      "    pm.environment.set(\"customer-id\", jsonData.customer_id);",
                      "});"
                    ]
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "f4a1b51e-3eea-4ae6-9dfd-f4c5faf33af3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.environment.unset(\"customer_id\");"
                    ]
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{customer-access-token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_customers_me}}",
                  "host": [
                    "{{domain}}{{endpoint_customers_me}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Create address (get ID)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0b831f5a-28f5-4714-9636-ced2cc33ff65",
                    "type": "text/javascript",
                    "exec": [
                      "// preparation for delete / update address endpoint",
                      "var jsonData = pm.response.json();",
                      "if (jsonData.addressId) {",
                      "    pm.environment.set(\"address-id\", jsonData.addressId);",
                      "}"
                    ]
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "666aa4c8-cc6b-47e8-bbb2-f54f7cd6dd6c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.environment.set(\"seed\", \"address-\" + Math.floor(Math.random() * Math.floor(100)));"
                    ]
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{customer-access-token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"firstname\": \"{{seed}}.first\",\n    \"middlename\": \"{{seed}}.mid\",\n    \"lastname\": \"{{seed}}.last\",\n    \"company\": \"{{seed}}.company\",\n    \"city\": \"{{seed}}.city\",\n    \"country_id\": \"US\",\n    \"region\": \"Arizona\",\n    \"postcode\": \"85000\",\n    \"telephone\": \"{{seed}}.phone\",\n    \"fax\": \"{{seed}}.fax\",\n    \"vat_id\": \"{{seed}}.vat_id\",\n    \"street\": [\n        \"{{seed}}.street1\",\n        \"{{seed}}.street2\"\n    ]\n}"
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_customers_id_addresses}}",
                  "host": [
                    "{{domain}}{{endpoint_customers_id_addresses}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Check address data",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b7a49c3a-ca8e-4bef-a3b8-69a9f109d2f0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Successfully loaded address data\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Customer address data is returned\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const lastAddress = jsonData.pop();",
                      "    pm.expect(lastAddress.customer_id).to.eq(pm.environment.get(\"customer-id\"));",
                      "    pm.expect(lastAddress.created_at).to.not.be.empty;",
                      "    pm.expect(lastAddress.created_at).to.eq(lastAddress.updated_at);",
                      "    pm.expect(lastAddress.firstname).to.eq(pm.environment.get(\"seed\") + \".first\");",
                      "    pm.expect(lastAddress.lastname).to.eq(pm.environment.get(\"seed\") + \".last\");",
                      "    pm.expect(lastAddress.is_active).to.eq('1');",
                      "    pm.expect(lastAddress.company).to.eq(pm.environment.get(\"seed\") + \".company\");",
                      "    pm.expect(lastAddress.city).to.eq(pm.environment.get(\"seed\") + \".city\");",
                      "    pm.expect(lastAddress.country_id).to.eq(\"US\");",
                      "    pm.expect(lastAddress.region).to.eq(\"Arizona\");",
                      "    pm.expect(lastAddress.postcode).to.eq(\"85000\");",
                      "    pm.expect(lastAddress.street[0]).to.eq(pm.environment.get(\"seed\") + \".street1\");",
                      "    pm.expect(lastAddress.street[1]).to.eq(pm.environment.get(\"seed\") + \".street2\");",
                      "    pm.expect(lastAddress.telephone).to.eq(pm.environment.get(\"seed\") + \".phone\");",
                      "    pm.expect(lastAddress.fax).to.eq(pm.environment.get(\"seed\") + \".fax\");",
                      "    pm.expect(lastAddress.vat_id).to.eq(pm.environment.get(\"seed\") + \".vat_id\");",
                      "    pm.expect(lastAddress.is_default_billing).to.eq(0);",
                      "    pm.expect(lastAddress.is_default_shipping).to.eq(0);",
                      "});"
                    ]
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "16d54f96-0512-4548-814a-9beef69d72ad",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{customer-access-token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_customers_id_addresses}}",
                  "host": [
                    "{{domain}}{{endpoint_customers_id_addresses}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Update address data",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2102d275-5464-4b29-a4e1-fe22a1d2e578",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ]
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "034019cd-7070-499f-b523-c16e67b7bf67",
                    "type": "text/javascript",
                    "exec": [
                      "pm.environment.set(\"seed\", \"address-\" + Math.floor(Math.random() * Math.floor(100)));",
                      "setTimeout(function(){}, 2000); //delay 2 seconds so that created_at and updated_at are different"
                    ]
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{customer-access-token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"firstname\": \"{{seed}}.first\",\n    \"middlename\": \"{{seed}}.mid\",\n    \"lastname\": \"{{seed}}.last\",\n    \"company\": \"{{seed}}.company\",\n    \"city\": \"{{seed}}.city\",\n    \"country_id\": \"EE\",\n    \"region\": \"Harjumaa\",\n    \"postcode\": \"13916\",\n    \"telephone\": \"{{seed}}.phone\",\n    \"vat_id\": \"{{seed}}.vat_id\",\n    \"fax\": \"{{seed}}.fax\",\n    \"street\": [\n        \"{{seed}}.street1\",\n        \"{{seed}}.street2\"\n    ]\n}"
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_customers_id_addresses}}/{{address-id}}",
                  "host": [
                    "{{domain}}{{endpoint_customers_id_addresses}}"
                  ],
                  "path": [
                    "{{address-id}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Check updated address",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6c29ba64-ea52-460b-8482-c640365195ec",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Successfully loaded address data\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Customer address data is returned\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const lastAddress = jsonData.pop();",
                      "    pm.expect(lastAddress.customer_id).to.eq(pm.environment.get(\"customer-id\"));",
                      "    pm.expect(lastAddress.created_at).to.not.be.empty;",
                      "    pm.expect(lastAddress.created_at).to.not.eq(lastAddress.updated_at);",
                      "    pm.expect(lastAddress.firstname).to.eq(pm.environment.get(\"seed\") + \".first\");",
                      "    pm.expect(lastAddress.lastname).to.eq(pm.environment.get(\"seed\") + \".last\");",
                      "    pm.expect(lastAddress.is_active).to.eq('1');",
                      "    pm.expect(lastAddress.company).to.eq(pm.environment.get(\"seed\") + \".company\");",
                      "    pm.expect(lastAddress.city).to.eq(pm.environment.get(\"seed\") + \".city\");",
                      "    pm.expect(lastAddress.country_id).to.eq(\"EE\");",
                      "    pm.expect(lastAddress.region).to.eq(\"Harjumaa\");",
                      "    pm.expect(lastAddress.postcode).to.eq(\"13916\");",
                      "    pm.expect(lastAddress.street[0]).to.eq(pm.environment.get(\"seed\") + \".street1\");",
                      "    pm.expect(lastAddress.street[1]).to.eq(pm.environment.get(\"seed\") + \".street2\");",
                      "    pm.expect(lastAddress.telephone).to.eq(pm.environment.get(\"seed\") + \".phone\");",
                      "    pm.expect(lastAddress.fax).to.eq(pm.environment.get(\"seed\") + \".fax\");",
                      "    pm.expect(lastAddress.vat_id).to.eq(pm.environment.get(\"seed\") + \".vat_id\");",
                      "    pm.expect(lastAddress.is_default_billing).to.eq(0);",
                      "    pm.expect(lastAddress.is_default_shipping).to.eq(0);",
                      "});"
                    ]
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "e0fd3a4d-b403-41a2-a325-03cc04ccffb6",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{customer-access-token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_customers_id_addresses}}",
                  "host": [
                    "{{domain}}{{endpoint_customers_id_addresses}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Set default",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2102d275-5464-4b29-a4e1-fe22a1d2e578",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ]
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "7c76b266-d40a-4922-bb90-adfbc01176dd",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{customer-access-token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"country_id\": \"US\",\n\t\"region\": \"AZ\",\n    \"is_default_billing\": 1,\n    \"is_default_shipping\": 0\n}"
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_customers_id_addresses}}/{{address-id}}",
                  "host": [
                    "{{domain}}{{endpoint_customers_id_addresses}}"
                  ],
                  "path": [
                    "{{address-id}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Check default + clean",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "16690fc5-fb7b-4f22-ab8f-3c6d66034ea3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Successfully loaded address data\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Customer address data is returned\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const lastAddress = jsonData.pop();",
                      "    pm.expect(lastAddress.is_default_billing).to.eq(1);",
                      "    pm.expect(lastAddress.is_default_shipping).to.eq(0);",
                      "});",
                      "pm.environment.unset(\"seed\");",
                      "pm.environment.unset(\"address-id\");",
                      "pm.environment.unset(\"customer-id\");"
                    ]
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "e0fd3a4d-b403-41a2-a325-03cc04ccffb6",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{customer-access-token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_customers_id_addresses}}",
                  "host": [
                    "{{domain}}{{endpoint_customers_id_addresses}}"
                  ]
                }
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "4b7a8d7f-9bbd-4c6f-878a-f71d38e1a982",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "cee13ced-d2e8-4416-b506-3ffd165aac32",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "name": "Delete",
          "item": [
            {
              "name": "Single",
              "item": [
                {
                  "name": "Get customer ID via ME",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "17e42647-1a30-4fbc-87db-19215e721a8c",
                        "type": "text/javascript",
                        "exec": [
                          "pm.test(\"Successfully loaded customer data via ME endpoint\", function () {",
                          "    var jsonData = pm.response.json();",
                          "    pm.response.to.have.status(200);",
                          "    pm.environment.set(\"customer-id\", jsonData.customer_id);",
                          "});"
                        ]
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "f4a1b51e-3eea-4ae6-9dfd-f4c5faf33af3",
                        "type": "text/javascript",
                        "exec": [
                          "pm.environment.unset(\"customer_id\");"
                        ]
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{customer-access-token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "GET",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": ""
                    },
                    "url": {
                      "raw": "{{domain}}{{endpoint_customers_me}}",
                      "host": [
                        "{{domain}}{{endpoint_customers_me}}"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Create address",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "49048781-04cb-44ee-8271-225312bec2a1",
                        "type": "text/javascript",
                        "exec": [
                          "pm.test(\"Successfully created address data\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "var jsonData = pm.response.json();",
                          "pm.test(\"Customer address ID is returned\", function () {",
                          "    pm.expect(jsonData.addressId).to.not.be.empty;",
                          "});",
                          "",
                          "// preparation for delete address endpoint",
                          "if (jsonData.addressId) {",
                          "    pm.environment.set(\"address-id\", jsonData.addressId);",
                          "}"
                        ]
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "16d54f96-0512-4548-814a-9beef69d72ad",
                        "type": "text/javascript",
                        "exec": [
                          ""
                        ]
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{customer-access-token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n\t\t\"prefix\": \"Test1.prefix\",\n        \"firstname\": \"Test1.first\",\n        \"middlename\": \"Test1.mid\",\n        \"lastname\": \"Test1.last\",\n        \"suffix\": \"Test1.suffix\",\n        \"company\": \"Test1.comapny\",\n        \"city\": \"Test1.city\",\n        \"country_id\": \"US\",\n        \"region\": \"Arizona\",\n        \"postcode\": \"85000\",\n        \"telephone\": \"618-322-0000\",\n        \"vat_id\": \"Test1.vat_id\",\n        \"street\": [\n            \"Test1.street1\",\n            \"Test1.street2\"\n        ]\n\t}"
                    },
                    "url": {
                      "raw": "{{domain}}{{endpoint_customers_id_addresses}}",
                      "host": [
                        "{{domain}}{{endpoint_customers_id_addresses}}"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Delete address by ID",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e2d949cc-8606-477b-98b0-422bb879951e",
                        "type": "text/javascript",
                        "exec": [
                          "pm.test(\"Successfully deleted address\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});"
                        ]
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "16d54f96-0512-4548-814a-9beef69d72ad",
                        "type": "text/javascript",
                        "exec": [
                          ""
                        ]
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{customer-access-token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "DELETE",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": ""
                    },
                    "url": {
                      "raw": "{{domain}}{{endpoint_customers_id_addresses}}/{{address-id}}",
                      "host": [
                        "{{domain}}{{endpoint_customers_id_addresses}}"
                      ],
                      "path": [
                        "{{address-id}}"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "No address exists + cleanup",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "75c2627f-a51e-40cd-b1cc-4e290ec2107f",
                        "type": "text/javascript",
                        "exec": [
                          "pm.test(\"Resource should not exist\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Address not found error\", function () {",
                          "    var jsonData = pm.response.json();",
                          "    pm.expect(jsonData.messages.error.length).to.eq(1);",
                          "    pm.expect(jsonData.messages.error[0].message).to.eq('Resource not found.');",
                          "});",
                          "",
                          "pm.environment.unset(\"address-id\");",
                          "pm.environment.unset(\"customer-id\");"
                        ]
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "16d54f96-0512-4548-814a-9beef69d72ad",
                        "type": "text/javascript",
                        "exec": [
                          ""
                        ]
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{customer-access-token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "GET",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": ""
                    },
                    "url": {
                      "raw": "{{domain}}{{endpoint_customers_id_addresses}}/{{address-id}}",
                      "host": [
                        "{{domain}}{{endpoint_customers_id_addresses}}"
                      ],
                      "path": [
                        "{{address-id}}"
                      ]
                    }
                  },
                  "response": []
                }
              ],
              "_postman_isSubFolder": true
            },
            {
              "name": "Multiple",
              "item": [
                {
                  "name": "Get customer ID via ME",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "815fc4f6-d2ae-400f-8edb-e72ad3cf1e0b",
                        "type": "text/javascript",
                        "exec": [
                          "pm.test(\"Successfully loaded customer data via ME endpoint\", function () {",
                          "    var jsonData = pm.response.json();",
                          "    pm.response.to.have.status(200);",
                          "    pm.environment.set(\"customer-id\", jsonData.customer_id);",
                          "});"
                        ]
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "f4a1b51e-3eea-4ae6-9dfd-f4c5faf33af3",
                        "type": "text/javascript",
                        "exec": [
                          "pm.environment.unset(\"customer_id\");"
                        ]
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{customer-access-token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "GET",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": ""
                    },
                    "url": {
                      "raw": "{{domain}}{{endpoint_customers_me}}",
                      "host": [
                        "{{domain}}{{endpoint_customers_me}}"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Create first address",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "d05474ac-0db9-4084-968e-085b65fd518b",
                        "type": "text/javascript",
                        "exec": [
                          "pm.test(\"Successfully created address data\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "var jsonData = pm.response.json();",
                          "pm.test(\"Customer address ID is returned\", function () {",
                          "    pm.expect(jsonData.addressId).to.not.be.empty;",
                          "});",
                          "",
                          "if (jsonData.addressId) {",
                          "    pm.environment.set(\"address-id\", jsonData.addressId);",
                          "}"
                        ]
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "16d54f96-0512-4548-814a-9beef69d72ad",
                        "type": "text/javascript",
                        "exec": [
                          ""
                        ]
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{customer-access-token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n\t\t\"prefix\": \"Test1.prefix\",\n        \"firstname\": \"Test1.first\",\n        \"middlename\": \"Test1.mid\",\n        \"lastname\": \"Test1.last\",\n        \"suffix\": \"Test1.suffix\",\n        \"company\": \"Test1.comapny\",\n        \"city\": \"Test1.city\",\n        \"country_id\": \"US\",\n        \"region\": \"Arizona\",\n        \"postcode\": \"85000\",\n        \"telephone\": \"618-322-0000\",\n        \"vat_id\": \"Test1.vat_id\",\n        \"street\": [\n            \"Test1.street1\",\n            \"Test1.street2\"\n        ]\n\t}"
                    },
                    "url": {
                      "raw": "{{domain}}{{endpoint_customers_id_addresses}}",
                      "host": [
                        "{{domain}}{{endpoint_customers_id_addresses}}"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Create second address",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "1d8f7c79-4735-4291-997a-68c6afccccc1",
                        "type": "text/javascript",
                        "exec": [
                          "pm.test(\"Successfully created address data\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "var jsonData = pm.response.json();",
                          "pm.test(\"Customer address ID is returned\", function () {",
                          "    pm.expect(jsonData.addressId).to.not.be.empty;",
                          "});",
                          "",
                          "if (jsonData.addressId) {",
                          "    pm.environment.set(\"address-id-2\", jsonData.addressId);",
                          "}"
                        ]
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "16d54f96-0512-4548-814a-9beef69d72ad",
                        "type": "text/javascript",
                        "exec": [
                          ""
                        ]
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{customer-access-token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n\t\t\"prefix\": \"Test1.prefix\",\n        \"firstname\": \"Test1.first\",\n        \"middlename\": \"Test1.mid\",\n        \"lastname\": \"Test1.last\",\n        \"suffix\": \"Test1.suffix\",\n        \"company\": \"Test1.comapny\",\n        \"city\": \"Test1.city\",\n        \"country_id\": \"US\",\n        \"region\": \"Arizona\",\n        \"postcode\": \"85000\",\n        \"telephone\": \"618-322-0000\",\n        \"vat_id\": \"Test1.vat_id\",\n        \"street\": [\n            \"Test1.street1\",\n            \"Test1.street2\"\n        ]\n\t}"
                    },
                    "url": {
                      "raw": "{{domain}}{{endpoint_customers_id_addresses}}",
                      "host": [
                        "{{domain}}{{endpoint_customers_id_addresses}}"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Delete addresses by ID",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "54cb59ee-a543-419a-a837-c4ef22ace3f2",
                        "type": "text/javascript",
                        "exec": [
                          "pm.test(\"Successfully deleted addresses\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});"
                        ]
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "16d54f96-0512-4548-814a-9beef69d72ad",
                        "type": "text/javascript",
                        "exec": [
                          ""
                        ]
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{customer-access-token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "DELETE",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": ""
                    },
                    "url": {
                      "raw": "{{domain}}{{endpoint_customers_id_addresses}}?ids={{address-id}},{{address-id-2}}",
                      "host": [
                        "{{domain}}{{endpoint_customers_id_addresses}}"
                      ],
                      "query": [
                        {
                          "key": "ids",
                          "value": "{{address-id}},{{address-id-2}}"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "No address 1 + cleanup",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "6cb1e62f-0230-4278-a1fc-9f609b5fb352",
                        "type": "text/javascript",
                        "exec": [
                          "pm.test(\"Resource should not exist\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Address not found error\", function () {",
                          "    var jsonData = pm.response.json();",
                          "    pm.expect(jsonData.messages.error.length).to.eq(1);",
                          "    pm.expect(jsonData.messages.error[0].message).to.eq('Resource not found.');",
                          "});",
                          "",
                          "pm.environment.unset(\"address-id\");"
                        ]
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "16d54f96-0512-4548-814a-9beef69d72ad",
                        "type": "text/javascript",
                        "exec": [
                          ""
                        ]
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{customer-access-token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "GET",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": ""
                    },
                    "url": {
                      "raw": "{{domain}}{{endpoint_customers_id_addresses}}/{{address-id}}",
                      "host": [
                        "{{domain}}{{endpoint_customers_id_addresses}}"
                      ],
                      "path": [
                        "{{address-id}}"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "No address 2 + cleanup",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "6387521e-485f-4e06-8aaa-d4d0f5fceea7",
                        "type": "text/javascript",
                        "exec": [
                          "pm.test(\"Resource should not exist\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Address not found error\", function () {",
                          "    var jsonData = pm.response.json();",
                          "    pm.expect(jsonData.messages.error.length).to.eq(1);",
                          "    pm.expect(jsonData.messages.error[0].message).to.eq('Resource not found.');",
                          "});",
                          "",
                          "pm.environment.unset(\"address-id-2\");",
                          "pm.environment.unset(\"customer-id\");"
                        ]
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "16d54f96-0512-4548-814a-9beef69d72ad",
                        "type": "text/javascript",
                        "exec": [
                          ""
                        ]
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{customer-access-token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "GET",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": ""
                    },
                    "url": {
                      "raw": "{{domain}}{{endpoint_customers_id_addresses}}/{{address-id-2}}",
                      "host": [
                        "{{domain}}{{endpoint_customers_id_addresses}}"
                      ],
                      "path": [
                        "{{address-id-2}}"
                      ]
                    }
                  },
                  "response": []
                }
              ],
              "_postman_isSubFolder": true
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "name": "Cleaning routine",
          "item": [
            {
              "name": "Get customer ID via ME",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e4e2fb85-871f-448e-bebf-ea7689ae550a",
                    "type": "text/javascript",
                    "exec": [
                      "if (responseCode.code === 200) {",
                      "    var jsonData = pm.response.json();",
                      "    pm.environment.set(\"customer-id\", jsonData.customer_id);",
                      "}"
                    ]
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "f4a1b51e-3eea-4ae6-9dfd-f4c5faf33af3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.environment.unset(\"customer_id\");"
                    ]
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{customer-access-token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_customers_me}}",
                  "host": [
                    "{{domain}}{{endpoint_customers_me}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get all addresses",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "11498c79-a3ac-49a0-8836-970d8cb7d003",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "const list = [];",
                      "jsonData.forEach((address) => {",
                      "    list.push(address.entity_id);",
                      "})",
                      "",
                      "pm.environment.set(\"cleaning-list\", list.join(','));"
                    ]
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "16d54f96-0512-4548-814a-9beef69d72ad",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{customer-access-token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_customers_id_addresses}}",
                  "host": [
                    "{{domain}}{{endpoint_customers_id_addresses}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Create default address",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "000987a0-8d9f-4c84-8691-9dc12832cc96",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "666aa4c8-cc6b-47e8-bbb2-f54f7cd6dd6c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.environment.set(\"seed\", \"address-\" + Math.floor(Math.random() * Math.floor(100)));"
                    ]
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{customer-access-token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"firstname\": \"{{seed}}.first\",\n    \"middlename\": \"{{seed}}.mid\",\n    \"lastname\": \"{{seed}}.last\",\n    \"company\": \"{{seed}}.company\",\n    \"city\": \"{{seed}}.city\",\n    \"country_id\": \"US\",\n    \"region\": \"Arizona\",\n    \"postcode\": \"85000\",\n    \"telephone\": \"{{seed}}.phone\",\n    \"vat_id\": \"{{seed}}.vat_id\",\n    \"street\": [\n        \"{{seed}}.street1\",\n        \"{{seed}}.street2\"\n    ],\n    \"is_default_billing\": 1,\n    \"is_default_shipping\": 1\n}"
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_customers_id_addresses}}",
                  "host": [
                    "{{domain}}{{endpoint_customers_id_addresses}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Delete all addresses",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2df5b28c-4fc2-41ef-9b51-a00534651f09",
                    "type": "text/javascript",
                    "exec": [
                      "pm.environment.unset(\"cleaning-list\");",
                      "pm.environment.unset(\"seed\");",
                      "pm.environment.unset(\"address-id\");",
                      "pm.environment.unset(\"customer-id\");"
                    ]
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "16d54f96-0512-4548-814a-9beef69d72ad",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{customer-access-token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "DELETE",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_customers_id_addresses}}?ids={{cleaning-list}}",
                  "host": [
                    "{{domain}}{{endpoint_customers_id_addresses}}"
                  ],
                  "query": [
                    {
                      "key": "ids",
                      "value": "{{cleaning-list}}"
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "description": "Removes all addresses and leaves one as default",
          "_postman_isSubFolder": true
        }
      ]
    },
    {
      "name": "/v2/customers/:id/password",
      "item": [
        {
          "name": "Errors",
          "item": [
            {
              "name": "Get customer ID via ME",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ea012073-4774-410e-9933-17dd448960eb",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Successfully loaded customer data via ME endpoint', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.response.to.have.status(200);",
                      "    pm.environment.set('customer-id', jsonData.customer_id);",
                      "});"
                    ]
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "2956442a-244e-44fd-bf12-7af6ccbc6f14",
                    "type": "text/javascript",
                    "exec": [
                      "pm.environment.unset('customer_id');"
                    ]
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{customer-access-token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_customers_me}}",
                  "host": [
                    "{{domain}}{{endpoint_customers_me}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "No params",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "48404a65-e7f6-41ad-82a2-499d01ef49a0",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "1d36bb86-6978-4fb9-8677-26a17c799812",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 400', function () {",
                      "    pm.response.to.have.status(400);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{customer-access-token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n}"
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_customers_id}}/password",
                  "host": [
                    "{{domain}}{{endpoint_customers_id}}"
                  ],
                  "path": [
                    "password"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Empty params",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "48404a65-e7f6-41ad-82a2-499d01ef49a0",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "e544b651-49ab-4890-abb4-bf5c60ea7eb3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 400', function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Both fields needed', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.messages.error.length).to.eq(2);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{customer-access-token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"oldPassword\":\"\",\n\t\"password\":\"\"\n}"
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_customers_id}}/password",
                  "host": [
                    "{{domain}}{{endpoint_customers_id}}"
                  ],
                  "path": [
                    "password"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "No old psw",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b6634a56-9ac1-41c5-b455-941240c19739",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "656e9e80-f50f-4e4e-a91f-93475c22d16e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 400', function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Old password not provided', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.messages.error.length).to.eq(1);",
                      "    pm.expect(jsonData.messages.error[0].path).to.eql('oldPassword');",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{customer-access-token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"password\":\"{{temp-password}}\"\n}"
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_customers_id}}/password",
                  "host": [
                    "{{domain}}{{endpoint_customers_id}}"
                  ],
                  "path": [
                    "password"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Old psw no good",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "7ebb17b5-4e7c-47aa-98e9-80b4ccd3faa0",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "76e3f60c-beec-41ba-9cca-cdf0b0e84d8f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 400', function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Old password is incorrect', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.messages.error.length).to.eq(1);",
                      "    pm.expect(jsonData.messages.error[0].path).to.eql('oldPassword');",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{customer-access-token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"oldPassword\":\"bad-old-pass\",\n\t\"password\":\"{{temp-password}}\"\n}"
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_customers_id}}/password",
                  "host": [
                    "{{domain}}{{endpoint_customers_id}}"
                  ],
                  "path": [
                    "password"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "New psw too short",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "aeed71cc-9f4a-43e2-a19b-9ba269ba64c4",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "b252de02-b823-428e-aa00-7ac829f8b48c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 400', function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('New password is too short', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.messages.error.length).to.eq(1);",
                      "    pm.expect(jsonData.messages.error[0].path).to.eql('password');",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{customer-access-token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"oldPassword\":\"{{password}}\",\n\t\"password\":\"0\"\n}"
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_customers_id}}/password",
                  "host": [
                    "{{domain}}{{endpoint_customers_id}}"
                  ],
                  "path": [
                    "password"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Wrong user update",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "8f466eb5-2868-4c9c-9928-97b16d972b87",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "70e625c1-f82e-481f-9b0f-af1e312bc085",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 404', function () {",
                      "    pm.response.to.have.status(404);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{customer-access-token-2}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"oldPassword\":\"{{password}}\",\n\t\"password\":\"some-pass-attempt\"\n}"
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_customers_id}}/password",
                  "host": [
                    "{{domain}}{{endpoint_customers_id}}"
                  ],
                  "path": [
                    "password"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Guest update",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "8f466eb5-2868-4c9c-9928-97b16d972b87",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "0dfc83e9-9d6e-4d15-ad77-2be028c5eedb",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 401', function () {",
                      "    pm.response.to.have.status(401);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{guest-access-token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"oldPassword\":\"{{password}}\",\n\t\"password\":\"some-pass-attempt\"\n}"
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_customers_id}}/password",
                  "host": [
                    "{{domain}}{{endpoint_customers_id}}"
                  ],
                  "path": [
                    "password"
                  ]
                }
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "name": "Set password",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "ab1294ba-5ea2-4648-967b-29b1638d4bac",
                "type": "text/javascript",
                "exec": [
                  "const tempPass = pm.environment.get('customer-id') + '-' + pm.globals.get('password'); ",
                  "pm.environment.set('temp-password', tempPass);"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "3a3ceec7-7b30-4e18-a785-778df5e4dc12",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{customer-access-token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"email\": \"example@shopgate.com\",\n\t\"firstname\": \"Example\",\n\t\"oldPassword\":\"{{password}}\",\n\t\"password\":\"{{temp-password}}\"\n}"
            },
            "url": {
              "raw": "{{domain}}{{endpoint_customers_id}}/password",
              "host": [
                "{{domain}}{{endpoint_customers_id}}"
              ],
              "path": [
                "password"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Token: password",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3015b5ba-42dd-44e9-8917-feeb0bace473",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code === 200) {",
                  "    var jsonData = pm.response.json();",
                  "    pm.environment.set('customer-access-token', jsonData.access_token);",
                  "}",
                  "",
                  "pm.test('Successfull call', function(){",
                  "    pm.response.to.be.success;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "PHP_AUTH_USER",
                "value": "{{client_id}}"
              },
              {
                "key": "PHP_AUTH_PW",
                "value": "{{client_secret}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"grant_type\": \"password\",\n  \"username\": \"{{username1}}\",\n  \"password\": \"{{temp-password}}\",\n  \"client_id\": \"{{client_id}}\",\n  \"client_secret\":\"{{client_secret}}\"\n}"
            },
            "url": {
              "raw": "{{domain}}{{endpoint_auth_token}}",
              "host": [
                "{{domain}}{{endpoint_auth_token}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "No change in data",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2f37a46f-9858-40d8-ad72-ab2e497f183f",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Successfully loaded customer data via ME endpoint', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.response.to.have.status(200);",
                  "    pm.expect(jsonData.email).to.eq(pm.globals.get('username1'));",
                  "    pm.expect(jsonData.firstname).to.not.eq('Example');",
                  "});"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "a9698550-67e4-44b1-babf-fd75731ff1cd",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{customer-access-token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{domain}}{{endpoint_customers_me}}",
              "host": [
                "{{domain}}{{endpoint_customers_me}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Reset back",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "00e81806-4f10-4220-aa04-932afc3c0d3a",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "c7996809-2acd-41f6-8110-c2fa8113213a",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.environment.unset('temp-password');"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{customer-access-token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"oldPassword\":\"{{temp-password}}\",\n\t\"password\":\"{{password}}\"\n}"
            },
            "url": {
              "raw": "{{domain}}{{endpoint_customers_id}}/password",
              "host": [
                "{{domain}}{{endpoint_customers_id}}"
              ],
              "path": [
                "password"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Token: password",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7691906f-4745-435a-bcf7-f7c8bc284e99",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code === 200) {",
                  "    var jsonData = pm.response.json();",
                  "    pm.environment.set(\"customer-access-token\", jsonData.access_token);",
                  "}",
                  "",
                  "pm.test('Successfull call', function(){",
                  "    pm.response.to.be.success;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "PHP_AUTH_USER",
                "value": "{{client_id}}"
              },
              {
                "key": "PHP_AUTH_PW",
                "value": "{{client_secret}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"grant_type\": \"password\",\n  \"username\": \"{{username1}}\",\n  \"password\": \"{{password}}\",\n  \"client_id\": \"{{client_id}}\",\n  \"client_secret\":\"{{client_secret}}\"\n}"
            },
            "url": {
              "raw": "{{domain}}{{endpoint_auth_token}}",
              "host": [
                "{{domain}}{{endpoint_auth_token}}"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "/v2/products",
      "item": [
        {
          "name": "Customer",
          "item": [
            {
              "name": "No limit",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Retrieved 10 products when no limits are applied\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    var count = Object.keys(jsonData).length;",
                      "    pm.expect(count).to.eql(10);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{customer-access-token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_products}}",
                  "host": [
                    "{{domain}}{{endpoint_products}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Category - New Arrivals",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Retrieved 3 products from New Arrivals category\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    var count = Object.keys(jsonData).length;",
                      "    pm.expect(count).to.eql(3);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{customer-access-token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_products}}?category_id=10",
                  "host": [
                    "{{domain}}{{endpoint_products}}"
                  ],
                  "query": [
                    {
                      "key": "category_id",
                      "value": "10"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Category - does not exist",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Get category does not exist error\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{customer-access-token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_products}}?category_id=99999",
                  "host": [
                    "{{domain}}{{endpoint_products}}"
                  ],
                  "query": [
                    {
                      "key": "category_id",
                      "value": "99999"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Page 1, Limit 4",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Retrieved 3 products from New Arrivals category\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    var count = Object.keys(jsonData).length;",
                      "    pm.expect(count).to.eql(4);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{customer-access-token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_products}}?page=1&limit=4",
                  "host": [
                    "{{domain}}{{endpoint_products}}"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "1"
                    },
                    {
                      "key": "limit",
                      "value": "4"
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "name": "Guest",
          "item": [
            {
              "name": "No limit",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Retrieved 10 products when no limits are applied\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    var count = Object.keys(jsonData).length;",
                      "    pm.expect(count).to.eql(10);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{guest-access-token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_products}}",
                  "host": [
                    "{{domain}}{{endpoint_products}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Category - New Arrivals",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Retrieved 3 products from New Arrivals category\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    var count = Object.keys(jsonData).length;",
                      "    pm.expect(count).to.eql(3);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{guest-access-token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_products}}?category_id=10",
                  "host": [
                    "{{domain}}{{endpoint_products}}"
                  ],
                  "query": [
                    {
                      "key": "category_id",
                      "value": "10"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Category - does not exist",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Get category does not exist error\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{guest-access-token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_products}}?category_id=99999",
                  "host": [
                    "{{domain}}{{endpoint_products}}"
                  ],
                  "query": [
                    {
                      "key": "category_id",
                      "value": "99999"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Page 1, Limit 4",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Retrieved 3 products from New Arrivals category\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    var count = Object.keys(jsonData).length;",
                      "    pm.expect(count).to.eql(4);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{guest-access-token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_products}}?page=1&limit=4",
                  "host": [
                    "{{domain}}{{endpoint_products}}"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "1"
                    },
                    {
                      "key": "limit",
                      "value": "4"
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        }
      ]
    },
    {
      "name": "/v2/products/:id",
      "item": [
        {
          "name": "Guest",
          "item": [
            {
              "name": "Bundled: 447",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Product is indeed bundled. Has stock data. Customer grp 0\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.type_id).to.eql('bundle');",
                      "    pm.expect(jsonData.stock_item.product_id).to.eql('447');",
                      "    pm.expect(jsonData.customer_group_id).to.eql(0);",
                      "});",
                      ""
                    ]
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{guest-access-token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_products}}/447",
                  "host": [
                    "{{domain}}{{endpoint_products}}"
                  ],
                  "path": [
                    "447"
                  ]
                },
                "description": "ID: 447\nType: Bundle\nName: Pillow and Throw Set\nSKU (dynamic): hdb010\nURL: pillow-and-throw-set\nCategory: Home & Decor -> Bed & Bath\nPrice: N/A\n\nBundle Items:\nTitle: Accent Pillow\nID: 24\nName: Titian Raw Silk Pillow | Shay Printed Pillow\nSKU: hdb005 | hdb006\nID: 381 | 382\nSelection ID: 91 | 92\nPrice: 125.00 | 210.00\n\nTitle: Decorative Throw\nID: 23\nName: Carnegie Alpaca Throw | Row Throw | Gramercy Throw\nSKU: hdb007 | hdb008 | hdb009\nID: 383 | 384 | 385\nPrice: 275.00 | 240.00 | 275.00\nSelection ID: 88 | 89 | 115"
              },
              "response": []
            },
            {
              "name": "Configurable: Skirt",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Product is indeed configurable. Has stock data. Customer grp 0. Has children.\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.type_id).to.eql('configurable');",
                      "    pm.expect(jsonData.stock_item.product_id).to.eql('422');",
                      "    pm.expect(jsonData.customer_group_id).to.eql(0);",
                      "    pm.expect(jsonData.children.attributes['92'].id).to.eql('92');",
                      "});",
                      ""
                    ]
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{guest-access-token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_products}}/422",
                  "host": [
                    "{{domain}}{{endpoint_products}}"
                  ],
                  "path": [
                    "422"
                  ]
                },
                "description": "ID: 422\nType: Configurable\nName: Essex Pencil Skirt\nSKU: wsd000c\nCategory: Dresses & Skirts\nPrice: $185.00\n\nSub-Products:\nID: 297 | 298 | 299 | 300 | 301\nName: Essex Pencil Skirt\nSKU: wsd000 | wsd001 | wsd002 | wsd003 | wsd004\nColor (ID: 92): Charcoal (ID: 17)\nSize (ID: 180): 2 (ID: 76) | 4 (ID: 75) | 6 (ID: 74) | 8 (ID: 73) | 10 (ID: 72)"
              },
              "response": []
            },
            {
              "name": "Downloadable: 563",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Product is indeed donwloadable. Has stock data. Customer grp 0\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.type_id).to.eql('downloadable');",
                      "    pm.expect(jsonData.stock_item.product_id).to.eql('563');",
                      "    pm.expect(jsonData.customer_group_id).to.eql(0);",
                      "});",
                      ""
                    ]
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{guest-access-token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_products}}/563",
                  "host": [
                    "{{domain}}{{endpoint_products}}"
                  ],
                  "path": [
                    "563"
                  ]
                },
                "description": "ID: 563\nName: Fire [Kalima remix] by Unannounced Guest\nSKU: hbm010\nCategory: Music & Books\nURL: fire-kalima-remix-by-unannounced-guest\nPrice: 2.00\nQty: 1000"
              },
              "response": []
            },
            {
              "name": "Grouped: 439",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Product is indeed grouped. Has stock data. Customer grp 0\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.type_id).to.eql('grouped');",
                      "    pm.expect(jsonData.stock_item.product_id).to.eql('439');",
                      "    pm.expect(jsonData.customer_group_id).to.eql(0);",
                      "});",
                      ""
                    ]
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{guest-access-token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_products}}/439",
                  "host": [
                    "{{domain}}{{endpoint_products}}"
                  ],
                  "path": [
                    "439"
                  ]
                },
                "description": "ID: 439\nName: Luggage Set\nType: Grouped\nSKU: abl008\nURL: luggage-set\nCategory: Bags & Luggage\n\nSub-Product:\nID: 541 | 377 | 376\nName: Classic Hardshell Suitcase 19\" | Classic Hardshell Suitcase 29\" | Classic Hardshell Suitcase 21\"\nSKU: abl009 | abl007 | abl006\nPrice: 600.00 | 750.00 | 650.00\nQty: 7 | 13 | 15"
              },
              "response": []
            },
            {
              "name": "Nominal: 564",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Product is indeed nominal. Has stock data. Customer grp 0\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.type_id).to.eql('virtual');",
                      "    pm.expect(jsonData.stock_item.product_id).to.eql('564');",
                      "    pm.expect(jsonData.customer_group_id).to.eql(0);",
                      "    pm.expect(jsonData.recurring_profile.start_date_is_editable).to.eql('1');",
                      "});",
                      ""
                    ]
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{guest-access-token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_products}}/564",
                  "host": [
                    "{{domain}}{{endpoint_products}}"
                  ],
                  "path": [
                    "564"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Simple: 554",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Product is indeed simple. Has stock data. Customer grp 0. No options.\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.type_id).to.eql('simple');",
                      "    pm.expect(jsonData.stock_item.product_id).to.eql('554');",
                      "    pm.expect(jsonData.customer_group_id).to.eql(0);",
                      "    pm.expect(jsonData.has_options).to.eql('0');",
                      "    pm.expect(jsonData.required_options).to.eql('0');",
                      "});",
                      ""
                    ]
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{guest-access-token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_products}}/554",
                  "host": [
                    "{{domain}}{{endpoint_products}}"
                  ],
                  "path": [
                    "554"
                  ]
                },
                "description": "ID: 554\nType: Simple\nName: Swiss Movement Sports Watch\nSKU: acj005\nURL: swiss-movement-sports-watch\nCategory: Jewelry\nPrice: $500.00\nQty: 3"
              },
              "response": []
            },
            {
              "name": "Simple: 370 + Options",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Product is indeed simple. Has stock data. Customer grp 0.\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.type_id).to.eql('simple');",
                      "    pm.expect(jsonData.stock_item.product_id).to.eql('370');",
                      "    pm.expect(jsonData.customer_group_id).to.eql(0);",
                      "});",
                      "",
                      "pm.test(\"Product indeed has custom options\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.has_custom_options).to.be.true;",
                      "    pm.expect(jsonData.custom_options[0].product_id).to.eql('370');",
                      "});",
                      ""
                    ]
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{guest-access-token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_products}}/370",
                  "host": [
                    "{{domain}}{{endpoint_products}}"
                  ],
                  "path": [
                    "370"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "GiftCard Physical/dropdown: 454",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8f139093-c317-437e-b371-544698256bd2",
                    "type": "text/javascript",
                    "exec": [
                      "//Testing for EE edition specifics",
                      "var jsonData = pm.response.json();",
                      "if (pm.variables.get(\"mage_type\") === 'EE') {",
                      "    pm.test(\"Status code is 200\", function () {",
                      "        pm.response.to.have.status(200);",
                      "    });",
                      "",
                      "    pm.test(\"Product is indeed GC. Has stock data. \", function () {",
                      "        ",
                      "        pm.expect(jsonData.type_id).to.eql('giftcard');",
                      "        pm.expect(jsonData.stock_item.product_id).to.eql('454');",
                      "    });",
                      "} else {",
                      "    pm.test(\"Product is not visible individually\", function () {",
                      "        pm.response.to.have.status(404);",
                      "    });",
                      "}"
                    ]
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{guest-access-token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_products}}/454",
                  "host": [
                    "{{domain}}{{endpoint_products}}"
                  ],
                  "path": [
                    "454"
                  ]
                }
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "name": "Customer",
          "item": [
            {
              "name": "Bundled: 447",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Product is indeed bundled. Has stock data.\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.type_id).to.eql('bundle');",
                      "    pm.expect(jsonData.stock_item.product_id).to.eql('447');",
                      "});",
                      ""
                    ]
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{customer-access-token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_products}}/447",
                  "host": [
                    "{{domain}}{{endpoint_products}}"
                  ],
                  "path": [
                    "447"
                  ]
                },
                "description": "ID: 447\nType: Bundle\nName: Pillow and Throw Set\nSKU (dynamic): hdb010\nURL: pillow-and-throw-set\nCategory: Home & Decor -> Bed & Bath\nPrice: N/A\n\nBundle Items:\nTitle: Accent Pillow\nID: 24\nName: Titian Raw Silk Pillow | Shay Printed Pillow\nSKU: hdb005 | hdb006\nID: 381 | 382\nSelection ID: 91 | 92\nPrice: 125.00 | 210.00\n\nTitle: Decorative Throw\nID: 23\nName: Carnegie Alpaca Throw | Row Throw | Gramercy Throw\nSKU: hdb007 | hdb008 | hdb009\nID: 383 | 384 | 385\nPrice: 275.00 | 240.00 | 275.00\nSelection ID: 88 | 89 | 115"
              },
              "response": []
            },
            {
              "name": "Configurable: Skirt",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Product is indeed configurable. Has stock data. Has children.\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.type_id).to.eql('configurable');",
                      "    pm.expect(jsonData.stock_item.product_id).to.eql('422');",
                      "    pm.expect(jsonData.children.attributes['92'].id).to.eql('92');",
                      "});",
                      ""
                    ]
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{customer-access-token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_products}}/422",
                  "host": [
                    "{{domain}}{{endpoint_products}}"
                  ],
                  "path": [
                    "422"
                  ]
                },
                "description": "ID: 422\nType: Configurable\nName: Essex Pencil Skirt\nSKU: wsd000c\nCategory: Dresses & Skirts\nPrice: $185.00\n\nSub-Products:\nID: 297 | 298 | 299 | 300 | 301\nName: Essex Pencil Skirt\nSKU: wsd000 | wsd001 | wsd002 | wsd003 | wsd004\nColor (ID: 92): Charcoal (ID: 17)\nSize (ID: 180): 2 (ID: 76) | 4 (ID: 75) | 6 (ID: 74) | 8 (ID: 73) | 10 (ID: 72)"
              },
              "response": []
            },
            {
              "name": "Downloadable: 563",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Product is indeed donwloadable. Has stock data.\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.type_id).to.eql('downloadable');",
                      "    pm.expect(jsonData.stock_item.product_id).to.eql('563');",
                      "});",
                      ""
                    ]
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{customer-access-token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_products}}/563",
                  "host": [
                    "{{domain}}{{endpoint_products}}"
                  ],
                  "path": [
                    "563"
                  ]
                },
                "description": "ID: 563\nName: Fire [Kalima remix] by Unannounced Guest\nSKU: hbm010\nCategory: Music & Books\nURL: fire-kalima-remix-by-unannounced-guest\nPrice: 2.00\nQty: 1000"
              },
              "response": []
            },
            {
              "name": "Grouped: 439",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Product is indeed grouped. Has stock data. Customer grp 0\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.type_id).to.eql('grouped');",
                      "    pm.expect(jsonData.stock_item.product_id).to.eql('439');",
                      "});",
                      ""
                    ]
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{customer-access-token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_products}}/439",
                  "host": [
                    "{{domain}}{{endpoint_products}}"
                  ],
                  "path": [
                    "439"
                  ]
                },
                "description": "ID: 439\nName: Luggage Set\nType: Grouped\nSKU: abl008\nURL: luggage-set\nCategory: Bags & Luggage\n\nSub-Product:\nID: 541 | 377 | 376\nName: Classic Hardshell Suitcase 19\" | Classic Hardshell Suitcase 29\" | Classic Hardshell Suitcase 21\"\nSKU: abl009 | abl007 | abl006\nPrice: 600.00 | 750.00 | 650.00\nQty: 7 | 13 | 15"
              },
              "response": []
            },
            {
              "name": "Nominal: 564",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Product is indeed nominal. Has stock data.\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.type_id).to.eql('virtual');",
                      "    pm.expect(jsonData.stock_item.product_id).to.eql('564');",
                      "    pm.expect(jsonData.recurring_profile.start_date_is_editable).to.eql('1');",
                      "});",
                      ""
                    ]
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{customer-access-token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_products}}/564",
                  "host": [
                    "{{domain}}{{endpoint_products}}"
                  ],
                  "path": [
                    "564"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Simple: 554",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Product is indeed simple. Has stock data. No options.\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.type_id).to.eql('simple');",
                      "    pm.expect(jsonData.stock_item.product_id).to.eql('554');",
                      "    pm.expect(jsonData.has_options).to.eql('0');",
                      "    pm.expect(jsonData.required_options).to.eql('0');",
                      "});",
                      ""
                    ]
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{customer-access-token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_products}}/554",
                  "host": [
                    "{{domain}}{{endpoint_products}}"
                  ],
                  "path": [
                    "554"
                  ]
                },
                "description": "ID: 554\nType: Simple\nName: Swiss Movement Sports Watch\nSKU: acj005\nURL: swiss-movement-sports-watch\nCategory: Jewelry\nPrice: $500.00\nQty: 3"
              },
              "response": []
            },
            {
              "name": "Simple: 370 + Options",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Product is indeed simple. Has stock data.\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.type_id).to.eql('simple');",
                      "    pm.expect(jsonData.stock_item.product_id).to.eql('370');",
                      "});",
                      "",
                      "pm.test(\"Product indeed has custom options\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.has_custom_options).to.be.true;",
                      "    pm.expect(jsonData.custom_options[0].product_id).to.eql('370');",
                      "});",
                      ""
                    ]
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{customer-access-token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_products}}/370",
                  "host": [
                    "{{domain}}{{endpoint_products}}"
                  ],
                  "path": [
                    "370"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "GiftCard Physical/dropdown: 454",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fff5006d-d64d-4a12-bd06-e20c18783d7c",
                    "type": "text/javascript",
                    "exec": [
                      "//Testing for EE edition specifics",
                      "var jsonData = pm.response.json();",
                      "if (pm.variables.get(\"mage_type\") === 'EE') {",
                      "    pm.test(\"Status code is 200\", function () {",
                      "        pm.response.to.have.status(200);",
                      "    });",
                      "",
                      "    pm.test(\"Product is indeed GC. Has stock data. \", function () {",
                      "        ",
                      "        pm.expect(jsonData.type_id).to.eql('giftcard');",
                      "        pm.expect(jsonData.stock_item.product_id).to.eql('454');",
                      "    });",
                      "} else {",
                      "    pm.test(\"Product is not visible individually\", function () {",
                      "        pm.response.to.have.status(404);",
                      "    });",
                      "}"
                    ]
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{customer-access-token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_products}}/454",
                  "host": [
                    "{{domain}}{{endpoint_products}}"
                  ],
                  "path": [
                    "454"
                  ]
                }
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        }
      ]
    },
    {
      "name": "Cart Rules (no coupon)",
      "item": [
        {
          "name": "Customer",
          "item": [
            {
              "name": "Buy X get Y free",
              "item": [
                {
                  "name": "Create customer cart",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "type": "text/javascript",
                        "exec": [
                          "var jsonData = pm.response.json();",
                          "if (responseCode.code === 200 && jsonData.hasOwnProperty('cartId')) {",
                          "    pm.environment.set(\"cartId\", jsonData.cartId);",
                          "    tests[\"Cart ID is returned\"] = isNumeric(jsonData.cartId) === true;",
                          "} else {",
                          "    tests[\"Cart ID is not returned\"] = false;",
                          "}",
                          "",
                          "pm.test('Successfull call', function(){",
                          "    pm.response.to.be.success;",
                          "});",
                          "",
                          "function isNumeric(n) {",
                          "  return !isNaN(parseFloat(n)) && isFinite(n);",
                          "}"
                        ]
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{customer-access-token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{}"
                    },
                    "url": {
                      "raw": "{{domain}}{{endpoint_carts}}",
                      "host": [
                        "{{domain}}{{endpoint_carts}}"
                      ]
                    },
                    "description": "Creates a customer cart"
                  },
                  "response": []
                },
                {
                  "name": "Add Configurable: Boots",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "type": "text/javascript",
                        "exec": [
                          "pm.test('Successfull call', function(){",
                          "    pm.response.to.be.success;",
                          "});"
                        ]
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{customer-access-token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "[\n  {\n    \t\"product\": {\n\t\t    \"product_id\": \"431\",\n\t\t    \"qty\": 2,\n\t\t    \"super_attribute\": {\n\t\t\t      \"92\": \"20\",\n\t\t\t      \"186\": \"102\"\n\t\t\t}\n\t\t}\n  }\n]"
                    },
                    "url": {
                      "raw": "{{domain}}{{endpoint_carts_id_items}}",
                      "host": [
                        "{{domain}}{{endpoint_carts_id_items}}"
                      ]
                    },
                    "description": "ID: 431\nType: Configurable\nName: Ann Ankle Boot\nSKU: aws005c\nURL: borgha-ankle-boot\nPrice: $470.00\nCategory: Shoes\n\n\nSub-Products:\nID: 345 | 346 | 347 | 348 | 349\nName: Ann Ankle Boot\nSKU: aws005 | aws006 | aws007 | aws008 | aws009\nColor (ID: 92): Black (ID: 20)\nShoe size (ID: 186): 6 (ID: 102) | 7 (ID: 101) | 8 (ID: 100) | 9 (ID: 99) | 10 (ID: 98)"
                  },
                  "response": []
                },
                {
                  "name": "Buy one get one free",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "d906d273-ecd5-49af-9677-e898deaa3f4c",
                        "type": "text/javascript",
                        "exec": [
                          "pm.test(\"Successfully loaded cart via ME endpoint\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"Boots in cart with one added free\", function () {",
                          "    var jsonData = pm.response.json();",
                          "    pm.expect(parseFloat(jsonData.items_count)).to.eq(1);",
                          "    pm.expect(parseFloat(jsonData.items_qty)).to.eq(2);",
                          "    pm.expect(parseFloat(jsonData.grand_total)).to.be.lt(471);",
                          "});"
                        ]
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{customer-access-token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "GET",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{}"
                    },
                    "url": {
                      "raw": "{{domain}}{{endpoint_carts}}/me",
                      "host": [
                        "{{domain}}{{endpoint_carts}}"
                      ],
                      "path": [
                        "me"
                      ]
                    }
                  },
                  "response": []
                }
              ],
              "description": "This cart rule ID is 38. Needs to have 2+ items from category Shoes to make one free. 1 use per customer. Customer group: General, VIP, Private Sales Member(EE)",
              "_postman_isSubFolder": true
            },
            {
              "name": "Mobile App",
              "item": [
                {
                  "name": "Get customer ID",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "7ee7fb6a-c5ba-4551-b17d-6330b7ae80a3",
                        "type": "text/javascript",
                        "exec": [
                          "var jsonData = pm.response.json();",
                          "pm.environment.set(\"customer-id\", jsonData.customer_id);",
                          ""
                        ]
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "f4a1b51e-3eea-4ae6-9dfd-f4c5faf33af3",
                        "type": "text/javascript",
                        "exec": [
                          "pm.environment.unset(\"customer_id\");"
                        ]
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{customer-access-token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "GET",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": ""
                    },
                    "url": {
                      "raw": "{{domain}}{{endpoint_customers_me}}",
                      "host": [
                        "{{domain}}{{endpoint_customers_me}}"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Create cart + add product",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "bc0b4296-4765-4bfa-b513-e995bfb62e6d",
                        "type": "text/javascript",
                        "exec": [
                          "const responseIsNumeric = isNumeric(pm.response.text()) === true;",
                          "tests[\"Cart ID is returned\"] = responseIsNumeric;",
                          "if (responseIsNumeric) {",
                          "    pm.environment.set(\"cartId\", pm.response.text());",
                          "} else {",
                          "    console.log(pm.response.text())",
                          "}",
                          "",
                          "function isNumeric(n) {",
                          "  return !isNaN(parseFloat(n)) && isFinite(n);",
                          "}"
                        ]
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": ""
                    },
                    "url": {
                      "raw": "{{domain}}forwarder.php?quote=new&customer={{customer-id}}&product=741&store=1",
                      "host": [
                        "{{domain}}forwarder",
                        "php"
                      ],
                      "query": [
                        {
                          "key": "quote",
                          "value": "new",
                          "description": "non numeric param will create a new quote. NB! Has to be the first parameter\n"
                        },
                        {
                          "key": "customer",
                          "value": "{{customer-id}}",
                          "description": "ID of customer"
                        },
                        {
                          "key": "product",
                          "value": "741",
                          "description": "only simple products are currently supported"
                        },
                        {
                          "key": "store",
                          "value": "1"
                        },
                        {
                          "key": "XDEBUG_SESSION_START",
                          "value": "PHPSTORM",
                          "disabled": true
                        }
                      ]
                    },
                    "description": "Creates cart\nAdds the specified customer by ID\nAdds simple product to cart"
                  },
                  "response": []
                },
                {
                  "name": "Check salerule exists",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "16b3cf2d-0779-4ea0-8b4b-a1a44e7658e2",
                        "type": "text/javascript",
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "var jsonData = pm.response.json();",
                          "pm.test(\"Salerule is present in the cart\", function () {",
                          "    pm.expect(jsonData.coupon_code).to.eql(\"1\");",
                          "});",
                          "",
                          "pm.test(\"Check that the quote was collected with our special logic.\", function () {",
                          "    pm.expect(jsonData.items_qty).to.eql(1);",
                          "});"
                        ]
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{customer-access-token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "GET",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{}"
                    },
                    "url": {
                      "raw": "{{domain}}{{endpoint_carts}}/{{cartId}}",
                      "host": [
                        "{{domain}}{{endpoint_carts}}"
                      ],
                      "path": [
                        "{{cartId}}"
                      ]
                    }
                  },
                  "response": []
                }
              ],
              "description": "Creates a cart and adds an item via SOAP as to not trigger our cart assignment",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "a2b8b8f7-4b99-4ba2-8186-911525e64cd0",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "17dd1df4-c998-40b2-86fc-165d8117868c",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                }
              ],
              "_postman_isSubFolder": true
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "name": "Guest",
          "item": [
            {
              "name": "Qty > 5",
              "item": [
                {
                  "name": "/carts: Guest Cart",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "type": "text/javascript",
                        "exec": [
                          "var jsonData = pm.response.json();",
                          "if (responseCode.code === 200 && jsonData.hasOwnProperty('cartId')) {",
                          "    pm.environment.set(\"cartId\", jsonData.cartId);",
                          "    tests[\"Cart ID is returned\"] = isNumeric(jsonData.cartId) === true;",
                          "} else {",
                          "    tests[\"Cart ID is not returned\"] = false;",
                          "}",
                          "",
                          "pm.test('Successfull call', function(){",
                          "    pm.response.to.be.success;",
                          "});",
                          "",
                          "function isNumeric(n) {",
                          "  return !isNaN(parseFloat(n)) && isFinite(n);",
                          "}"
                        ]
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{guest-access-token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{}"
                    },
                    "url": {
                      "raw": "{{domain}}{{endpoint_carts}}",
                      "host": [
                        "{{domain}}{{endpoint_carts}}"
                      ]
                    },
                    "description": "Creates a guest cart and assigns the local cartId variable from the one returned"
                  },
                  "response": []
                },
                {
                  "name": "Add grouped: qty6",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "type": "text/javascript",
                        "exec": [
                          "pm.test('Successfull call', function(){",
                          "    pm.response.to.be.success;",
                          "});"
                        ]
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{guest-access-token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "[\n  {\n    \"product\": {\n\t    \"product_id\": \"439\",\n\t    \"qty\": 1,\n\t    \"super_group\": {\n\t      \"541\" : 6\n\t    }\n\t  }\n  }\n]"
                    },
                    "url": {
                      "raw": "{{domain}}{{endpoint_carts_id_items}}",
                      "host": [
                        "{{domain}}{{endpoint_carts_id_items}}"
                      ]
                    },
                    "description": "ID: 439\nName: Luggage Set\nType: Grouped\nSKU: abl008\nURL: luggage-set\nCategory: Bags & Luggage\n\nSub-Product:\nID: 541 | 377 | 376\nName: Classic Hardshell Suitcase 19\" | Classic Hardshell Suitcase 29\" | Classic Hardshell Suitcase 21\"\nSKU: abl009 | abl007 | abl006\nPrice: 600.00 | 750.00 | 650.00\nQty: 7 | 13 | 15"
                  },
                  "response": []
                },
                {
                  "name": "Cart has discount",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "type": "text/javascript",
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "//Tests customer segments, but they are a tricky beast as they get picked up",
                          "//from customer frontend session + log. This needs to be revistied.",
                          "if (pm.environment.get(\"mage_type\") === 'EE' && false) {",
                          "    pm.test(\"We have a 15 off discount\", function () {",
                          "        var jsonData = pm.response.json();",
                          "        pm.expect(jsonData.totals.discount.value).to.eql(\"-15.0000\");",
                          "    });",
                          "}",
                          "",
                          ""
                        ]
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{guest-access-token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "GET",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{}"
                    },
                    "url": {
                      "raw": "{{domain}}{{endpoint_carts}}/{{cartId}}",
                      "host": [
                        "{{domain}}{{endpoint_carts}}"
                      ],
                      "path": [
                        "{{cartId}}"
                      ]
                    }
                  },
                  "response": []
                }
              ],
              "_postman_isSubFolder": true
            },
            {
              "name": "Mobile App",
              "item": [
                {
                  "name": "Create cart",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "type": "text/javascript",
                        "exec": [
                          "var jsonData = pm.response.json();",
                          "if (responseCode.code === 200 && jsonData.hasOwnProperty('cartId')) {",
                          "    pm.environment.set(\"cartId\", jsonData.cartId);",
                          "    tests[\"Cart ID is returned\"] = isNumeric(jsonData.cartId) === true;",
                          "} else {",
                          "    tests[\"Cart ID is not returned\"] = false;",
                          "}",
                          "",
                          "pm.test('Successfull call', function(){",
                          "    pm.response.to.be.success;",
                          "});",
                          "",
                          "function isNumeric(n) {",
                          "  return !isNaN(parseFloat(n)) && isFinite(n);",
                          "}"
                        ]
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{guest-access-token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{}"
                    },
                    "url": {
                      "raw": "{{domain}}{{endpoint_carts}}",
                      "host": [
                        "{{domain}}{{endpoint_carts}}"
                      ]
                    },
                    "description": "Creates a guest cart and assigns the local cartId variable from the one returned"
                  },
                  "response": []
                },
                {
                  "name": "Add product",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "3329ba14-c7a2-4866-addc-06abf70135a8",
                        "type": "text/javascript",
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});"
                        ]
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{guest-access-token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "[\n  {\n    \"product\": {\n\t    \"product_id\": \"741\",\n\t    \"qty\": 1\n\t  }\n  }\n]"
                    },
                    "url": {
                      "raw": "{{domain}}{{endpoint_carts_id_items}}",
                      "host": [
                        "{{domain}}{{endpoint_carts_id_items}}"
                      ]
                    },
                    "description": "ID: 439\nName: Luggage Set\nType: Grouped\nSKU: abl008\nURL: luggage-set\nCategory: Bags & Luggage\n\nSub-Product:\nID: 541 | 377 | 376\nName: Classic Hardshell Suitcase 19\" | Classic Hardshell Suitcase 29\" | Classic Hardshell Suitcase 21\"\nSKU: abl009 | abl007 | abl006\nPrice: 600.00 | 750.00 | 650.00\nQty: 7 | 13 | 15"
                  },
                  "response": []
                },
                {
                  "name": "Cart has discount",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "f27668dd-5400-41e9-85dc-2a3e1a409644",
                        "type": "text/javascript",
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "var jsonData = pm.response.json();",
                          "pm.test(\"Salerule is present in the cart\", function () {",
                          "    pm.expect(jsonData.coupon_code).to.eql(\"1\");",
                          "});",
                          "",
                          "pm.test(\"Check that the quote was not collected.\", function () {",
                          "    pm.expect(jsonData.items_qty).to.eql(\"1.0000\");",
                          "});"
                        ]
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{guest-access-token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "GET",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{}"
                    },
                    "url": {
                      "raw": "{{domain}}{{endpoint_carts}}/{{cartId}}",
                      "host": [
                        "{{domain}}{{endpoint_carts}}"
                      ],
                      "path": [
                        "{{cartId}}"
                      ]
                    }
                  },
                  "response": []
                }
              ],
              "_postman_isSubFolder": true
            }
          ],
          "_postman_isSubFolder": true
        }
      ],
      "description": "Tests cart rule combinations that do not have a coupon code attached to them"
    },
    {
      "name": "/v2/categories",
      "item": [
        {
          "name": "Customer",
          "item": [
            {
              "name": "Simple call",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0b53f6b5-075c-4361-a55f-45d79c65c871",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_categories}}",
                  "host": [
                    "{{domain}}{{endpoint_categories}}"
                  ]
                }
              },
              "response": []
            }
          ],
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "key": "token",
                "value": "{{customer-access-token}}",
                "type": "string"
              }
            ]
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "d0079da7-ef5b-476f-a922-53fadcc3b9ba",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "c3bb5423-bf5c-461f-821c-10556c7d9556",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "name": "Guest",
          "item": [
            {
              "name": "Simple call",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0b53f6b5-075c-4361-a55f-45d79c65c871",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_categories}}",
                  "host": [
                    "{{domain}}{{endpoint_categories}}"
                  ]
                }
              },
              "response": []
            }
          ],
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "key": "token",
                "value": "{{guest-access-token}}",
                "type": "string"
              }
            ]
          },
          "_postman_isSubFolder": true
        }
      ]
    },
    {
      "name": "/v2/categories/:id",
      "item": [
        {
          "name": "Customer",
          "item": [
            {
              "name": "Simple call",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0b53f6b5-075c-4361-a55f-45d79c65c871",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_categories}}/1",
                  "host": [
                    "{{domain}}{{endpoint_categories}}"
                  ],
                  "path": [
                    "1"
                  ]
                }
              },
              "response": []
            }
          ],
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "key": "token",
                "value": "{{customer-access-token}}",
                "type": "string"
              }
            ]
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "d0079da7-ef5b-476f-a922-53fadcc3b9ba",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "c3bb5423-bf5c-461f-821c-10556c7d9556",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "name": "Guest",
          "item": [
            {
              "name": "Simple call",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0b53f6b5-075c-4361-a55f-45d79c65c871",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_categories}}/1",
                  "host": [
                    "{{domain}}{{endpoint_categories}}"
                  ],
                  "path": [
                    "1"
                  ]
                }
              },
              "response": []
            }
          ],
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "key": "token",
                "value": "{{guest-access-token}}",
                "type": "string"
              }
            ]
          },
          "_postman_isSubFolder": true
        }
      ]
    },
    {
      "name": "auth/token: CORS",
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "a1b98b3b-08b0-4097-8485-7897b41843c2",
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Successful CORS call per definition\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "tests[\"Body is empty\"] = responseBody === \"\";",
              "tests[\"Allow-Headers is proper\"] = postman.getResponseHeader(\"Access-Control-Allow-Headers\") === 'Content-Type,Version,Authorization,PHP_AUTH_USER,PHP_AUTH_PW';",
              "tests[\"Allow-Methods are proper\"] = postman.getResponseHeader(\"Access-Control-Allow-Methods\") === 'GET, POST, PUT, UPDATE, DELETE, OPTIONS';",
              "tests[\"Allow-Origin is *\"] = postman.getResponseHeader(\"Access-Control-Allow-Origin\") === '*';"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Access-Control-Request-Method",
            "value": "POST"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{}"
        },
        "url": {
          "raw": "{{domain}}{{endpoint_auth_token}}",
          "host": [
            "{{domain}}{{endpoint_auth_token}}"
          ]
        }
      },
      "response": []
    }
  ]
}
